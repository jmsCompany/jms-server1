package com.jms.domain.db;
// Generated 2016-3-31 16:15:17 by Hibernate Tools 3.2.2.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * PPoll generated by hbm2java
 */
@Entity
@Table(name="p_poll"
    ,catalog="jms5"
)
public class PPoll  implements java.io.Serializable {


     private Long idPoll;
     private SysDicD sysDicD;
     private Users users;
     private String title;
     private String description;
     private Long maxItems;
     private Date creationTime;
     private Date endTime;
     private Long isAnonymous;
     private Long showResults;
     private String conclusion;
     private String url;
     private Set<PPollItems> PPollItemses = new HashSet<PPollItems>(0);
     private Set<PPollParticipant> PPollParticipants = new HashSet<PPollParticipant>(0);

    public PPoll() {
    }

    public PPoll(SysDicD sysDicD, Users users, String title, String description, Long maxItems, Date creationTime, Date endTime, Long isAnonymous, Long showResults, String conclusion, String url, Set<PPollItems> PPollItemses, Set<PPollParticipant> PPollParticipants) {
       this.sysDicD = sysDicD;
       this.users = users;
       this.title = title;
       this.description = description;
       this.maxItems = maxItems;
       this.creationTime = creationTime;
       this.endTime = endTime;
       this.isAnonymous = isAnonymous;
       this.showResults = showResults;
       this.conclusion = conclusion;
       this.url = url;
       this.PPollItemses = PPollItemses;
       this.PPollParticipants = PPollParticipants;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id_poll", unique=true, nullable=false)
    public Long getIdPoll() {
        return this.idPoll;
    }
    
    public void setIdPoll(Long idPoll) {
        this.idPoll = idPoll;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="status")
    public SysDicD getSysDicD() {
        return this.sysDicD;
    }
    
    public void setSysDicD(SysDicD sysDicD) {
        this.sysDicD = sysDicD;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="creator")
    public Users getUsers() {
        return this.users;
    }
    
    public void setUsers(Users users) {
        this.users = users;
    }
    
    @Column(name="title", length=64)
    public String getTitle() {
        return this.title;
    }
    
    public void setTitle(String title) {
        this.title = title;
    }
    
    @Column(name="description", length=1024)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    @Column(name="max_items")
    public Long getMaxItems() {
        return this.maxItems;
    }
    
    public void setMaxItems(Long maxItems) {
        this.maxItems = maxItems;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="creation_time", length=19)
    public Date getCreationTime() {
        return this.creationTime;
    }
    
    public void setCreationTime(Date creationTime) {
        this.creationTime = creationTime;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="end_time", length=19)
    public Date getEndTime() {
        return this.endTime;
    }
    
    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }
    
    @Column(name="is_anonymous")
    public Long getIsAnonymous() {
        return this.isAnonymous;
    }
    
    public void setIsAnonymous(Long isAnonymous) {
        this.isAnonymous = isAnonymous;
    }
    
    @Column(name="show_results")
    public Long getShowResults() {
        return this.showResults;
    }
    
    public void setShowResults(Long showResults) {
        this.showResults = showResults;
    }
    
    @Column(name="conclusion", length=512)
    public String getConclusion() {
        return this.conclusion;
    }
    
    public void setConclusion(String conclusion) {
        this.conclusion = conclusion;
    }
    
    @Column(name="url", length=512)
    public String getUrl() {
        return this.url;
    }
    
    public void setUrl(String url) {
        this.url = url;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="PPoll")
    public Set<PPollItems> getPPollItemses() {
        return this.PPollItemses;
    }
    
    public void setPPollItemses(Set<PPollItems> PPollItemses) {
        this.PPollItemses = PPollItemses;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="PPoll")
    public Set<PPollParticipant> getPPollParticipants() {
        return this.PPollParticipants;
    }
    
    public void setPPollParticipants(Set<PPollParticipant> PPollParticipants) {
        this.PPollParticipants = PPollParticipants;
    }




}


package com.jms.domain.db;
// Generated 2016-3-31 16:15:17 by Hibernate Tools 3.2.2.GA


import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * GroupMembers generated by hbm2java
 */
@Entity
@Table(name="group_members"
    ,catalog="jms5"
)
public class GroupMembers  implements java.io.Serializable {


     private GroupMembersId id;
     private Roles roles;
     private Users users;
     private Groups groups;

    public GroupMembers() {
    }

	
    public GroupMembers(GroupMembersId id, Users users, Groups groups) {
        this.id = id;
        this.users = users;
        this.groups = groups;
    }
    public GroupMembers(GroupMembersId id, Roles roles, Users users, Groups groups) {
       this.id = id;
       this.roles = roles;
       this.users = users;
       this.groups = groups;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="idGroup", column=@Column(name="id_group", nullable=false) ), 
        @AttributeOverride(name="idUser", column=@Column(name="id_user", nullable=false) ) } )
    public GroupMembersId getId() {
        return this.id;
    }
    
    public void setId(GroupMembersId id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_role")
    public Roles getRoles() {
        return this.roles;
    }
    
    public void setRoles(Roles roles) {
        this.roles = roles;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_user", nullable=false, insertable=false, updatable=false)
    public Users getUsers() {
        return this.users;
    }
    
    public void setUsers(Users users) {
        this.users = users;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_group", nullable=false, insertable=false, updatable=false)
    public Groups getGroups() {
        return this.groups;
    }
    
    public void setGroups(Groups groups) {
        this.groups = groups;
    }




}


package com.jms.domain.db;
// Generated 2016-3-31 16:15:17 by Hibernate Tools 3.2.2.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.jms.domain.db.AbstractSecuredEntity;

/**
 * Groups generated by hbm2java
 */
@Entity
@Table(name="groups"
    ,catalog="jms5"
)
public class Groups extends AbstractSecuredEntity   implements java.io.Serializable {


     private Long idGroup;
     private Company company;
     private Users users;
     private GroupType groupType;
     private String groupName;
     private String description;
     private Date creationTime;
     private Long seq;
     private Set<Receiver> receivers = new HashSet<Receiver>(0);
     private Set<GroupMembers> groupMemberses = new HashSet<GroupMembers>(0);
     private Set<GroupAuthorities> groupAuthoritieses = new HashSet<GroupAuthorities>(0);

    public Groups() {
    }

	
    public Groups(String groupName) {
        this.groupName = groupName;
    }
    public Groups(Company company, Users users, GroupType groupType, String groupName, String description, Date creationTime, Long seq, Set<Receiver> receivers, Set<GroupMembers> groupMemberses, Set<GroupAuthorities> groupAuthoritieses) {
       this.company = company;
       this.users = users;
       this.groupType = groupType;
       this.groupName = groupName;
       this.description = description;
       this.creationTime = creationTime;
       this.seq = seq;
       this.receivers = receivers;
       this.groupMemberses = groupMemberses;
       this.groupAuthoritieses = groupAuthoritieses;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id_group", unique=true, nullable=false)
    public Long getIdGroup() {
        return this.idGroup;
    }
    
    public void setIdGroup(Long idGroup) {
        this.idGroup = idGroup;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_company")
    public Company getCompany() {
        return this.company;
    }
    
    public void setCompany(Company company) {
        this.company = company;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="creator")
    public Users getUsers() {
        return this.users;
    }
    
    public void setUsers(Users users) {
        this.users = users;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_group_type")
    public GroupType getGroupType() {
        return this.groupType;
    }
    
    public void setGroupType(GroupType groupType) {
        this.groupType = groupType;
    }
    
    @Column(name="group_name", nullable=false, length=64)
    public String getGroupName() {
        return this.groupName;
    }
    
    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }
    
    @Column(name="description", length=256)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    @Temporal(TemporalType.DATE)
    @Column(name="creation_time", length=10)
    public Date getCreationTime() {
        return this.creationTime;
    }
    
    public void setCreationTime(Date creationTime) {
        this.creationTime = creationTime;
    }
    
    @Column(name="seq")
    public Long getSeq() {
        return this.seq;
    }
    
    public void setSeq(Long seq) {
        this.seq = seq;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="groups")
    public Set<Receiver> getReceivers() {
        return this.receivers;
    }
    
    public void setReceivers(Set<Receiver> receivers) {
        this.receivers = receivers;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="groups")
    public Set<GroupMembers> getGroupMemberses() {
        return this.groupMemberses;
    }
    
    public void setGroupMemberses(Set<GroupMembers> groupMemberses) {
        this.groupMemberses = groupMemberses;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="groups")
    public Set<GroupAuthorities> getGroupAuthoritieses() {
        return this.groupAuthoritieses;
    }
    
    public void setGroupAuthoritieses(Set<GroupAuthorities> groupAuthoritieses) {
        this.groupAuthoritieses = groupAuthoritieses;
    }

    @Override @Transient
    public Long getId() {
        return this.getIdGroup();
    }
   @Override  @Transient
  	public Users getUser() {
  		return this.getUsers();
  	}

	@Override
	public String toString()
	{
		return "群组名: " + this.getGroupName() +", 描述：" + this.getDescription();
	}


}


package com.jms.domain.db;
// Generated 2016-3-31 16:15:17 by Hibernate Tools 3.2.2.GA


import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * JmsEvent generated by hbm2java
 */
@Entity
@Table(name="jms_event"
    ,catalog="jms5"
)
public class JmsEvent  implements java.io.Serializable {


     private Long idEvent;
     private JmsEvent jmsEvent;
     private Apps apps;
     private String class_;
     private String name;
     private String description;
     private String template;
     private Set<Notification> notifications = new HashSet<Notification>(0);
     private Set<JmsEvent> jmsEvents = new HashSet<JmsEvent>(0);

    public JmsEvent() {
    }

    public JmsEvent(JmsEvent jmsEvent, Apps apps, String class_, String name, String description, String template, Set<Notification> notifications, Set<JmsEvent> jmsEvents) {
       this.jmsEvent = jmsEvent;
       this.apps = apps;
       this.class_ = class_;
       this.name = name;
       this.description = description;
       this.template = template;
       this.notifications = notifications;
       this.jmsEvents = jmsEvents;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id_event", unique=true, nullable=false)
    public Long getIdEvent() {
        return this.idEvent;
    }
    
    public void setIdEvent(Long idEvent) {
        this.idEvent = idEvent;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="parent")
    public JmsEvent getJmsEvent() {
        return this.jmsEvent;
    }
    
    public void setJmsEvent(JmsEvent jmsEvent) {
        this.jmsEvent = jmsEvent;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_app")
    public Apps getApps() {
        return this.apps;
    }
    
    public void setApps(Apps apps) {
        this.apps = apps;
    }
    
    @Column(name="class", length=100)
    public String getClass_() {
        return this.class_;
    }
    
    public void setClass_(String class_) {
        this.class_ = class_;
    }
    
    @Column(name="name", length=64)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="description", length=128)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    @Column(name="template", length=64)
    public String getTemplate() {
        return this.template;
    }
    
    public void setTemplate(String template) {
        this.template = template;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="jmsEvent")
    public Set<Notification> getNotifications() {
        return this.notifications;
    }
    
    public void setNotifications(Set<Notification> notifications) {
        this.notifications = notifications;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="jmsEvent")
    public Set<JmsEvent> getJmsEvents() {
        return this.jmsEvents;
    }
    
    public void setJmsEvents(Set<JmsEvent> jmsEvents) {
        this.jmsEvents = jmsEvents;
    }




}


package com.jms.domain.db;
// Generated 2016-3-31 16:15:17 by Hibernate Tools 3.2.2.GA


import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * MMachine generated by hbm2java
 */
@Entity
@Table(name="m_machine"
    ,catalog="jms5"
)
public class MMachine  implements java.io.Serializable {


     private Long idMachine;
     private Company company;
     private PWorkCenter PWorkCenter;
     private PWip PWip;
     private PLine PLine;
     private MMachineGroup MMachineGroup;
     private SBin SBin;
     private MStatusDic MStatusDic;
     private String code;
     private String name;
     private Long totalKwa;
     private String spec;
     private Date satCompletedDate;
     
     private  BigDecimal mttr;
     private  BigDecimal mtbf;
     private  BigDecimal downtime;
  
     private Set<MRepairHistory> MRepairHistories = new HashSet<MRepairHistory>(0);
     private Set<PCPp> PCPps = new HashSet<PCPp>(0);
     private Set<QFaiInFinal> QFaiInFinals = new HashSet<QFaiInFinal>(0);
     private Set<MMainItem> MMainItems = new HashSet<MMainItem>(0);
     private Set<MRemark> MRemarks = new HashSet<MRemark>(0);
     private Set<MSparePart> MSpareParts = new HashSet<MSparePart>(0);
     private Set<PStopsPlan> PStopsPlans = new HashSet<PStopsPlan>(0);
     private Set<PCheckTime> PCheckTimes = new HashSet<PCheckTime>(0);

    public MMachine() {
    }

    public MMachine(Company company, PWorkCenter PWorkCenter, PWip PWip, PLine PLine, MMachineGroup MMachineGroup, SBin SBin, MStatusDic MStatusDic, String code, String name, Long totalKwa, String spec, Date satCompletedDate, Set<MRepairHistory> MRepairHistories, Set<PCPp> PCPps, Set<QFaiInFinal> QFaiInFinals, Set<MMainItem> MMainItems, Set<MRemark> MRemarks, Set<MSparePart> MSpareParts, Set<PStopsPlan> PStopsPlans, Set<PCheckTime> PCheckTimes) {
       this.company = company;
       this.PWorkCenter = PWorkCenter;
       this.PWip = PWip;
       this.PLine = PLine;
       this.MMachineGroup = MMachineGroup;
       this.SBin = SBin;
       this.MStatusDic = MStatusDic;
       this.code = code;
       this.name = name;
       this.totalKwa = totalKwa;
       this.spec = spec;
       this.satCompletedDate = satCompletedDate;
       this.MRepairHistories = MRepairHistories;
       this.PCPps = PCPps;
       this.QFaiInFinals = QFaiInFinals;
       this.MMainItems = MMainItems;
       this.MRemarks = MRemarks;
       this.MSpareParts = MSpareParts;
       this.PStopsPlans = PStopsPlans;
       this.PCheckTimes = PCheckTimes;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id_machine", unique=true, nullable=false)
    public Long getIdMachine() {
        return this.idMachine;
    }
    
    public void setIdMachine(Long idMachine) {
        this.idMachine = idMachine;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_company")
    public Company getCompany() {
        return this.company;
    }
    
    public void setCompany(Company company) {
        this.company = company;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_wc")
    public PWorkCenter getPWorkCenter() {
        return this.PWorkCenter;
    }
    
    public void setPWorkCenter(PWorkCenter PWorkCenter) {
        this.PWorkCenter = PWorkCenter;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_wip")
    public PWip getPWip() {
        return this.PWip;
    }
    
    public void setPWip(PWip PWip) {
        this.PWip = PWip;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_pline")
    public PLine getPLine() {
        return this.PLine;
    }
    
    public void setPLine(PLine PLine) {
        this.PLine = PLine;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_group")
    public MMachineGroup getMMachineGroup() {
        return this.MMachineGroup;
    }
    
    public void setMMachineGroup(MMachineGroup MMachineGroup) {
        this.MMachineGroup = MMachineGroup;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="location")
    public SBin getSBin() {
        return this.SBin;
    }
    
    public void setSBin(SBin SBin) {
        this.SBin = SBin;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="id_mstatus_dic")
    public MStatusDic getMStatusDic() {
        return this.MStatusDic;
    }
    
    public void setMStatusDic(MStatusDic MStatusDic) {
        this.MStatusDic = MStatusDic;
    }
    
    @Column(name="code", length=20)
    public String getCode() {
        return this.code;
    }
    
    public void setCode(String code) {
        this.code = code;
    }
    
    @Column(name="name", length=20)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="total_kwa", precision=10, scale=0)
    public Long getTotalKwa() {
        return this.totalKwa;
    }
    
    public void setTotalKwa(Long totalKwa) {
        this.totalKwa = totalKwa;
    }
    
    @Column(name="spec", length=64)
    public String getSpec() {
        return this.spec;
    }
    
    public void setSpec(String spec) {
        this.spec = spec;
    }
    @Temporal(TemporalType.DATE)
    @Column(name="sat_completed_date", length=10)
    public Date getSatCompletedDate() {
        return this.satCompletedDate;
    }
    
    public void setSatCompletedDate(Date satCompletedDate) {
        this.satCompletedDate = satCompletedDate;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachine")
    public Set<MRepairHistory> getMRepairHistories() {
        return this.MRepairHistories;
    }
    
    public void setMRepairHistories(Set<MRepairHistory> MRepairHistories) {
        this.MRepairHistories = MRepairHistories;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachine")
    public Set<PCPp> getPCPps() {
        return this.PCPps;
    }
    
    public void setPCPps(Set<PCPp> PCPps) {
        this.PCPps = PCPps;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachine")
    public Set<QFaiInFinal> getQFaiInFinals() {
        return this.QFaiInFinals;
    }
    
    public void setQFaiInFinals(Set<QFaiInFinal> QFaiInFinals) {
        this.QFaiInFinals = QFaiInFinals;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachine")
    public Set<MMainItem> getMMainItems() {
        return this.MMainItems;
    }
    
    public void setMMainItems(Set<MMainItem> MMainItems) {
        this.MMainItems = MMainItems;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachine")
    public Set<MRemark> getMRemarks() {
        return this.MRemarks;
    }
    
    public void setMRemarks(Set<MRemark> MRemarks) {
        this.MRemarks = MRemarks;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachine")
    public Set<MSparePart> getMSpareParts() {
        return this.MSpareParts;
    }
    
    public void setMSpareParts(Set<MSparePart> MSpareParts) {
        this.MSpareParts = MSpareParts;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachine")
    public Set<PStopsPlan> getPStopsPlans() {
        return this.PStopsPlans;
    }
    
    public void setPStopsPlans(Set<PStopsPlan> PStopsPlans) {
        this.PStopsPlans = PStopsPlans;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachine")
    public Set<PCheckTime> getPCheckTimes() {
        return this.PCheckTimes;
    }
    
    public void setPCheckTimes(Set<PCheckTime> PCheckTimes) {
        this.PCheckTimes = PCheckTimes;
    }

    @Column(name="mttr", scale=4)
	public BigDecimal getMttr() {
		return mttr;
	}

	public void setMttr(BigDecimal mttr) {
		this.mttr = mttr;
	}

    @Column(name="mtbf", scale=4)
	public BigDecimal getMtbf() {
		return mtbf;
	}

	public void setMtbf(BigDecimal mtbf) {
		this.mtbf = mtbf;
	}

    @Column(name="downtime", scale=4)
	public BigDecimal getDowntime() {
		return downtime;
	}

	public void setDowntime(BigDecimal downtime) {
		this.downtime = downtime;
	}




}


package com.jms.domain.db;
// Generated 2016-3-31 16:15:17 by Hibernate Tools 3.2.2.GA


import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * MMachineGroup generated by hbm2java
 */
@Entity
@Table(name="m_machine_group"
    ,catalog="jms5"
)
public class MMachineGroup  implements java.io.Serializable {


     private Long idGroup;
     private String groupName;
     private Long idCompany;
     private Set<MMachine> MMachines = new HashSet<MMachine>(0);

    public MMachineGroup() {
    }

    public MMachineGroup(String groupName, Set<MMachine> MMachines) {
       this.groupName = groupName;
       this.MMachines = MMachines;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id_group", unique=true, nullable=false)
    public Long getIdGroup() {
        return this.idGroup;
    }
    
    public void setIdGroup(Long idGroup) {
        this.idGroup = idGroup;
    }
    
    @Column(name="group_name", length=20)
    public String getGroupName() {
        return this.groupName;
    }
    
    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="MMachineGroup")
    public Set<MMachine> getMMachines() {
        return this.MMachines;
    }
    
    public void setMMachines(Set<MMachine> MMachines) {
        this.MMachines = MMachines;
    }
    @Column(name="id_company")
	public Long getIdCompany() {
		return idCompany;
	}

	public void setIdCompany(Long idCompany) {
		this.idCompany = idCompany;
	}




}


package com.jms.repositories.company;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.jms.domain.db.Company;

@Repository
public interface CompanyRepository extends JpaRepository<Company, Long> {
	public Company findByCompanyName(String companyName);

}
package com.jms.controller.company;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import com.jms.acl.SecuredObjectService;
import com.jms.domain.db.SStatusDic;
import com.jms.domain.db.SStk;
import com.jms.domain.ws.Message;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSCompany;
import com.jms.domain.ws.WSTableData;
import com.jms.domainadapter.CompanyAdapter;
import com.jms.repositories.s.SStkRepository;
import com.jms.repositories.system.AppsRepository;
import com.jms.service.company.CompanyService;
import com.jms.system.INotificationService;
import com.jms.user.IUserService;
import com.jms.web.security.SecurityUtils;

@RestController
public class CompanyController {
	
	@Autowired
	private CompanyService companyService;
	@Autowired
	private CompanyAdapter companyAdapter;
	@Autowired @Qualifier("iUserServiceImpl")
	private IUserService iUserServiceImpl;
	@Autowired 
	private  SecurityUtils securityUtils;
	@Autowired 
	private SecuredObjectService securedObjectService;
	@Autowired 
	private AppsRepository appsRepository;
	@Autowired
	private INotificationService notificationService;
	@Autowired
	private SStkRepository sStkRepository;
	
	private static final Logger logger = LogManager.getLogger(CompanyController.class.getCanonicalName());
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/company/create", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public Boolean createCompany(@RequestBody WSCompany wsCompany) throws Exception {
		return companyService.registCompany(wsCompany);
	}
	@Transactional(readOnly = false)
	@RequestMapping(value="/company/update", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public Boolean updateCompany(@RequestBody WSCompany wsCompany) throws Exception {
		return companyService.updateCompany(wsCompany);
	}
	
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="company/view", method=RequestMethod.GET)
	public WSCompany getCompany() throws Exception {
		return companyAdapter.toWSCompany(companyService.findCompany());
	}


	@Transactional(readOnly = false)
	@RequestMapping(value="/company/cancel", method=RequestMethod.DELETE)
	public Message cancelCompany(@RequestParam("idCompany") int idCompany)
	{
		return companyService.cancelCompany(idCompany);
	}

	@Transactional(readOnly = true)
	@RequestMapping(value="/check/companyname", method=RequestMethod.GET)
	public Valid checkCompanyName(@RequestParam("companyname") String companyname,@RequestParam(required=false,value="idCompany") Long idCompany) throws Exception {
		Boolean returnVal= companyService.checkCompanyName(companyname,idCompany);
		Valid valid = new Valid();
		valid.setValid(returnVal);
		return valid;package com.jms.service.company;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.security.acls.domain.BasePermission;
import org.springframework.security.acls.domain.GrantedAuthoritySid;
import org.springframework.security.acls.domain.PrincipalSid;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.acl.SecuredObjectService;
import com.jms.acl.SecurityACLDAO;
import com.jms.domain.Config;
import com.jms.domain.EnabledEnum;
import com.jms.domain.EventTypeEnum;
import com.jms.domain.GroupTypeEnum;
import com.jms.domain.NotificationMethodEnum;
import com.jms.domain.SystemRoleEnum;
import com.jms.domain.db.Apps;
import com.jms.domain.db.Company;
import com.jms.domain.db.GroupMembers;
import com.jms.domain.db.GroupMembersId;
import com.jms.domain.db.Groups;
import com.jms.domain.db.WProject;
import com.jms.domain.db.Roles;
import com.jms.domain.db.SStk;
import com.jms.domain.db.Users;
import com.jms.domain.ws.Message;
import com.jms.domain.ws.MessageTypeEnum;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSCompany;
import com.jms.domain.ws.WSUser;
import com.jms.domainadapter.CompanyAdapter;
import com.jms.domainadapter.UserAdapter;
import com.jms.messages.MessagesUitl;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.system.AppsRepository;
import com.jms.repositories.system.SysDicDRepository;
import com.jms.repositories.user.GroupMemberRepository;
import com.jms.repositories.user.GroupRepository;
import com.jms.repositories.user.GroupTypeRepository;
import com.jms.repositories.user.RoleRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.repositories.workmanagement.ProjectRepository;
import com.jms.s.ISmtfNoService;
import com.jms.repositories.s.SStkRepository;
import com.jms.system.INotificationService;
import com.jms.user.IUserService;
import com.jms.web.security.JMSUserDetails;
import com.jms.web.security.SecurityUtils;

@Service
public class CompanyService {

	@Autowired
	private CompanyRepository companyRepository;
	@Autowired
	private UsersRepository usersRepository;
	@Autowired
	private RoleRepository roleRepository;
	@Autowired
	private ResourceBundleMessageSource source;
	@Autowired
	private MessagesUitl messagesUitl;
	@Autowired
	private UserAdapter userAdapter;
	@Autowired
	private CompanyAdapter companyAdapter;
	@Autowired
	private ProjectRepository projectRepository;
	@Autowired
	@Qualifier("iUserServiceImpl")
	private IUserService iUserServiceImpl;
	@Autowired
	private SecurityUtils securityUtils;
	@Autowired
	private SysDicDRepository sysDicDRepository;
	@Autowired
	private SecurityACLDAO securityACLDAO;
	@Autowired
	private GroupRepository groupRepository;
	@Autowired
	private GroupMemberRepository groupMemberRepository;
	@Autowired
	protected GroupTypeRepository groupTypeRepository;
	@Autowired
	private SecuredObjectService securedObjectService;
	@Autowired
	private AppsRepository appsRepository;
	@Autowired
	private SStkRepository sStkRepository;
	
	@Autowired
	private ISmtfNoService sMtfNoService;
	
	
	
	
	@Autowired
	private INotificationService notificationService;

	private static final Logger logger = LogManager
			.getLogger(CompanyService.class.getCanonicalName());

	@Transactional(readOnly = true)
	public Company findCompany() {
	
		//System.out.println("find company: " + );
		Company company = securityUtils.getCurrentDBUser().getCompany();
		System.out.println("find company: " +company.getCompanyName() );
		if (company.getEnabled() == EnabledEnum.DISENABLED.getStatusCode())
			return null;
		return company;
	}


	@Transactional(readOnly = false)
	public Boolean registCompany(WSCompany wsCompany) throws Exception {
		Boolean valid = checkCompanyName(wsCompany.getCompanyName(), null);
		if (!valid)
			return false;
		Boolean userValid = iUserServiceImpl.checkLogin(wsCompany.getWsUsers()
				.getUsername(), wsCompany.getWsUsers().getEmail(), wsCompany
				.getWsUsers().getMobile(), null);
		if (!userValid)
			return false;
		Users dbUser = userAdapter.toDBUser(wsCompany.getWsUsers(), null);
		iUserServiceImpl.register(dbUser);
		wsCompany.setVerified(0l);
		Company company = companyAdapter.toDBCompany(wsCompany, null);
		company.setUser(dbUser);
		company.setUsersByCreator(dbUser);
		company.setCreationTime(new Date());
		company = companyRepository.save(company);
		dbUser.setCompany(company);
		usersRepository.save(dbUser);

		WSUser wsUser = new WSUser();
		wsUser.setIdUser(dbUser.getIdUser());
		wsUser.setUsername("" + dbUser.getIdUser());
		JMSUserDetails userDetails = new JMSUserDetails(wsUser);
		List<GrantedAuthority> l = new ArrayList<GrantedAuthority>();
		l.add(new GrantedAuthority() {
			private static final long serialVersionUID = 1L;

			@Override
			public String getAuthority() {
				return "admin";
			}
		});
		UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
				userDetails, "***********", l);
		SecurityContextHolder.getContext().setAuthentication(authentication);
		securityACLDAO.addPermission(company, Company.class,
				BasePermission.ADMINISTRATION);
		
		// todo: find template company by some rules!!
		Company templateCompany = companyRepository.findByCompanyName("企业模版");
		copyDataBetweenCompanies(templateCompany, company);
		
		
		sMtfNoService.loadSmtfNosByCompanyId(company.getIdCompany());
		return true;

	}

	@Transactional(readOnly = false)
	public Boolean updateCompany(WSCompany wsCompany) throws Exception {
		Long idCompamplany = wsCompany.getIdCompany();
		Company company = companyRepository.findOne(idCompamplany);
		Boolean valid = checkCompanyName(wsCompany.getCompanyName(),
				idCompamplany);
		if (!valid)
			return false;
		company = companyAdapter.toDBCompany(wsCompany, company);
		companyRepository.save(company);
		return true;

	}

	public Boolean checkCompanyName(String companyName, Long idCompany) {

		String dbCompanyName = "";
		// 已有公司修改
		if (idCompany != null) {
			Company company = companyRepository.findOne(idCompany);
			dbCompanyName = company.getCompanyName();
			if (companyName != null && !companyName.isEmpty()) {
				if (companyRepository.findByCompanyName(companyName) == null
						|| companyName.equals(dbCompanyName)) {
					return true;
				} else {
					return false;
				}
			} else
				return true;
		} else {
			if (companyName == null || companyName.isEmpty())
				return false;
			else {
				if (companyRepository.findByCompanyName(companyName) == null) {
					return true;
				} else {
					return false;
				}
			}
		}
	}

	@Transactional(readOnly = false)
	public Message cancelCompany(int idCompany) {
		logger.debug("user name: " + securityUtils.getUsername());
		String login = securityUtils.getUsername();
		Users u = usersRepository.findByUsernameOrEmailOrMobile(login);
		if (u == null)
			return messagesUitl.getMessage("nosuchuser", null,
					MessageTypeEnum.ERROR);
		Company company = u.getCompany();
		if (u != null && company != null && company.getIdCompany() == idCompany) {
			company.setEnabled(EnabledEnum.DISENABLED.getStatusCode());
			companyRepository.save(company);
			return messagesUitl.getMessage("company.cancel.success", null,
					MessageTypeEnum.INFOMATION);

		}

		return messagesUitl.getMessage("company.cancel.failure", null,
				MessageTypeEnum.ERROR);
	}

	@Transactional(readOnly = false)
	private void copyDataBetweenCompanies(Company from, Company to) {

	
		// copy roles
		for (Roles r : from.getRoleses()) {
			Roles r1 = new Roles();
			r1.setRole(r.getRole());
			r1.setDescription(r.getDescription());
			r1.setCompany(to);
			r1.setLevel(r.getLevel());
			roleRepository.save(r1);
		}

		Users creator = securityUtils.getCurrentDBUser();
		Long companyGroupId = -1l;

		for (Groups g : from.getGroupses()) {
			if (g.getGroupType().getGroupType().equals("User"))
				continue;
			Groups g1 = new Groups();
			g1.setCompany(to);
			g1.setCreationTime(new Date());
			g1.setGroupName(g.getGroupName());
			g1.setGroupType(g.getGroupType());
			g1.setDescription(g.getDescription());
			g1.setUsers(creator);
			groupRepository.save(g1);
			List<Long> idGroups = new ArrayList<Long>();
			idGroups.add(g1.getIdGroup());
			notificationService.createNotification(to, g1, EventTypeEnum.create, NotificationMethodEnum.sys, idGroups);
			if (g.getGroupType().getGroupType()
					.equals(GroupTypeEnum.Company.name())) {
				companyGroupId = g1.getIdGroup();
				GroupMembers gm1 = new GroupMembers();
				GroupMembersId id1 = new GroupMembersId();
				id1.setIdGroup(g1.getIdGroup());
				id1.setIdUser(securityUtils.getCurrentDBUser().getIdUser());
				gm1.setId(id1);
				gm1.setRoles(roleRepository.findByRoleAndCompanyName(
						SystemRoleEnum.admin.name(), from.getCompanyName()));
				groupMemberRepository.save(gm1);
			}
		}

		Groups himself = new Groups();
		himself.setCompany(to);
		himself.setCreationTime(new Date());
		himself.setGroupName("" + creator.getIdUser());
		himself.setGroupType(groupTypeRepository
				.findByGroupType(GroupTypeEnum.User.name()));
		himself.setDescription("" + creator.getIdUser());
		himself.setUsers(creator);
		groupRepository.save(himself);
		GroupMembers gm = new GroupMembers();
		GroupMembersId id = new GroupMembersId();
		id.setIdGroup(himself.getIdGroup());
		id.setIdUser(securityUtils.getCurrentDBUser().getIdUser());
		gm.setId(id);
		gm.setRoles(roleRepository.findByRoleAndCompanyName(
				SystemRoleEnum.user.name(), from.getCompanyName()));
		groupMemberRepository.save(gm);
		
		Groups group = groupRepository.findGroupByGroupNameAndCompany(
				"全公司", to.getIdCompany(), GroupTypeEnum.Company.name());
		List<Long> idGroups = new ArrayList<Long>();
		idGroups.add(group.getIdGroup());
		// copy projects
		for (WProject p : projectRepository.findByCompany(from)) {
			WProject p1 = new WProject();
			p1.setCompany(to);
			p1.setProjectName(p.getProjectName());
			p1.setDescription(p.getDescription());
			p1.setSysDicDByStatus(p.getSysDicDByStatus());
			p1.setUsers(securityUtils.getCurrentDBUser());
			projectRepository.save(p1);
			securityACLDAO.addPermission(p1, WProject.class,
					BasePermission.ADMINISTRATION);
			GrantedAuthoritySid sid = new GrantedAuthoritySid(""
					+ group.getIdGroup());
			securityACLDAO.addPermission(p1, sid, BasePermission.READ);
			notificationService.createNotification(to, p, EventTypeEnum.create, NotificationMethodEnum.sys, idGroups);

		}
		List<Apps> appList = appsRepository.findAll();
		Users admin = from.getUsersByCreator();
		// copy apps
		Map<Apps, String> smap = securedObjectService
				.getSecuredObjectsWithPermissions(admin, appList);

		PrincipalSid pid = new PrincipalSid("" + creator.getIdUser());
		// logger.debug("creator id: " + creator.getIdUser());
		for (Apps a : smap.keySet()) {
			securityACLDAO.addPermission(a, pid, BasePermission.ADMINISTRATION);
		}

		Users normalUser = usersRepository.findByUsername("user");
		GrantedAuthoritySid sid = new GrantedAuthoritySid("" + companyGroupId);
		Map<Apps, String> smap1 = securedObjectService
				.getSecuredObjectsWithPermissions(normalUser, appList);

		for (Apps a : smap1.keySet()) {
			securityACLDAO.addPermission(a, sid, BasePermission.READ);
		}
		
	
		notificationService.createNotification(to, to, EventTypeEnum.create, NotificationMethodEnum.sys, idGroups);
	}

	@Transactional(readOnly = false)
	public Company createTemplateCompany() {
		Company templateCompany = new Company();
		templateCompany.setCompanyName("企业模版");
		templateCompany.setDescription("企业模版");
		templateCompany.setCreationTime(new Date());
		templateCompany.setEnabled(EnabledEnum.ROBOT.getStatusCode());
		templateCompany.setSysDicDByTaskType(sysDicDRepository.findDicsByType(
				Config.taskType).get(0));
		templateCompany.setSysDicDByCompanyCategory(sysDicDRepository
				.findDicsByType(Config.companyCatergory).get(0));
		templateCompany.setUsersByCreator(usersRepository
				.findByUsername("admin"));
		companyRepository.save(templateCompany);
		Users user = usersRepository.findByUsername("user");
		user.setCompany(templateCompany);
		usersRepository.save(user);
		templateCompany.setUsersByCreator(user);
		return templateCompany;
	}
	
	@Transactional(readOnly = false)
	public Boolean createSTK(SStk sStk) {
		sStkRepository.save(sStk);
		return true;
	}
	
	public void addAppsPerms()
	{
		List<Apps> appList = appsRepository.findAll();
		Users admin = securityUtils.getCurrentDBUser();
		PrincipalSid pid = new PrincipalSid("" + admin.getIdUser());
		// logger.debug("creator id: " + creator.getIdUser());
		for (Apps a : appList) {
			securityACLDAO.addPermission(a, pid, BasePermission.ADMINISTRATION);
		}
	}

}package com.jms.service.maintenance;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.csvreader.CsvReader;
import com.jms.domain.db.MHistoryPart;
import com.jms.domain.db.MMachine;
import com.jms.domain.db.MRepairHistory;
import com.jms.domain.db.MSparePart;
import com.jms.domain.db.PUnplannedStops;
import com.jms.domain.db.SInventory;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.m.WSMHistoryPart;
import com.jms.domain.ws.m.WSMRepairHistory;
import com.jms.domain.ws.m.WSMSparePart;
import com.jms.domain.ws.m.WSMachine;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.m.MHistoryPartRepository;
import com.jms.repositories.m.MMachineGroupRepository;
import com.jms.repositories.m.MMachineRepository;
import com.jms.repositories.m.MRepairHistoryRepository;
import com.jms.repositories.m.MSparePartRepository;
import com.jms.repositories.m.MStatusDicRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.repositories.p.PUnplannedStopsRepository;
import com.jms.repositories.p.PWipRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SBinRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class MRepairHistoryService {

	private static final Logger logger = LogManager.getLogger(MRepairHistoryService.class);


	@Autowired
	private MMachineRepository mMachineRepository;
	@Autowired
	private MRepairHistoryRepository mRepairHistoryRepository;
	@Autowired
	private MHistoryPartRepository mHistoryPartRepository;
	@Autowired
	private CompanyRepository companyRepository;
	@Autowired
	private  MStatusDicRepository mStatusDicRepository;
	@Autowired
	private  PLineRepository pLineRepository;
	@Autowired
	private PWipRepository pWipRepository;
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	@Autowired
	private SBinRepository sBinRepository;
	@Autowired private SecurityUtils securityUtils;
	@Autowired private SMaterialRepository sMaterialRepository;

	@Autowired private SInventoryRepository sInventoryRepository;
	@Autowired private UsersRepository usersRepository;
	
	@Autowired private PUnplannedStopsRepository pUnplannedStopsRepository;
	

	
	
	
	@Transactional(readOnly=true)
	public WSMRepairHistory findWSMRepairHistory(Long idRepairHistory) throws Exception{	
		MRepairHistory mRepairHistory = mRepairHistoryRepository.findOne(idRepairHistory);
		return toWSMRepairHistory(mRepairHistory);
	}
	
	@Transactional(readOnly=true)
	public WSMRepairHistory findRepairHistoryByIdUnplannedStop(Long idUnplannedStop) throws Exception{	
		MRepairHistory mRepairHistory = mRepairHistoryRepository.findByIdUnplannedStop(idUnplannedStop);
		return toWSMRepairHistory(mRepairHistory);
	}
	
	
	
	public Valid saveRepairHistory(WSMRepairHistory wsMRepairHistory) throws Exception
	{
		Valid  v = new Valid();
		MRepairHistory mRepairHistory;
		if(wsMRepairHistory.getIdRepairHistory()!=null&&!wsMRepairHistory.getIdRepairHistory().equals(0l))
		{
			mRepairHistory = mRepairHistoryRepository.findOne(wsMRepairHistory.getIdRepairHistory());		
//			if(mRepairHistory!=null&&mRepairHistory.getMStatusDic().getIdMstatusDic().equals(9l))//完成
//			{
//				v.setValid(false);
//				v.setMsg("该维修已经结束，不能修改");
//				return v;
//			}
			if(!mRepairHistory.getMHistoryParts().isEmpty())
			{
				for(MHistoryPart m: mRepairHistory.getMHistoryParts())
				{
					mHistoryPartRepository.delete(m);
				}
				mRepairHistory.getMHistoryParts().clear();
			}
			
			
		}
		else
		{
			mRepairHistory = new MRepairHistory();
		}
		MRepairHistory  dbRepairHistory = toDBRepairHistory( wsMRepairHistory, mRepairHistory);
		dbRepairHistory = mRepairHistoryRepository.save(dbRepairHistory);
		
	
		for(WSMHistoryPart p:wsMRepairHistory.getHistoryPartItems().values())
		{
			MHistoryPart h = new MHistoryPart();
			h.setMRepairHistory(dbRepairHistory);
			h.setQty(p.getQty());
			h.setSMaterial(sMaterialRepository.findOne(p.getMaterialId()));	
			mHistoryPartRepository.save(h);
		}
		v.setValid(true);
		return v;
		
	}
	
	
	@Transactional(readOnly=false)
	public Valid deleteWSMRepairHistory(Long idRepairHistory)
	{
		Valid valid = new Valid();
		mHistoryPartRepository.delete(idRepairHistory);
		valid.setValid(true);
		return valid;
	}
	
	protected MRepairHistory toDBRepairHistory( WSMRepairHistory wsMRepairHistory, MRepairHistory mRepairHistory) throws Exception
	{
		MRepairHistory dbMRepairHistory= (MRepairHistory)BeanUtil.shallowCopy(wsMRepairHistory, MRepairHistory.class, mRepairHistory);
		if(wsMRepairHistory.getMachineId()!=null)
		{
			dbMRepairHistory.setMMachine(mMachineRepository.findOne(wsMRepairHistory.getMachineId()));
		}
		
		if(wsMRepairHistory.getStatusId()!=null)
		{
			dbMRepairHistory.setMStatusDic(mStatusDicRepository.findOne(wsMRepairHistory.getStatusId()));
		}
		if(wsMRepairHistory.getOpId()!=null)
		{
			dbMRepairHistory.setUsersByOp(usersRepository.findOne(wsMRepairHistory.getOpId()));
		}
		if(wsMRepairHistory.getRepairId()!=null)
		{
			dbMRepairHistory.setUsersByRepair(usersRepository.findOne(wsMRepairHistory.getRepairId()));
		}
		if(wsMRepairHistory.getConfirmorId()!=null)
		{
			dbMRepairHistory.setUsersByConfirmor(usersRepository.findOne(wsMRepairHistory.getConfirmorId()));
		}
		if(wsMRepairHistory.getMaintainerId()!=null)
		{
			dbMRepairHistory.setUsersByMaintainer(usersRepository.findOne(wsMRepairHistory.getMaintainerId()));
		}
		if(wsMRepairHistory.getIdUnplannedStop()!=null)
		{
			PUnplannedStops pUnplannedStops = pUnplannedStopsRepository.findOne(wsMRepairHistory.getIdUnplannedStop());
			if(wsMRepairHistory.getResponseTime()==null)
			{
				dbMRepairHistory.setResponseTime(pUnplannedStops.getEqSt());
			}
		  if(wsMRepairHistory.getRepairingTime()==null)
		  {
			  dbMRepairHistory.setRepairingTime(pUnplannedStops.getEqFt());
		  }
			if(wsMRepairHistory.getRecoverTime()==null)
			{
				dbMRepairHistory.setRecoverTime(pUnplannedStops.getOpFt());
			}
		
			
			
		}
	    return dbMRepairHistory;
	}
	
	public WSMRepairHistory toWSMRepairHistory(MRepairHistory mRepairHistory) throws Exception
	{
		WSMRepairHistory pc = (WSMRepairHistory)BeanUtil.shallowCopy(mRepairHistory, WSMRepairHistory.class, null);
		if(mRepairHistory.getMMachine()!=null)
		{
			pc.setMachineId(mRepairHistory.getMMachine().getIdMachine());
			pc.setMachine(mRepairHistory.getMMachine().getCode());
		}
		if(mRepairHistory.getMStatusDic()!=null)
		{
			pc.setStatus(mRepairHistory.getMStatusDic().getName());
			pc.setStatusId(mRepairHistory.getMStatusDic().getIdMstatusDic());
		}
		if(mRepairHistory.getUsersByOp()!=null)
		{
			pc.setOp(mRepairHistory.getUsersByOp().getName());
			pc.setOpId(mRepairHistory.getUsersByOp().getIdUser());
		}
		if(mRepairHistory.getUsersByMaintainer()!=null)
		{
			pc.setMaintainer(mRepairHistory.getUsersByMaintainer().getName());
			pc.setMaintainerId(mRepairHistory.getUsersByMaintainer().getIdUser());
		}
		if(mRepairHistory.getUsersByConfirmor()!=null)
		{
			pc.setConfirmor(mRepairHistory.getUsersByConfirmor().getName());
			pc.setConfirmorId(mRepairHistory.getUsersByConfirmor().getIdUser());
		}
		if(mRepairHistory.getUsersByRepair()!=null)
		{
			pc.setRepair(mRepairHistory.getUsersByRepair().getName());
			pc.setRepairId(mRepairHistory.getUsersByRepair().getIdUser());
		}
	    Map<String,WSMHistoryPart> historyPartItems = new LinkedHashMap<String,WSMHistoryPart>(0);
	    int i = 1;
		for(MHistoryPart m:mRepairHistory.getMHistoryParts())
		{
			WSMHistoryPart w = new WSMHistoryPart();
			w.setIdHistoryPart(m.getIdHistoryPart());
			w.setMaterial(m.getSMaterial().getPno()+"_"+m.getSMaterial().getRev()+"_"+m.getSMaterial().getDes());
			w.setMaterialId(m.getSMaterial().getIdMaterial());
			w.setQty(m.getQty());
			w.setRepairHistoryId(m.getMRepairHistory().getIdRepairHistory());
			historyPartItems.put("item"+i, w);
			i++;
		}
		pc.setHistoryPartItems(historyPartItems);
	    return pc;
	}
}
package com.jms.service.maintenance;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.csvreader.CsvReader;
import com.jms.domain.Config;
import com.jms.domain.db.MMachine;
import com.jms.domain.db.MMainCycle;
import com.jms.domain.db.MMainItem;
import com.jms.domain.db.MResult;
import com.jms.domain.db.MSparePart;
import com.jms.domain.db.SInventory;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.m.WSMSparePart;
import com.jms.domain.ws.m.WSMachine;
import com.jms.domain.ws.m.WSMainItem;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.m.MDeptRepository;
import com.jms.repositories.m.MMachineGroupRepository;
import com.jms.repositories.m.MMachineRepository;
import com.jms.repositories.m.MMainCycleRepository;
import com.jms.repositories.m.MMainItemRepository;
import com.jms.repositories.m.MResultRepository;
import com.jms.repositories.m.MSparePartRepository;
import com.jms.repositories.m.MStatusDicRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.repositories.p.PWipRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SBinRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class MResultService {

	private static final Logger logger = LogManager.getLogger(MResultService.class);


	@Autowired
	private MResultRepository mResultRepository;
	@Autowired
	private MMainItemRepository mMainItemRepository;
	@Autowired
	private CompanyRepository companyRepository;
	@Autowired
	private  MMainCycleRepository mMainCycleRepository;
	@Autowired
	private  PLineRepository pLineRepository;
	@Autowired
	private PWipRepository pWipRepository;
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	@Autowired
	private SBinRepository sBinRepository;
	@Autowired private SecurityUtils securityUtils;
	@Autowired private SMaterialRepository sMaterialRepository;

	@Autowired private SInventoryRepository sInventoryRepository;
	
	@Autowired private  MDeptRepository mDeptRepository;
	

	@Transactional(readOnly=true)
	public List<WSSelectObj> getMResults()
	{
		List<WSSelectObj> wss = new ArrayList<WSSelectObj>();
		for(MResult s :mResultRepository.findAll())
		{
			WSSelectObj w = new WSSelectObj(s.getIdResult(),s.getDes());
			wss.add(w);
		}
		return wss;
	}
	
	
	public void loadMResults() {
		
		for(String s : Config.mresults)
		{
			MResult m = new MResult();
			m.setDes(s);
			mResultRepository.save(m);
		}
	
	}

	
	

}
package com.jms.service.maintenance;


import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.jms.domain.db.MMainItem;
import com.jms.domain.db.MMainRecord;
import com.jms.domain.db.MSparePart;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.m.WSMSparePart;
import com.jms.domain.ws.m.WSMainItem;
import com.jms.domain.ws.m.WSMainRecord;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.m.MDeptRepository;
import com.jms.repositories.m.MMachineRepository;
import com.jms.repositories.m.MMainCycleRepository;
import com.jms.repositories.m.MMainItemRepository;
import com.jms.repositories.m.MMainRecordRepository;
import com.jms.repositories.m.MResultRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.repositories.p.PWipRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SBinRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class MMainRecordService {

	private static final Logger logger = LogManager.getLogger(MMainRecordService.class);


	@Autowired
	private MMachineRepository mMachineRepository;
	@Autowired
	private MMainItemRepository mMainItemRepository;
	@Autowired
	private MMainRecordRepository mMainRecordRepository;
	@Autowired
	private  MMainCycleRepository mMainCycleRepository;

	@Autowired private SecurityUtils securityUtils;
	@Autowired private MResultRepository  mResultRepository;
	
	@Autowired private  MDeptRepository mDeptRepository;
	
	@Autowired private  UsersRepository usersRepository;
	
	
	
	

	@Transactional(readOnly = false)
	public Valid saveWSMainRecords(List<WSMainRecord> mainRecords) {
		
		for(WSMainRecord w:mainRecords)
		{
			
			
			MMainRecord m;
			if(w.getIdMainRecord()==null||w.getIdMainRecord().equals(-1l)||w.getIdMainRecord().equals(0l)) //new 
			{
				 m = new MMainRecord();
			}
			else
			{
				 m= mMainRecordRepository.findOne(w.getIdMainRecord());
			}
			
			MMainItem item =mMainItemRepository.findOne(w.getIdMainItem());
			m.setMMainItem(item);
			if(w.getIdResult()!=null)
			{
				m.setMResult(mResultRepository.findOne(w.getIdResult()));
			}
			Date d;
			if(w.getTime()!=null)
			{
				d= w.getTime();
			}
			else
			{
				d= new Date();
			}
			m.setTime(d);
			if(w.getIdUser()!=null&&!w.getIdUser().equals(0l))
			{
				m.setUsers(usersRepository.findOne(w.getIdUser()));
			}
			else
			{
				m.setUsers(securityUtils.getCurrentDBUser());
			}
			
			//logger.debug("date: " + d.toString() +", type: " + item.getMMainCycle().getIdMainCycle());
			m.setTimeValue((long)getTimeValue(d,item.getMMainCycle().getIdMainCycle()));
			
			
			
			
			Calendar cl = Calendar.getInstance();   
			cl.setTime(d);   
			
			int year = cl.get(Calendar.YEAR);
			m.setYear((long)year);
			MMainRecord  record = mMainRecordRepository.getByIdMainItemAndTimeValueAndYear(w.getIdMainItem(), m.getTimeValue(), m.getYear());
			Valid v = new Valid();
			
			if(record!=null)
			{
				v.setValid(false);
				return v;
			}
			mMainRecordRepository.save(m);
			
			
		}
		Valid v = new Valid();
		v.setValid(true);
		return v;
		
	}
	
	@Transactional(readOnly = true)
	public WSMainRecord  getMainRecordById(Long idMainRecord)  {	   
		MMainRecord m =  mMainRecordRepository.findOne(idMainRecord);
		MMainItem item = m.getMMainItem();
		WSMainRecord w =  new WSMainRecord();
		w.setDept(item.getMDept().getDes());
		w.setIdDept(item.getMDept().getIdDept());
		w.setIdMachine(item.getMMachine().getIdMachine());
		w.setMachine(item.getMMachine().getCode());
		w.setIdMainCycle(item.getMMainCycle().getIdMainCycle());
		w.setMainCycle(item.getMMainCycle().getMainCycle());
		w.setMainItem(item.getItem());
		w.setIdMainItem(item.getIdMainItem());
		w.setIdMainRecord(m.getIdMainRecord());
		if(m.getUsers()!=null)
		{
			String user = (m.getUsers().getName()==null)?"":m.getUsers().getName();
			w.setUser(user);
			w.setIdUser(m.getUsers().getIdUser());
		}
		
		String result = (m.getMResult()==null)?"":m.getMResult().getDes();
		w.setResult(result);
		w.setTime(m.getTime());
		
		return w;
	}
	
	
	@Transactional(readOnly = true)
	public WSMainRecord  getMainRecordByItemId(Long idMainItem)  {	   
		MMainItem item =  mMainItemRepository.findOne(idMainItem);
		
		WSMainRecord w =  new WSMainRecord();
		w.setDept(item.getMDept().getDes());
		w.setIdDept(item.getMDept().getIdDept());
		w.setIdMachine(item.getMMachine().getIdMachine());
		w.setMachine(item.getMMachine().getCode());
		w.setIdMainCycle(item.getMMainCycle().getIdMainCycle());
		w.setMainCycle(item.getMMainCycle().getMainCycle());
		w.setMainItem(item.getItem());
		w.setIdMainItem(item.getIdMainItem());
		w.setIdMainRecord(-1l);
		w.setUser("");
		w.setResult("");
	
		
		return w;
	}
	
	
	
	@Transactional(readOnly = true)
	public List<WSMainRecord>  mainRecordListForPad( Long idMachine, Long idDept)  {
		List<WSMainRecord> ws = new ArrayList<WSMainRecord>();
		List<MMainItem>  mainItems = mMainItemRepository.getByIdMachineAndIdDept(idMachine, idDept);
        Date d = new Date();
		
		Calendar cl = Calendar.getInstance();   
		cl.setTime(d);   
		int year = cl.get(Calendar.YEAR);
		
		for(MMainItem item:mainItems)
		{
			WSMainRecord w =  new WSMainRecord();
			w.setDept(item.getMDept().getDes());
			w.setIdDept(item.getMDept().getIdDept());
			w.setIdMachine(item.getMMachine().getIdMachine());
			w.setMachine(item.getMMachine().getCode());
			w.setIdMainCycle(item.getMMainCycle().getIdMainCycle());
			w.setMainCycle(item.getMMainCycle().getMainCycle());
			w.setMainItem(item.getItem());
			w.setIdMainRecord(-1l);
			w.setIdMainItem(item.getIdMainItem());
			w.setUser("");
			w.setResult("");
			int timeValue=getTimeValue(d,item.getMMainCycle().getIdMainCycle());
			MMainRecord  record = mMainRecordRepository.getByIdMainItemAndTimeValueAndYear(w.getIdMainItem(), (long)timeValue, (long)year);
			if(record !=null)
			{
				if(record.getUsers()!=null)
				{
					String user = (record.getUsers().getName()==null)?"":record.getUsers().getName();
					w.setUser(user);
					w.setIdUser(record.getUsers().getIdUser());
				}
				
				String result = (record.getMResult()==null)?"":record.getMResult().getDes();
				w.setResult(result);
				Long idMainRecord = record.getIdMainRecord();
				w.setIdMainRecord(idMainRecord);
				Date mainDate = record.getTime();
				w.setTime(mainDate);
			}
		
			
			ws.add(w);
		}
		
		return ws;
	}
	
	
	@Transactional(readOnly = true)
	public WSTableData  mainRecordList(Long date, Long idMachine, Long idDept, Integer draw, Integer start, Integer length)  {	   
		
		
		List<MMainItem>  mainItems = mMainItemRepository.getByIdMachineAndIdDept(idMachine, idDept);
		Date d = new Date(date);
		
		Calendar cl = Calendar.getInstance();   
		cl.setTime(d);   
		int year = cl.get(Calendar.YEAR);

		List<String[]> lst = new ArrayList<String[]>();
		int end=0;
		if(mainItems.size()<start + length)
			end =mainItems.size();
		else
			end =start + length;
		for (int i = start; i < end; i++) {
			MMainItem w = mainItems.get(i);
			String machine = (w.getMMachine().getName()==null)?"":w.getMMachine().getName();
			String machineCode = (w.getMMachine().getCode()==null)?"":w.getMMachine().getCode();
			String cycle = w.getMMainCycle().getMainCycle();
			String item = w.getItem();
			
			long type = w.getMMainCycle().getIdMainCycle(); //1日，2周，3月，4季度，5半年，6年
			
			
			
			int timeValue=getTimeValue(d,type);
			
			String user = "";
			String result = "";
			Long idMainRecord = -1l;
			String mainDate="";
			
			logger.debug("item: " + w.getIdMainItem() + ", timeValue: " + timeValue +", year: " + year);
			MMainRecord  record = mMainRecordRepository.getByIdMainItemAndTimeValueAndYear(w.getIdMainItem(), (long)timeValue, (long)year);
			if(record !=null)
			{
				if(record.getUsers()!=null)
				{
					user = (record.getUsers().getName()==null)?"":record.getUsers().getName();
				}
			
				result = (record.getMResult()==null)?"":record.getMResult().getDes();
				idMainRecord = record.getIdMainRecord();
				mainDate = record.getTime().toString();
			}
			String[] s = {""+w.getIdMainItem(),machine,machineCode,cycle,item,mainDate, user,result,""+idMainRecord};
			lst.add(s);

		}
		WSTableData t = new WSTableData();
		t.setDraw(draw);
		t.setRecordsTotal(mainItems.size());
		t.setRecordsFiltered(mainItems.size());
	    t.setData(lst);
	    return t;
	}
	
	
	public int getTimeValue(Date date,long type)
	{
		
		Calendar cl = Calendar.getInstance();   
		cl.setTime(date);   
		int day = cl.get(Calendar.DAY_OF_YEAR);
		int week = cl.get(Calendar.WEEK_OF_YEAR);
		int month = cl.get(Calendar.MONTH)+1;
		int year = cl.get(Calendar.YEAR);
		int season =0;
		if(month <4)
		{
			season = 1;
		}
		else if(4<=month&& month<=6)
		{
			season =2;
		}
		else if(7<=month&& month<=9)
		{
			season =3;
		}
		else
		{
			season =4;
		}
		int halfYear = 0;
		if(month <=6)
		{
			halfYear= 1;
		}
		else
		{
			halfYear =2;
		}
		
		
		int timeValue=0;
		if(type==1l)
		{
			timeValue = day; 	
		}
		else if(type==2l)
		{
			timeValue= week;
		}
		else if(type==3l)
		{
			timeValue = month;
		}
		else if(type==4l)
		{
			timeValue = season;
		}
		else if(type==5l)
		{
			timeValue = halfYear;
		}
		else if(type==6l)
		{
			timeValue = year;
		}
		logger.debug("type: " + type +", day: " + day +", week: " + week +", month: " + month + ", season: " + season +", halfYear: " + halfYear +", year: " + year +", timeValue: " + timeValue);
		return timeValue;
		
	}
	

}
package com.jms.service.maintenance;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.csvreader.CsvReader;
import com.jms.domain.db.MHistoryPart;
import com.jms.domain.db.MMachine;
import com.jms.domain.db.MRepairHistory;
import com.jms.domain.db.MSparePart;
import com.jms.domain.db.PUnplannedStops;
import com.jms.domain.db.SInventory;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.m.WSMHistoryPart;
import com.jms.domain.ws.m.WSMRepairHistory;
import com.jms.domain.ws.m.WSMSparePart;
import com.jms.domain.ws.m.WSMachine;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.m.MHistoryPartRepository;
import com.jms.repositories.m.MMachineGroupRepository;
import com.jms.repositories.m.MMachineRepository;
import com.jms.repositories.m.MRepairHistoryRepository;
import com.jms.repositories.m.MSparePartRepository;
import com.jms.repositories.m.MStatusDicRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.repositories.p.PUnplannedStopsRepository;
import com.jms.repositories.p.PWipRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SBinRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class MRepairHistoryService {

	private static final Logger logger = LogManager.getLogger(MRepairHistoryService.class);


	@Autowired
	private MMachineRepository mMachineRepository;
	@Autowired
	private MRepairHistoryRepository mRepairHistoryRepository;
	@Autowired
	private MHistoryPartRepository mHistoryPartRepository;
	@Autowired
	private CompanyRepository companyRepository;
	@Autowired
	private  MStatusDicRepository mStatusDicRepository;
	@Autowired
	private  PLineRepository pLineRepository;
	@Autowired
	private PWipRepository pWipRepository;
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	@Autowired
	private SBinRepository sBinRepository;
	@Autowired private SecurityUtils securityUtils;
	@Autowired private SMaterialRepository sMaterialRepository;

	@Autowired private SInventoryRepository sInventoryRepository;
	@Autowired private UsersRepository usersRepository;
	
	@Autowired private PUnplannedStopsRepository pUnplannedStopsRepository;
	

	
	
	
	@Transactional(readOnly=true)
	public WSMRepairHistory findWSMRepairHistory(Long idRepairHistory) throws Exception{	
		MRepairHistory mRepairHistory = mRepairHistoryRepository.findOne(idRepairHistory);
		return toWSMRepairHistory(mRepairHistory);
	}
	
	@Transactional(readOnly=true)
	public WSMRepairHistory findRepairHistoryByIdUnplannedStop(Long idUnplannedStop) throws Exception{	
		MRepairHistory mRepairHistory = mRepairHistoryRepository.findByIdUnplannedStop(idUnplannedStop);
		return toWSMRepairHistory(mRepairHistory);
	}
	
	
	
	public Valid saveRepairHistory(WSMRepairHistory wsMRepairHistory) throws Exception
	{
		Valid  v = new Valid();
		MRepairHistory mRepairHistory;
		if(wsMRepairHistory.getIdRepairHistory()!=null&&!wsMRepairHistory.getIdRepairHistory().equals(0l))
		{
			mRepairHistory = mRepairHistoryRepository.findOne(wsMRepairHistory.getIdRepairHistory());		
//			if(mRepairHistory!=null&&mRepairHistory.getMStatusDic().getIdMstatusDic().equals(9l))//完成
//			{
//				v.setValid(false);
//				v.setMsg("该维修已经结束，不能修改");
//				return v;
//			}
			if(!mRepairHistory.getMHistoryParts().isEmpty())
			{
				for(MHistoryPart m: mRepairHistory.getMHistoryParts())
				{
					mHistoryPartRepository.delete(m);
				}
				mRepairHistory.getMHistoryParts().clear();
			}
			
			
		}
		else
		{
			mRepairHistory = new MRepairHistory();
		}
		MRepairHistory  dbRepairHistory = toDBRepairHistory( wsMRepairHistory, mRepairHistory);
		dbRepairHistory = mRepairHistoryRepository.save(dbRepairHistory);
		
	
		for(WSMHistoryPart p:wsMRepairHistory.getHistoryPartItems().values())
		{
			MHistoryPart h = new MHistoryPart();
			h.setMRepairHistory(dbRepairHistory);
			h.setQty(p.getQty());
			h.setSMaterial(sMaterialRepository.findOne(p.getMaterialId()));	
			mHistoryPartRepository.save(h);
		}
		v.setValid(true);
		return v;
		
	}
	
	
	@Transactional(readOnly=false)
	public Valid deleteWSMRepairHistory(Long idRepairHistory)
	{
		Valid valid = new Valid();
		mHistoryPartRepository.delete(idRepairHistory);
		valid.setValid(true);
		return valid;
	}
	
	protected MRepairHistory toDBRepairHistory( WSMRepairHistory wsMRepairHistory, MRepairHistory mRepairHistory) throws Exception
	{
		MRepairHistory dbMRepairHistory= (MRepairHistory)BeanUtil.shallowCopy(wsMRepairHistory, MRepairHistory.class, mRepairHistory);
		if(wsMRepairHistory.getMachineId()!=null)
		{
			dbMRepairHistory.setMMachine(mMachineRepository.findOne(wsMRepairHistory.getMachineId()));
		}
		
		if(wsMRepairHistory.getStatusId()!=null)
		{
			dbMRepairHistory.setMStatusDic(mStatusDicRepository.findOne(wsMRepairHistory.getStatusId()));
		}
		if(wsMRepairHistory.getOpId()!=null)
		{
			dbMRepairHistory.setUsersByOp(usersRepository.findOne(wsMRepairHistory.getOpId()));
		}
		if(wsMRepairHistory.getRepairId()!=null)
		{
			dbMRepairHistory.setUsersByRepair(usersRepository.findOne(wsMRepairHistory.getRepairId()));
		}
		if(wsMRepairHistory.getConfirmorId()!=null)
		{
			dbMRepairHistory.setUsersByConfirmor(usersRepository.findOne(wsMRepairHistory.getConfirmorId()));
		}
		if(wsMRepairHistory.getMaintainerId()!=null)
		{
			dbMRepairHistory.setUsersByMaintainer(usersRepository.findOne(wsMRepairHistory.getMaintainerId()));
		}
		if(wsMRepairHistory.getIdUnplannedStop()!=null)
		{
			PUnplannedStops pUnplannedStops = pUnplannedStopsRepository.findOne(wsMRepairHistory.getIdUnplannedStop());
			if(wsMRepairHistory.getResponseTime()==null)
			{
				dbMRepairHistory.setResponseTime(pUnplannedStops.getEqSt());
			}
		  if(wsMRepairHistory.getRepairingTime()==null)
		  {
			  dbMRepairHistory.setRepairingTime(pUnplannedStops.getEqFt());
		  }
			if(wsMRepairHistory.getRecoverTime()==null)
			{
				dbMRepairHistory.setRecoverTime(pUnplannedStops.getOpFt());
			}
		
			
			
		}
	    return dbMRepairHistory;
	}
	
	public WSMRepairHistory toWSMRepairHistory(MRepairHistory mRepairHistory) throws Exception
	{
		WSMRepairHistory pc = (WSMRepairHistory)BeanUtil.shallowCopy(mRepairHistory, WSMRepairHistory.class, null);
		if(mRepairHistory.getMMachine()!=null)
		{
			pc.setMachineId(mRepairHistory.getMMachine().getIdMachine());
			pc.setMachine(mRepairHistory.getMMachine().getCode());
		}
		if(mRepairHistory.getMStatusDic()!=null)
		{
			pc.setStatus(mRepairHistory.getMStatusDic().getName());
			pc.setStatusId(mRepairHistory.getMStatusDic().getIdMstatusDic());
		}
		if(mRepairHistory.getUsersByOp()!=null)
		{
			pc.setOp(mRepairHistory.getUsersByOp().getName());
			pc.setOpId(mRepairHistory.getUsersByOp().getIdUser());
		}
		if(mRepairHistory.getUsersByMaintainer()!=null)
		{
			pc.setMaintainer(mRepairHistory.getUsersByMaintainer().getName());
			pc.setMaintainerId(mRepairHistory.getUsersByMaintainer().getIdUser());
		}
		if(mRepairHistory.getUsersByConfirmor()!=null)
		{
			pc.setConfirmor(mRepairHistory.getUsersByConfirmor().getName());
			pc.setConfirmorId(mRepairHistory.getUsersByConfirmor().getIdUser());
		}
		if(mRepairHistory.getUsersByRepair()!=null)
		{
			pc.setRepair(mRepairHistory.getUsersByRepair().getName());
			pc.setRepairId(mRepairHistory.getUsersByRepair().getIdUser());
		}
	    Map<String,WSMHistoryPart> historyPartItems = new LinkedHashMap<String,WSMHistoryPart>(0);
	    int i = 1;
		for(MHistoryPart m:mRepairHistory.getMHistoryParts())
		{
			WSMHistoryPart w = new WSMHistoryPart();
			w.setIdHistoryPart(m.getIdHistoryPart());
			w.setMaterial(m.getSMaterial().getPno()+"_"+m.getSMaterial().getRev()+"_"+m.getSMaterial().getDes());
			w.setMaterialId(m.getSMaterial().getIdMaterial());
			w.setQty(m.getQty());
			w.setRepairHistoryId(m.getMRepairHistory().getIdRepairHistory());
			historyPartItems.put("item"+i, w);
			i++;
		}
		pc.setHistoryPartItems(historyPartItems);
	    return pc;
	}
}
package com.jms.service.maintenance;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.csvreader.CsvReader;
import com.jms.domain.Config;
import com.jms.domain.db.MMachine;
import com.jms.domain.db.MMainCycle;
import com.jms.domain.db.MMainItem;
import com.jms.domain.db.MResult;
import com.jms.domain.db.MSparePart;
import com.jms.domain.db.SInventory;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.m.WSMSparePart;
import com.jms.domain.ws.m.WSMachine;
import com.jms.domain.ws.m.WSMainItem;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.m.MDeptRepository;
import com.jms.repositories.m.MMachineGroupRepository;
import com.jms.repositories.m.MMachineRepository;
import com.jms.repositories.m.MMainCycleRepository;
import com.jms.repositories.m.MMainItemRepository;
import com.jms.repositories.m.MResultRepository;
import com.jms.repositories.m.MSparePartRepository;
import com.jms.repositories.m.MStatusDicRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.repositories.p.PWipRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SBinRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class MResultService {

	private static final Logger logger = LogManager.getLogger(MResultService.class);


	@Autowired
	private MResultRepository mResultRepository;
	@Autowired
	private MMainItemRepository mMainItemRepository;
	@Autowired
	private CompanyRepository companyRepository;
	@Autowired
	private  MMainCycleRepository mMainCycleRepository;
	@Autowired
	private  PLineRepository pLineRepository;
	@Autowired
	private PWipRepository pWipRepository;
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	@Autowired
	private SBinRepository sBinRepository;
	@Autowired private SecurityUtils securityUtils;
	@Autowired private SMaterialRepository sMaterialRepository;

	@Autowired private SInventoryRepository sInventoryRepository;
	
	@Autowired private  MDeptRepository mDeptRepository;
	

	@Transactional(readOnly=true)
	public List<WSSelectObj> getMResults()
	{
		List<WSSelectObj> wss = new ArrayList<WSSelectObj>();
		for(MResult s :mResultRepository.findAll())
		{
			WSSelectObj w = new WSSelectObj(s.getIdResult(),s.getDes());
			wss.add(w);
		}
		return wss;
	}
	
	
	public void loadMResults() {
		
		for(String s : Config.mresults)
		{
			MResult m = new MResult();
			m.setDes(s);
			mResultRepository.save(m);
		}
	
	}

	
	

}
package com.jms.service.maintenance;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.csvreader.CsvReader;
import com.jms.domain.db.MMachine;
import com.jms.domain.db.MSparePart;
import com.jms.domain.db.SInventory;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.m.WSMSparePart;
import com.jms.domain.ws.m.WSMachine;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.m.MMachineGroupRepository;
import com.jms.repositories.m.MMachineRepository;
import com.jms.repositories.m.MSparePartRepository;
import com.jms.repositories.m.MStatusDicRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.repositories.p.PWipRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SBinRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class MSparePartService {

	private static final Logger logger = LogManager.getLogger(MSparePartService.class);


	@Autowired
	private MMachineRepository mMachineRepository;
	@Autowired
	private MSparePartRepository mSparePartRepository;
	@Autowired
	private CompanyRepository companyRepository;
	@Autowired
	private  MStatusDicRepository mStatusDicRepository;
	@Autowired
	private  PLineRepository pLineRepository;
	@Autowired
	private PWipRepository pWipRepository;
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	@Autowired
	private SBinRepository sBinRepository;
	@Autowired private SecurityUtils securityUtils;
	@Autowired private SMaterialRepository sMaterialRepository;

	@Autowired private SInventoryRepository sInventoryRepository;
	
//	@Transactional(readOnly=true)
//	public List<WSSelectObj> getMachinesObj()
//	{
//		List<WSSelectObj> wss = new ArrayList<WSSelectObj>();
//		for(MMachine m :mMachineRepository.getActiveMachinesByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany()))
//		{
//			WSSelectObj ws = new WSSelectObj();
//			ws.setId(m.getIdMachine());
//			ws.setName(m.getCode()+"_" +m.getSpec());
//			wss.add(ws);
//		}
//		return wss;
//	}
	
	
	
	
	
	@Transactional(readOnly=true)
	public WSMSparePart findWSMSparePart(Long idPart) throws Exception{	
		MSparePart mSparePart = mSparePartRepository.findOne(idPart);
		return toWSMSparePart(mSparePart);
	}
	public Valid saveWSMSparePart(WSMSparePart wsMSparePart) throws Exception
	{
		Valid  v = new Valid();
		MSparePart mSparePart;
		if(wsMSparePart.getIdPart()!=null&&!wsMSparePart.getIdPart().equals(0l))
		{
			mSparePart = mSparePartRepository.findOne(wsMSparePart.getIdPart());
			MSparePart m = mSparePartRepository.findByMaterialIdAndMachineId(wsMSparePart.getIdMaterial(), wsMSparePart.getIdMachine());
			if(m!=null&&!m.getIdPart().equals(wsMSparePart.getIdPart()))
			{
				v.setValid(false);
				v.setMsg("该配件已经存在！");
				return v;
			}
			
		}
		else
		{
			mSparePart = new MSparePart();
			MSparePart m = mSparePartRepository.findByMaterialIdAndMachineId(wsMSparePart.getIdMaterial(), wsMSparePart.getIdMachine());
			if(m!=null)
			{
				v.setValid(false);
				v.setMsg("该配件已经存在！");
				return v;
			}
	
		}
		MSparePart dbMSparePart = toDBMSparePart( wsMSparePart, mSparePart);
		dbMSparePart = mSparePartRepository.save(dbMSparePart);
		v.setValid(true);
		return v;
		
	}
	
	
	@Transactional(readOnly=false)
	public Valid deleteMSparePart(Long idPart)
	{
		Valid valid = new Valid();
		mSparePartRepository.delete(idPart);
		valid.setValid(true);
		return valid;
	}
	
	protected MSparePart toDBMSparePart(WSMSparePart wsMSparePart,MSparePart mSparePart) throws Exception
	{
		MSparePart dbMSparePart= (MSparePart)BeanUtil.shallowCopy(wsMSparePart, MSparePart.class, mSparePart);
		if(wsMSparePart.getIdMachine()!=null)
		{
			mSparePart.setMMachine(mMachineRepository.findOne(wsMSparePart.getIdMachine()));
		}
		if(wsMSparePart.getIdMaterial()!=null)
		{
			mSparePart.setSMaterial(sMaterialRepository.findOne(wsMSparePart.getIdMaterial()));
		}
		if(wsMSparePart.getIdStatus()!=null)
		{
			mSparePart.setMStatusDic(mStatusDicRepository.findOne(wsMSparePart.getIdStatus()));
		}
	    return dbMSparePart;
	}
	public WSMSparePart toWSMSparePart(MSparePart mSparePart) throws Exception
	{
		WSMSparePart pc = (WSMSparePart)BeanUtil.shallowCopy(mSparePart, WSMSparePart.class, null);
		if(mSparePart.getMMachine()!=null)
		{
			pc.setIdMachine(mSparePart.getMMachine().getIdMachine());
			pc.setMachine(mSparePart.getMMachine().getCode());
		}
		if(mSparePart.getMStatusDic()!=null)
		{
			pc.setStatus(mSparePart.getMStatusDic().getName());
			pc.setIdStatus(mSparePart.getMStatusDic().getIdMstatusDic());
		}
		if(mSparePart.getSMaterial()!=null)
		{
			pc.setIdMaterial(mSparePart.getSMaterial().getIdMaterial());
			pc.setMaterial(mSparePart.getSMaterial().getPno()+"_"+mSparePart.getSMaterial().getRev()+"_"+mSparePart.getSMaterial().getDes());
			if(mSparePart.getSMaterial().getSafetyInv()!=null)
			{
				pc.setSafetyQty(mSparePart.getSMaterial().getSafetyInv());
			}
			pc.setRemark(mSparePart.getSMaterial().getRemark());
			long qty=0;
			for(SInventory s:sInventoryRepository.findByMaterialId(mSparePart.getSMaterial().getIdMaterial()))
			{
				if(s.getQty()>0)
				{
					qty = qty + s.getQty();
				}
						
			}
			pc.setQty(qty);
			
			pc.setOutgoing(0l);
			pc.setIncoming(0l);
			
		}
	    return pc;
	}
}
package com.jms.service.maintenance;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.acls.domain.BasePermission;
import org.springframework.security.acls.domain.GrantedAuthoritySid;
import org.springframework.security.acls.domain.PrincipalSid;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.csvreader.CsvReader;
import com.jms.domain.Config;
import com.jms.domain.GroupTypeEnum;
import com.jms.domain.db.Apps;
import com.jms.domain.db.Company;
import com.jms.domain.db.Groups;
import com.jms.domain.db.MStatusDic;
import com.jms.domain.db.PStatusDic;
import com.jms.domain.db.SMaterialTypeDic;
import com.jms.domain.db.SStatusDic;
import com.jms.domain.db.SysDic;
import com.jms.domain.db.SysDicD;
import com.jms.domain.ws.s.WSSStatus;
import com.jms.repositories.m.MStatusDicRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.s.SMaterialTypeDicRepository;
import com.jms.repositories.s.SStatusDicRepository;
import com.jms.repositories.system.SysDicDRepository;
import com.jms.repositories.system.SysDicRepository;

@Service
@Transactional
public class MStatusDicService {

	private static final Logger logger = LogManager.getLogger(MStatusDicService.class
			.getCanonicalName());
	@Autowired
	private MStatusDicRepository mStatusDicRepository;
	
	
	@Transactional(readOnly=true)
	public List<WSSStatus> getSStatus(String source)
	{
		List<WSSStatus> wss = new ArrayList<WSSStatus>();
		for(MStatusDic s :mStatusDicRepository.getBySource(source))
		{
			WSSStatus ws = new WSSStatus();
			ws.setId(s.getIdMstatusDic());
			ws.setName(s.getName());
			wss.add(ws);
		}
		return wss;
	}
	
	
	public void loadStatus(InputStream inputStream)throws IOException {
		
		CsvReader reader = new CsvReader(inputStream,',', Charset.forName("UTF-8"));
		//reader.readHeaders();
	
		while(reader.readRecord())
		{
			
			MStatusDic s = new MStatusDic();
			s.setName(reader.get(0).trim());
			s.setDes(reader.get(1).trim());
			s.setSource(reader.get(2).trim());
			mStatusDicRepository.save(s);
	
		}
		
		
		
	}


}
package com.jms.controller.production;


import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import com.jms.domain.db.PActualSetup;
import com.jms.domain.db.SMaterial;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.p.WSPActualSetup;
import com.jms.repositories.p.PActualSetupRepository;
import com.jms.service.production.ActualSetupService;
import com.jms.web.security.SecurityUtils;



@RestController
@Transactional(readOnly=true)
public class ActualSetupController {
	
	@Autowired private ActualSetupService actualSetupService;
	@Autowired private PActualSetupRepository pActualSetupRepository;
	@Autowired private SecurityUtils securityUtils;

	@Transactional(readOnly = false)
	@RequestMapping(value="/p/saveWSPActualSetup", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public WSPActualSetup saveWSPActualSetup(@RequestBody WSPActualSetup wsPActualSetup) {
		return actualSetupService.saveWSPActualSetup(wsPActualSetup);
	}


	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findWSPActualSetups", method=RequestMethod.GET)
	public List<WSPActualSetup> findWSPActualSetups(@RequestParam("cppId") Long cppId){
		return actualSetupService.findWSPActualSetups(cppId);
		
	}
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findWSPActualSetupById", method=RequestMethod.GET)
	public WSPActualSetup findWSPActualSetupById(@RequestParam("actSetupId") Long actSetupId){
		return actualSetupService.findWSPActualSetupById(actSetupId);
		
	}
	
	
//	工单woNO、物料pno-rev-des、班次shift、机器machineCode- machineName、实际开始停机actSt、实际结束停机actFt
	@Transactional(readOnly = true)
	@RequestMapping(value = "/p/getActSetupList", method = RequestMethod.POST)
	public WSTableData getActSetupList(
			@RequestParam Integer draw,
			@RequestParam Integer start,
			@RequestParam Integer length) throws Exception {

		List<PActualSetup>  pActualSetups= pActualSetupRepository.findByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		List<String[]> lst = new ArrayList<String[]>();
		int end = 0;
		if (pActualSetups.size() < start + length)
			end = pActualSetups.size();
		else
			end = start + length;
		for (int i = start; i < end; i++) {
			PActualSetup w = pActualSetups.get(i);
			SMaterial s = w.getPCPp().getPWo().getSSo().getSMaterial();
			String material = s.getPno()+"-"+s.getRev()+"-"+s.getDes();
			String actF = (w.getActFt()==null)?"":w.getActFt().toString();
			String actS = (w.getActSt()==null)?"":w.getActSt().toString();
			String[] d = { w.getPCPp().getPWo().getWoNo(), material,w.getPCPp().getPShiftPlanD().getShift(),w.getPCPp().getMMachine().getCode(),actS,actF,""+w.getIdActualSetup()};
			lst.add(d);

		}
		WSTableData t = new WSTableData();
		t.setDraw(draw);
		t.setRecordsTotal(pActualSetups.size());
		t.setRecordsFiltered(pActualSetups.size());
		t.setData(lst);
		return t;
	}
	
	

	

}package com.jms.controller.production;


import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.p.WSPBom;
import com.jms.domain.ws.p.WSPBomItem;
import com.jms.repositories.p.PBomLabelRepository;
import com.jms.repositories.p.PWoRepository;
import com.jms.service.production.BomLabelService;
import com.jms.service.production.BomService;
import com.jms.web.security.SecurityUtils;


@RestController
@Transactional(readOnly=true)
public class BomController {
	
	@Autowired private BomService bomService;
	@Autowired private BomLabelService bomLabelService;
	@Autowired private PWoRepository pWoRepository;
	@Autowired private PBomLabelRepository pBomLabelRepository;
	@Autowired private SecurityUtils securityUtils;

	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/saveBom", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public WSPBom saveWSPBom(@RequestBody WSPBom wsPBom) throws Exception {
		return bomLabelService.savePBomLabel(wsPBom);
	}
	
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/updateBomStatus", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public WSPBom updateBomStatus(@RequestBody WSPBom wsPBom) throws Exception {
		return bomLabelService.updateBomStatus(wsPBom);
	}
	
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/updateBomItem", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public WSPBomItem updateBomItem(@RequestBody WSPBomItem wsPBomItem) throws Exception {
		return bomService.updateWSPBomItem(wsPBomItem);
	}
	
	
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/deleteBom", method=RequestMethod.GET)
	public Valid deleteBom(@RequestParam("bomLabelId") Long bomLabelId) {
		return bomLabelService.deletePWSPBom(bomLabelId);
		
	}
	

	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findBom", method=RequestMethod.GET)
	public WSPBom findWo(@RequestParam("bomLabelId") Long bomLabelId) throws Exception {
		return bomLabelService.findWSPBom(bomLabelId);
		
	}
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findBomItem", method=RequestMethod.GET)
	public WSPBomItem findBomItem(@RequestParam("bomId") Long bomId) throws Exception {
		return bomService.findWSPBomItem(bomId);
		
	}

	@Transactional(readOnly = false)
	@RequestMapping(value="/p/saveBomItem", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public WSPBomItem saveWSPBomItem(@RequestBody WSPBomItem wsPBomItem) throws Exception {
		return bomService.saveWSPBomItem(wsPBomItem);
	}
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/getBomList", method=RequestMethod.POST)
	public WSTableData  getBomList(@RequestParam Integer draw,@RequestParam Integer start,@RequestParam Integer length) throws Exception {	   
		
		List<WSPBom> wsPBoms =bomLabelService.findWSPBomList();
		
		List<String[]> lst = new ArrayList<String[]>();
		int end=0;
		if(wsPBoms.size()<start + length)
			end =wsPBoms.size();
		else
			end =start + length;
		for (int i = start; i < end; i++) {
			WSPBom w = wsPBoms.get(i);
			String[] d = {w.getPno(),w.getRev(),w.getMaterial(),w.getCreationTime().toString(),""+w.getCreator(),""+w.getStatus(),""+w.getIdBomLabel()};
			lst.add(d);

		}
		WSTableData t = new WSTableData();
		t.setDraw(draw);
		t.setRecordsTotal(wsPBoms.size());
		t.setRecordsFiltered(wsPBoms.size());
	    t.setData(lst);
	    return t;
	}
	

}package com.jms.controller.production;


import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import com.jms.domain.db.PCheckPlan;
import com.jms.domain.db.PCheckTime;
import com.jms.domain.db.PLine;
import com.jms.domain.db.SMaterial;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.p.WSPBom;
import com.jms.domain.ws.p.WSPCheckPlan;
import com.jms.domain.ws.p.WSPCheckTime;
import com.jms.domain.ws.p.WSPLine;
import com.jms.repositories.p.PCheckPlanRepository;
import com.jms.repositories.p.PCheckTimeRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.service.production.PCheckPlanService;
import com.jms.service.production.PCheckTimeService;
import com.jms.service.production.PlineService;
import com.jms.web.security.SecurityUtils;



@RestController
@Transactional(readOnly=true)
public class CheckPlanController {
	
	@Autowired private PCheckPlanService pCheckPlanService;
	@Autowired private PCheckPlanRepository pCheckPlanRepository;
	@Autowired private SecurityUtils securityUtils;

	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/saveCheckPlan", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public WSPCheckPlan saveWSPCheckPlan(@RequestBody WSPCheckPlan wsPCheckPlan) throws Exception {
		return pCheckPlanService.saveWSPCheckPlan(wsPCheckPlan);
	}
	

	

	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findCheckPlans", method=RequestMethod.GET)
	public List<WSPCheckPlan> findCheckPlans(@RequestParam("cppId") Long cppId) throws Exception {
		return pCheckPlanService.findWSPCheckPlans(cppId);
		
	}
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/getCheckPlanList", method=RequestMethod.POST)
	public WSTableData  getCheckPlanList(@RequestParam Integer draw,@RequestParam Integer start,@RequestParam Integer length) throws Exception {	   
		
		List<PCheckPlan> pCheckPlans =pCheckPlanRepository.getCheckPlans(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		
		List<String[]> lst = new ArrayList<String[]>();
		int end=0;
		if(pCheckPlans.size()<start + length)
			end =pCheckPlans.size();
		else
			end =start + length;
		for (int i = start; i < end; i++) {
			PCheckPlan w = pCheckPlans.get(i);
			
//			工单号woNo、工艺routeNo、产品pno-rev-des、班次、机器machineCode-machineName、
//			操作者op、计划检查时间planSt、检查数量planQty、实际检查时间checkTime、
//			实际检查数量finQty、需完成数量toBeQty,偏差

			SMaterial s = w.getPCPp().getPWo().getSSo().getSMaterial();
			String material = s.getPno()+"-"+s.getRev()+"-"+s.getDes();
			String  plancheckTime =(w.getPlanCheckTime()==null)?"":w.getPlanCheckTime().toString();
			
			String[] d = {w.getPCPp().getPWo().getWoNo(),w.getPCPp().getPRoutineD().getRouteNo(),material,w.getPCPp().getPShiftPlanD().getShift(),w.getPCPp().getMMachine().getCode(),w.getPCPp().getUsers().getName(),plancheckTime
					,""+w.getToBeQty(),w.getCheckTime().toString(),""+w.getFinQty(),""+w.getToBeQty()};
			lst.add(d);

		}
		WSTableData t = new WSTableData();
		t.setDraw(draw);
		t.setRecordsTotal(pCheckPlans.size());
		t.setRecordsFiltered(pCheckPlans.size());
	    t.setData(lst);
	    return t;
	}
	


}package com.jms.controller.production;


import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import com.jms.domain.db.PCheckTime;
import com.jms.domain.db.PLine;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.p.WSPCheckTime;
import com.jms.domain.ws.p.WSPLine;
import com.jms.repositories.p.PCheckTimeRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.service.production.PCheckTimeService;
import com.jms.service.production.PlineService;
import com.jms.web.security.SecurityUtils;


@RestController
@Transactional(readOnly=true)
public class CheckTimeController {
	
	@Autowired private PCheckTimeService pCheckTimeService;
	@Autowired private PCheckTimeRepository pCheckTimeRepository;
	@Autowired private SecurityUtils securityUtils;

	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/saveCheckTime", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public Valid saveCheckTime(@RequestBody WSPCheckTime wsPCheckTime) throws Exception {
		return pCheckTimeService.saveWSPCheckTime(wsPCheckTime);
	}
	
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/deleteCheckTime", method=RequestMethod.GET)
	public Valid deleteCheckTime(@RequestParam("checkTimeId") Long checkTimeId) {
		return pCheckTimeService.deletePCheckTime(checkTimeId);
		
	}
	

	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findCheckTime", method=RequestMethod.GET)
	public WSPCheckTime findCheckTime(@RequestParam("checkTimeId") Long checkTimeId) throws Exception {
		return pCheckTimeService.findWSPCheckTime(checkTimeId);
		
	}
	

	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/getCheckTimeList", method=RequestMethod.POST)
	public WSTableData  getCheckTimeList(@RequestParam Integer draw,@RequestParam Integer start,@RequestParam Integer length) throws Exception {	   
		List<PCheckTime> pChenTimes =pCheckTimeRepository.getByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		List<String[]> lst = new ArrayList<String[]>();
		int end=0;
		if(pChenTimes.size()<start + length)
			end =pChenTimes.size();
		else
			end =start + length;
		for (int i = start; i < end; i++) {
			PCheckTime w = pChenTimes.get(i);
			String[] d = {w.getMMachine().getCode(),w.getMMachine().getSpec(),""+w.getInterval1(),w.getPUTime().getUTime(),""+w.getIdCheckTime()};
			lst.add(d);

		}
		WSTableData t = new WSTableData();
		t.setDraw(draw);
		t.setRecordsTotal(pChenTimes.size());
		t.setRecordsFiltered(pChenTimes.size());
	    t.setData(lst);
	    return t;
	}
	
	


}package com.jms.controller.production;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import com.jms.domain.db.PCPp;
import com.jms.domain.db.PWo;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.p.WSOEE;
import com.jms.domain.ws.p.WSPCpp;
import com.jms.domain.ws.p.WSPMr;
import com.jms.domain.ws.p.WSPlannedMaterialSending;
import com.jms.repositories.p.PCPpRepository;
import com.jms.repositories.p.PWoRepository;
import com.jms.service.production.PCppService;
import com.jms.web.security.SecurityUtils;


@RestController
@Transactional(readOnly=true)
public class CppController {
	
	@Autowired private PCppService pCppService;
	@Autowired private PCPpRepository pCPpRepository;
	@Autowired private PWoRepository pWoRepository;
	@Autowired private SecurityUtils securityUtils;

	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/saveWSPCpp", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public WSPCpp saveWSPCpp(@RequestBody WSPCpp wsPCpp) throws Exception {
		return pCppService.saveWSPCPp(wsPCpp);
	}
	
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/startCpp", method=RequestMethod.GET)
	public Valid startCpp(@RequestParam("idCpp") Long idCpp) throws Exception {
		return pCppService.startCpp(idCpp);
	}
	
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/finishCpp", method=RequestMethod.GET)
	public Valid finishCpp(@RequestParam("idCpp") Long idCpp) throws Exception {
		return pCppService.finishCpp(idCpp);
	}
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/isStarted", method=RequestMethod.GET)
	public Valid isStarted(@RequestParam("idCpp") Long idCpp) throws Exception {
		return pCppService.isStarted(idCpp);
	}
	
	
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/deleteWSCpp", method=RequestMethod.GET)
	public Valid deleteCpp(@RequestParam("cppId") Long cppId) {
		return pCppService.deletePCpp(cppId);
		
	}
	

	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findCpp", method=RequestMethod.GET)
	public WSPCpp findCpp(@RequestParam("cppId") Long cppId) throws Exception {
		return pCppService.findWSCPp(cppId);
		
	}
	

	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/getCppList", method=RequestMethod.POST)
	public WSTableData  getCppList(@RequestParam(required=false,value="q") String q, @RequestParam Integer draw,@RequestParam Integer start,@RequestParam Integer length) throws Exception {	   
		//System.out.println("q: " + q);
		List<String[]> lst = new ArrayList<String[]>();
		List<PCPp> pCpps;
		List<Long> woIds = new ArrayList<Long>();

		if(q==null)
		{
			for(PWo pwo:pWoRepository.getByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany()))
			{
				woIds.add(pwo.getIdWo());
			}
		}
		else
		{
			q= '%'+q+'%';
			for(PWo pwo:pWoRepository.getByCompanyIdAndQuery(securityUtils.getCurrentDBUser().getCompany().getIdCompany(), q))
			{
				woIds.add(pwo.getIdWo());
			}
		}
	
	
		if(!woIds.isEmpty())
		{
			pCpps =pCPpRepository.getByCompanyIdAndWoIds(securityUtils.getCurrentDBUser().getCompany().getIdCompany(), woIds);	
		}
		else
		{
			pCpps = new ArrayList<PCPp>();
		}
		 	
			
		
		int end=0;
		if(pCpps.size()<start + length)
			end =pCpps.size();
		else
			end =start + length;
		for (int i = start; i < end; i++) {
			PCPp w = pCpps.get(i);
			String routineDNo ="";
			if(w.getPRoutineD()!=null)
			{
				routineDNo=w.getPRoutineD().getRouteNo();
			}
			String actSt = (w.getActSt()==null)?"":w.getActSt().toString();
			String actFt = (w.getActFt()==null)?"":w.getActFt().toString();
			String product =w.getPWo().getSSo().getSMaterial().getPno()+"_"+w.getPWo().getSSo().getSMaterial().getRev()+"_"+w.getPWo().getSSo().getSMaterial().getDes();
			String[] d = {""+w.getCPpCode(),w.getPWo().getWoNo(),routineDNo,product,""+w.getPWo().getQty(),w.getPShiftPlanD().getShift(),w.getPlanSt().toString(),w.getPlanFt().toString(),actSt,actFt,w.getMMachine().getCode()+""
					+ "-"+w.getMMachine().getSpec(),w.getUsers().getName(),""+w.getQty(),""+w.getIdCPp()};
			lst.add(d);

		}
		WSTableData t = new WSTableData();
		t.setDraw(draw);
		t.setRecordsTotal(pCpps.size());
		t.setRecordsFiltered(pCpps.size());
	    t.setData(lst);
	    return t;
	}
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findWSPMrsByCppId", method=RequestMethod.GET)
	public List<WSPMr> findWSPMrsByCppId(@RequestParam("cppId") Long cppId) throws Exception {
		return pCppService.findWSPMrsByCppId(cppId);
		
	}
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findWSPlannedMaterialSending", method=RequestMethod.GET)
	public WSPlannedMaterialSending findWSPlannedMaterialSending(
			@RequestParam("fromDate") Long fromDate,
			@RequestParam("toDate") Long toDate,
			@RequestParam("fromStkId") Long fromStkId,
			@RequestParam("toStkId") Long toStkId)  {
      // System.out.println("find planned materials sending");
		return pCppService.findWSPlannedMaterialSending(fromDate, toDate, fromStkId, toStkId);		
		
	}
	
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findWSOEE", method=RequestMethod.GET)
	public List<WSOEE> findWSOEE(
			@RequestParam("fromDate") Long fromDate,
			@RequestParam("toDate") Long toDate,
			@RequestParam("machineId") Long machineId,
			@RequestParam(required=false,value="materialId") Long materialId)
    {
		return pCppService.findWSOEE(fromDate, toDate, machineId,materialId);
		
	}
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findLongWSOEE", method=RequestMethod.GET)
	public List<WSOEE> findLongWSOEE(
			@RequestParam("fromDate") Long fromDate,
			@RequestParam("toDate") Long toDate,
			@RequestParam("machineId") Long machineId,
			@RequestParam(required=false,value="materialId") Long materialId)
    {
		return pCppService.findLongWSOEE(fromDate, toDate, machineId,materialId);
		
	}
	
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/getCppListByMachineIdAndDate", method=RequestMethod.GET)
	public List<WSSelectObj>  getCppListByMachineIdAndDate(@RequestParam("machineId") Long machineId,@RequestParam("reportTime") Long reportTime) {	   
		List<WSSelectObj> ws = new ArrayList<WSSelectObj>();
		
		Date st = new Date(reportTime-86400000*7);
		Date ft = new Date(reportTime+86400000*7);
		for(PCPp p:pCPpRepository.getByMachineIdAndDate(securityUtils.getCurrentDBUser().getCompany().getIdCompany(),machineId,st,ft))
		 {
			String s = (p.getCPpCode()==null)?"":p.getCPpCode();
			s = s+ "_" +p.getPlanSt().toString() +"_"+p.getUsers().getName(); 
			WSSelectObj w = new WSSelectObj(p.getIdCPp(),s);
			ws.add(w);
		 }
		
	    return ws;
	}

	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/getCppListByMaterialId", method=RequestMethod.GET)
	public List<WSSelectObj>  getCppListByMaterialId(@RequestParam("materialId") Long materialId) {	   
		List<WSSelectObj> ws = new ArrayList<WSSelectObj>();
		
		for(PCPp cpp:pCPpRepository.getByMaterialId(materialId))
		 {
			
			Date d = cpp.getPlanFt();
			String dd = "";
			if(d!=null)
			{
				SimpleDateFormat formatter = new SimpleDateFormat ("yyyy-MM-dd"); 
				dd= formatter.format(d);
			}
			String shift = "";
			if(cpp.getPShiftPlanD()!=null)
			{
				shift = cpp.getPShiftPlanD().getShift();
			}
			String s =cpp.getPWo().getWoNo()+"_"+cpp.getMMachine().getCode()+"_"+dd +" "+shift;
			
			
			WSSelectObj w = new WSSelectObj(cpp.getIdCPp(),s);
			ws.add(w);
		 }
		
	    return ws;
	}

	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/hasCheckPlans", method=RequestMethod.GET)
	public Valid hasCheckPlans(@RequestParam("cppId") Long cppId)  {
		Valid v =  pCppService.hasCheckPlans(cppId);
		return v;
	}
	
	
}package com.jms.controller.production;


import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import com.jms.domain.db.PWorkCenter;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.p.WSPWorkCenter;
import com.jms.repositories.e.EWorkCategoryDicRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.service.production.EWorkCategoryDicService;
import com.jms.service.production.WorkCenterService;
import com.jms.web.security.SecurityUtils;




@RestController
@Transactional(readOnly=true)
public class EWorkCategoryDicController {
	
	@Autowired private EWorkCategoryDicService eWorkCategoryDicService;
	@Autowired private EWorkCategoryDicRepository eWorkCategoryDicRepository;
	@Autowired private SecurityUtils securityUtils;


	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findWorkCategoriesSelectObjs", method=RequestMethod.GET)
	public List<WSSelectObj>  findWorkCategoriesSelectObjs() throws Exception {	   
	    return eWorkCategoryDicService.findWorkCategoriesSelectObjs();
	}


}package com.jms.controller.production;


import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import com.jms.domain.db.PLine;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.p.WSPLine;
import com.jms.repositories.p.PLineRepository;
import com.jms.service.production.PlineService;
import com.jms.web.security.SecurityUtils;


@RestController
@Transactional(readOnly=true)
public class PlineController {
	
	@Autowired private PlineService plineService;
	@Autowired private PLineRepository pLineRepository;
	@Autowired private SecurityUtils securityUtils;

	private static final Logger logger = LogManager.getLogger(PlineController.class
			.getCanonicalName());
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/saveWSPLine", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
	public WSPLine savePLine(@RequestBody WSPLine wsPLine) throws Exception {
		return plineService.saveWSPLine(wsPLine);
	}
	
	
	@Transactional(readOnly = false)
	@RequestMapping(value="/p/deleteWSPLine", method=RequestMethod.GET)
	public Valid deleteWSPLine(@RequestParam("lineId") Long lineId) {
		return plineService.deleteWSPLine(lineId);
		
	}
	

	@Transactional(readOnly = true)
	@RequestMapping(value="/p/findWSPLine", method=RequestMethod.GET)
	public WSPLine findWSPLine(@RequestParam("lineId") Long lineId) throws Exception {
		return plineService.findWSPLine(lineId);
		
	}
	

	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/plineList", method=RequestMethod.POST)
	public WSTableData  getPLineList(@RequestParam Integer draw,@RequestParam Integer start,@RequestParam Integer length) throws Exception {	   
		List<PLine> pLines =pLineRepository.getByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		List<String[]> lst = new ArrayList<String[]>();
		int end=0;
		if(pLines.size()<start + length)
			end =pLines.size();
		else
			end =start + length;
		for (int i = start; i < end; i++) {
			PLine w = pLines.get(i);
			String[] d = {w.getPline(),w.getPStatusDic().getName(),""+w.getIdPline()};
			lst.add(d);

		}
		WSTableData t = new WSTableData();
		t.setDraw(draw);
		t.setRecordsTotal(pLines.size());
		t.setRecordsFiltered(pLines.size());
	    t.setData(lst);
	    return t;
	}
	
	
	
	@Transactional(readOnly = true)
	@RequestMapping(value="/p/m/findWSPLines", method=RequestMethod.GET)
	public List<WSSelectObj> findWSPLines() {
		//logger.debug("findWSPLines.....");
		return plineService.findWSPLines();
		
	}


}package com.jms.service.production;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.FCostCenter;
import com.jms.domain.db.PActualSetup;
import com.jms.domain.db.PBom;
import com.jms.domain.db.PCPp;
import com.jms.domain.db.PWo;
import com.jms.domain.db.PWorkCenter;
import com.jms.domain.db.SMaterial;
import com.jms.domain.db.SStk;
import com.jms.domain.db.Users;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.p.WSPActualSetup;
import com.jms.domain.ws.p.WSPBom;
import com.jms.domain.ws.p.WSPBomItem;
import com.jms.domain.ws.p.WSPWo;
import com.jms.domain.ws.p.WSPWorkCenter;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.f.FCostCenterRepository;
import com.jms.repositories.p.PActualSetupRepository;
import com.jms.repositories.p.PBomLabelRepository;
import com.jms.repositories.p.PBomRepository;
import com.jms.repositories.p.PCPpRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PWoRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.s.SSoRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class ActualSetupService {

	private static final Logger logger = LogManager.getLogger(ActualSetupService.class.getCanonicalName());
	@Autowired
	private PActualSetupRepository pActualSetupRepository;

	@Autowired
	private PCPpRepository pCPpRepository;

	@Autowired
	private SMaterialRepository sMaterialRepository;
	@Autowired
	private CompanyRepository companyRepository;
	@Autowired
	private PStatusDicRepository pStatusDicRepository;

	@Autowired
	private SecurityUtils securityUtils;

	@Transactional(readOnly = false)
	public WSPActualSetup saveWSPActualSetup(WSPActualSetup wsPActualSetup) {

		PActualSetup pActualSetup;
		if (wsPActualSetup.getIdActualSetup() != null && !wsPActualSetup.getIdActualSetup().equals(0l)) {
			pActualSetup = pActualSetupRepository.findOne(wsPActualSetup.getIdActualSetup());
		} else {
			pActualSetup = new PActualSetup();

		}

		if (wsPActualSetup.getActFt() == null) {
			pActualSetup.setActSt(new Date());
		} else {
			pActualSetup.setActFt(wsPActualSetup.getActFt());
		}
		pActualSetup.setActSt(wsPActualSetup.getActSt());
		pActualSetup.setPCPp(pCPpRepository.findOne(wsPActualSetup.getCppId()));
		pActualSetup = pActualSetupRepository.save(pActualSetup);
		wsPActualSetup.setIdActualSetup(pActualSetup.getIdActualSetup());
		wsPActualSetup.setActFt(pActualSetup.getActFt());
		wsPActualSetup.setActSt(pActualSetup.getActSt());
		return wsPActualSetup;

	}

	@Transactional(readOnly = true)
	public List<WSPActualSetup> findWSPActualSetups(Long cppId) {
		List<WSPActualSetup> ws = new ArrayList<WSPActualSetup>(0);
		List<PActualSetup> ps = pActualSetupRepository.findByCppId(cppId);

		PCPp cpp = pCPpRepository.findOne(cppId);

		PWo wo = cpp.getPWo();
		SMaterial material = wo.getSSo().getSMaterial();
		WSPActualSetup w = new WSPActualSetup();
		w.setWoNo(wo.getWoNo());

		w.setDes(material.getDes());
		w.setPno(material.getPno());
		w.setRev(material.getRev());

		w.setMachine(cpp.getMMachine().getCode());

		w.setShift(cpp.getPShiftPlanD().getShift());
		w.setCppId(cpp.getIdCPp());
		ws.add(w);

		for (PActualSetup p : ps) {
			WSPActualSetup w1 = new WSPActualSetup();
			w1.setIdActualSetup(p.getIdActualSetup());
			w1.setActFt(p.getActFt());
			w1.setActSt(p.getActSt());

			w1.setWoNo(wo.getWoNo());

			w1.setDes(material.getDes());
			w1.setPno(material.getPno());
			w1.setRev(material.getRev());

			w1.setMachine(cpp.getMMachine().getCode());

			w1.setShift(cpp.getPShiftPlanD().getShift());
			w1.setCppId(cpp.getIdCPp());
			ws.add(w1);
		}

		return ws;

	}

	@Transactional(readOnly = true)
	public WSPActualSetup findWSPActualSetupById(Long actSetupId) {

		PActualSetup ps = pActualSetupRepository.findOne(actSetupId);

		PWo wo = ps.getPCPp().getPWo();
		SMaterial material = wo.getSSo().getSMaterial();
		WSPActualSetup w = new WSPActualSetup();
		w.setWoNo(wo.getWoNo());

		w.setDes(material.getDes());
		w.setPno(material.getPno());
		w.setRev(material.getRev());

		w.setMachine(ps.getPCPp().getMMachine().getCode());

		w.setShift(ps.getPCPp().getPShiftPlanD().getShift());
		w.setCppId(ps.getPCPp().getIdCPp());

		w.setActFt(ps.getActFt());
		w.setActSt(ps.getActSt());

		w.setShift(ps.getPCPp().getPShiftPlanD().getShift());
		w.setCppId(ps.getPCPp().getIdCPp());
		w.setCpp(ps.getPCPp().getCPpCode()+"_"+ps.getPCPp().getPlanSt().toString());

		
		w.setIdActualSetup(ps.getIdActualSetup());
		return w;

	}

}
package com.jms.service.production;


import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.jms.domain.db.PActualSetup;
import com.jms.domain.db.PBom;
import com.jms.domain.db.PCPp;
import com.jms.domain.db.PDraw;
import com.jms.domain.db.PMr;
import com.jms.domain.db.PStopsPlan;
import com.jms.domain.db.PUnplannedStops;
import com.jms.domain.db.PWo;
import com.jms.domain.db.SInventory;
import com.jms.domain.db.SMaterial;
import com.jms.domain.db.SMtfNo;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.p.WSOEE;
import com.jms.domain.ws.p.WSPCpp;
import com.jms.domain.ws.p.WSPMr;
import com.jms.domain.ws.p.WSPlannedMaterialSending;
import com.jms.domain.ws.p.WSPlannedMaterialSendingItem;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.m.MMachineRepository;
import com.jms.repositories.p.PActualSetupRepository;
import com.jms.repositories.p.PBomRepository;
import com.jms.repositories.p.PCPpRepository;
import com.jms.repositories.p.PMrRepository;
import com.jms.repositories.p.PPUTimeRepository;
import com.jms.repositories.p.PRoutineDRepository;
import com.jms.repositories.p.PShiftPlanDRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PStopsPlanRepository;
import com.jms.repositories.p.PUnplannedStopsRepository;
import com.jms.repositories.p.PWoRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMtfNoRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class PCppService {

	private static final Logger logger = LogManager.getLogger(PCppService.class
			.getCanonicalName());
	@Autowired private PCPpRepository pCPpRepository;
	@Autowired private CompanyRepository companyRepository;
	@Autowired private MMachineRepository  mMachineRepository;
	@Autowired private PWoRepository pWoRepository;
	@Autowired private SecurityUtils securityUtils;
	@Autowired private PRoutineDRepository pRoutineDRepository;
	@Autowired private PShiftPlanDRepository pShiftPlanDRepository;
	@Autowired private UsersRepository usersRepository;
	@Autowired private PBomRepository pBomRepository;
	@Autowired private PMrRepository pMrRepository;
	@Autowired private SMtfNoRepository sMtfNoRepository;
	@Autowired private SInventoryRepository sInventoryRepository;
	@Autowired private PActualSetupRepository pActualSetupRepository;
	@Autowired private PStopsPlanRepository pStopsPlanRepository;
	@Autowired private PUnplannedStopsRepository pUnplannedStopsRepository;

		
	@Transactional(readOnly=false)
	public WSPCpp saveWSPCPp(WSPCpp wsPCpp) throws Exception {
		PCPp pCPp;
		if(wsPCpp.getIdCpp()!=null&&!wsPCpp.getIdCpp().equals(0l))
		{
			pCPp = pCPpRepository.findOne(wsPCpp.getIdCpp());
		}
		else
		{
			pCPp = new PCPp();
		}
		PCPp dbPCPp= toDBPCPp(wsPCpp,pCPp);
		dbPCPp = pCPpRepository.save(dbPCPp);
		wsPCpp.setIdCpp(dbPCPp.getIdCPp());
		
		//生成需料报告
		
//         SMaterial material =  pCPp.getPWo().getSSo().getSMaterial();
//		 
//		 PBom pBom = pBomRepository.findProductByMaterialId(material.getIdMaterial());
//			
//			
//			if(pBom!=null)
//			{
//				for(PBom p: pBom.getPBoms())
//				{
//					
//					PMr pmr = new PMr();
//					pmr.setPBom(p);
//					pmr.setPCPp(dbPCPp);
//					pmr.setPStatusDic(pStatusDicRepository.findOne(9l));
//					pmr.setQty(p.getQpu()*dbPCPp.getQty());
//					pmr.setSt(dbPCPp.getPlanSt());
//					pmr.setType(2l); //自动生成需料
//					pMrRepository.save(pmr);
//				   
//				}
//				
//			}
//		
		
		return wsPCpp;		
		
	}

	@Transactional(readOnly=false)
	public Valid deletePCpp(Long idPcpp)
	{
		Valid valid = new Valid();
		pCPpRepository.delete(idPcpp);
		valid.setValid(true);
		return valid;
	}
	
	
	
	@Transactional(readOnly=false)
	public Valid startCpp(Long idCpp) throws Exception {
		Valid v = new Valid();
		
		PCPp dbPCPp = pCPpRepository.findOne(idCpp);
		dbPCPp.setActSt(new Date());
		pCPpRepository.save(dbPCPp);
		
		PWo pwo = dbPCPp.getPWo();
		if(pwo.getActSt()==null)
		{
			pwo.setActFt(new Date());
			pWoRepository.save(pwo);
		}
		
		v.setValid(true);
		return v;
	}
	
	
	@Transactional(readOnly=true)
	public Valid hasCheckPlans(Long idCpp) {
		Valid v = new Valid();	
		PCPp dbPCPp = pCPpRepository.findOne(idCpp);
		if(dbPCPp.getPCheckPlans().isEmpty())
		{
			v.setValid(false);
		}
		else
		{
			v.setValid(true);
		}
	
		return v;
	}
	
	
	
	@Transactional(readOnly=false)
	public Valid finishCpp(Long idCpp) throws Exception {
		Valid v = new Valid();
		
		PCPp dbPCPp = pCPpRepository.findOne(idCpp);
		dbPCPp.setActFt(new Date());
		pCPpRepository.save(dbPCPp);
		//判断是否有检查数据，如果无 返回
		if(dbPCPp.getPCheckPlans().isEmpty()) //无检查数据
		{
			v.setValid(false);
			
		}
		else
		{
			v.setValid(true);
		}
			
		return v;
	}
	
	
	
	@Transactional(readOnly=true)
	public Valid isStarted(Long idCpp) throws Exception {
		Valid v = new Valid();
		
		PCPp dbPCPp = pCPpRepository.findOne(idCpp);
		if(dbPCPp.getActSt()==null)
		{
			v.setValid(false);
		}
		else
		{
			v.setValid(true);
		}
		
		
		return v;
	}
	
	
	
	@Transactional(readOnly=true) 
	public WSPCpp findWSCPp(Long idPcpp) throws Exception
	{	
		PCPp dbPCPp = pCPpRepository.findOne(idPcpp);
		return  toWSPCpp(dbPCPp);
		
	}
	
	protected PCPp toDBPCPp(WSPCpp wsPCpp,PCPp pCPp) throws Exception
	{
	
		PCPp dbPCPp = (PCPp)BeanUtil.shallowCopy(wsPCpp, PCPp.class, pCPp);
		dbPCPp.setIdCPp(wsPCpp.getIdCpp());
	
		if(wsPCpp.getIdCpp()==null||wsPCpp.getIdCpp().equals(0l))
		{
		SMtfNo smtfNo = sMtfNoRepository.getByCompanyIdAndType(securityUtils.getCurrentDBUser().getCompany().getIdCompany(), 12l);
		
	    long currentVal =smtfNo.getCurrentVal()+1;
	    smtfNo.setCurrentVal(currentVal);
	    sMtfNoRepository.save(smtfNo);
		
	    String mtNo = smtfNo.getPrefix()+String.format("%08d", currentVal);
	    pCPp.setCPpCode(mtNo);
		}
		

        if(wsPCpp.getmMachineId()!=null)
        {
        	dbPCPp.setMMachine(mMachineRepository.findOne(wsPCpp.getmMachineId()));
        }
        if(wsPCpp.getpRoutineDId()!=null)
        {
        	dbPCPp.setPRoutineD(pRoutineDRepository.findOne(wsPCpp.getpRoutineDId()));
        }
        if(wsPCpp.getpShiftPlanDId()!=null)
        {
        	dbPCPp.setPShiftPlanD(pShiftPlanDRepository.findOne(wsPCpp.getpShiftPlanDId()));
        }
        if(wsPCpp.getCompanyId()!=null)
        {
        	dbPCPp.setCompany(companyRepository.findOne(wsPCpp.getCompanyId()));
        }
        else
        {
        	dbPCPp.setCompany(securityUtils.getCurrentDBUser().getCompany());
        }
        if(wsPCpp.getOpId()!=null)
        {
        	dbPCPp.setUsers(usersRepository.findOne(wsPCpp.getOpId()));
        }
        if(wsPCpp.getPwoId()!=null)
        {
        	dbPCPp.setPWo(pWoRepository.findOne(wsPCpp.getPwoId()));
        }
		return dbPCPp;
	}
	
	protected WSPCpp toWSPCpp(PCPp pCPp) throws Exception
	{
		WSPCpp pc = (WSPCpp)BeanUtil.shallowCopy(pCPp, WSPCpp.class, null);
	    if(pCPp.getMMachine()!=null)
	    {
	    	pc.setmMachine(pCPp.getMMachine().getCode()+"_"+pCPp.getMMachine().getSpec());
	    	pc.setmMachineId(pCPp.getMMachine().getIdMachine());
	    
	    }
	    if(pCPp.getPRoutineD()!=null)
	    {
	    	pc.setpRoutineD(pCPp.getPRoutineD().getRouteNo());
	    	pc.setpRoutineDId(pCPp.getPRoutineD().getIdRoutineD());
	    	PDraw draw = pCPp.getPRoutineD().getPRoutine().getPDraw();
	    	if(draw!=null)
	    	{
	    		pc.setDrawNo(draw.getDrawNo());
	    		pc.setDrawVer(draw.getDrawVer());
	    	}
	    
	    }
	    if(pCPp.getPShiftPlanD()!=null)
	    {
	    	pc.setpShiftPlanD(pCPp.getPShiftPlanD().getShift());
	    	pc.setpShiftPlanDId(pCPp.getPShiftPlanD().getIdShiftD());
	    }
	    if(pCPp.getPWo()!=null)
	    {
	    	pc.setPwo(pCPp.getPWo().getWoNo());
	    	pc.setPwoId(pCPp.getPWo().getIdWo());
	    }
	    if(pCPp.getUsers()!=null)
	    {
	    	pc.setOp(pCPp.getUsers().getName());
	    	pc.setOpId(pCPp.getUsers().getIdUser());
	    }
	    pc.setCppCode(pCPp.getCPpCode());
		return pc;
	}
	
	@Transactional(readOnly = true)
	public List<WSOEE> findWSOEE(Long fromDate,
			 Long toDate,Long machineId,Long materialId)
	{
		List<WSOEE> ws = new ArrayList<WSOEE>();
		Long companyId =securityUtils.getCurrentDBUser().getCompany().getIdCompany();
		Date from = new Date(fromDate);
		Date to = new Date(toDate);
		List<PCPp> cpps;
		if(materialId!=null)
		{
			cpps = pCPpRepository.getByFromDateToDateAndMachineIdAndMaterialId(companyId, from, to, machineId,materialId);
		}
		else
		{
			cpps = pCPpRepository.getByFromDateToDateAndMachineId(companyId, from, to, machineId);
		}

		for(PCPp cpp:cpps)
		{
			if(cpp.getPlanSt()==null||cpp.getPlanFt()==null||cpp.getActSt()==null||cpp.getActFt()==null)
			{
				continue;
			}
			WSOEE w = new WSOEE();
			long actQty = (cpp.getActQty()==null)?0l:cpp.getActQty();
			w.setActQty(actQty);
			w.setActTime(cpp.getActFt().getTime()-cpp.getActSt().getTime());
			w.setCppSt(cpp.getPlanFt());
			
			long loadingTime = 0l;
	
			for(PActualSetup p: pActualSetupRepository.findByCppId(cpp.getIdCPp()))
			{
				if(p.getActFt()==null||p.getActSt()==null)
				{
					continue;
				}
				loadingTime = loadingTime + p.getActFt().getTime()-p.getActSt().getTime();
			}
			if(loadingTime==0l)
			{
				loadingTime = (long)(cpp.getPRoutineD().getStdWtSetup()*60*60*1000);
			}
			w.setLoadingTime(loadingTime);
			w.setMachine(cpp.getMMachine().getCode());
			w.setMachineId(cpp.getMMachine().getIdMachine());
	        long machineTime =(long)(cpp.getPRoutineD().getStdWtMachine()*60*60*1000);
			w.setMachineTime(machineTime);  //理论加工时长.设备公司

			w.setPassedQty(actQty); //to be modified
			w.setPlanQty(cpp.getQty());
			Long planStopTime =0l;
			for(PStopsPlan p:pStopsPlanRepository.getPStopsPlansByMachineIdAndDuration(cpp.getMMachine().getIdMachine(), cpp.getActSt(), cpp.getActFt()))
			{
				if(p.getActFt()!=null)
				{
					planStopTime = planStopTime + p.getPlanFt().getTime()-p.getActSt().getTime();
				}
				else
				{
					planStopTime = planStopTime + cpp.getPlanFt().getTime()-p.getActSt().getTime();
				}
				
			}
			w.setPlanStopTime(planStopTime);
			
			w.setPlanTime(cpp.getPlanFt().getTime()-cpp.getPlanSt().getTime());
			
			w.setRoutineD(cpp.getPRoutineD().getRouteNo() +"_" +cpp.getPRoutineD().getDes());
			w.setRoutineDId(cpp.getPRoutineD().getIdRoutineD());
			w.setShiftD(cpp.getPShiftPlanD().getShift());
			
			Long unplannnedStopTime =0l;
		
			for(PUnplannedStops p:pUnplannedStopsRepository.getByMachineIdAndDuration(machineId, cpp.getActSt(), cpp.getActFt()))
			{
				if(p.getEqFt()!=null)
				{
					unplannnedStopTime = unplannnedStopTime + p.getEqFt().getTime()-p.getOpSt().getTime();
				}
				else
				{
					unplannnedStopTime = unplannnedStopTime + cpp.getActFt().getTime()-p.getOpSt().getTime();
				}
			}
			
			w.setUnPlannedStopTime(unplannnedStopTime);
            w.setWo(cpp.getPWo().getWoNo());
            w.setWoId(cpp.getPWo().getIdWo());
            
 
            float passedEff =1f;
            w.setPassedEff(passedEff);
            
            long pt = cpp.getPlanFt().getTime()-cpp.getPlanSt().getTime()-planStopTime-unplannnedStopTime-loadingTime;
            long at = cpp.getPlanFt().getTime()-cpp.getPlanSt().getTime();
            
            
           
            float timeEff = (float)pt/(float)at;
            w.setTimeEff(timeEff);
           	
            
            float machineEff =(float)(actQty*machineTime)/(float)pt; //性能开动率
            w.setMachineEff(machineEff);
		
            float oee = timeEff*machineEff*passedEff;
			w.setOee(oee);
       
			ws.add(w);
		}
		return ws;
	}
	
	
	
	
	@Transactional(readOnly = true)
	public List<WSOEE> findLongWSOEE(Long fromDate,
			 Long toDate,Long machineId,Long materialId)
	{
		List<WSOEE> ws = new ArrayList<WSOEE>();
		Long companyId =securityUtils.getCurrentDBUser().getCompany().getIdCompany();
		Date from = new Date(fromDate);
		Date to = new Date(toDate);
		
		//key 工单 ＋工序
		Map<String,WSOEE> oeeMap = new LinkedHashMap<String,WSOEE>();
		
		List<PCPp> cpps;
		if(materialId!=null)
		{
			cpps = pCPpRepository.getByFromDateToDateAndMachineIdAndMaterialId(companyId, from, to, machineId,materialId);
		}
		else
		{
			cpps = pCPpRepository.getByFromDateToDateAndMachineId(companyId, from, to, machineId);
		}
		
		for(PCPp cpp:cpps)
		{
			if(cpp.getPlanSt()==null||cpp.getPlanFt()==null||cpp.getActSt()==null||cpp.getActFt()==null)
			{
				continue;
			}
			Long woId = cpp.getPWo().getIdWo();
			Long routineDId = cpp.getPRoutineD().getIdRoutineD();
			WSOEE w;
			if(oeeMap.containsKey(woId+"_"+routineDId))
			{
				w = oeeMap.get(woId+"_"+routineDId);
			}
			else
			{
				w = new WSOEE();
				w.setWo(cpp.getPWo().getWoNo());
				w.setRoutineD(cpp.getPRoutineD().getRouteNo() +"_" +cpp.getPRoutineD().getDes());
				w.setPlanTime(0l);
				w.setActTime(0l);
				w.setMachine(cpp.getMMachine().getCode());
				w.setMachineId(cpp.getMMachine().getIdMachine());
				oeeMap.put(woId+"_"+routineDId, w);
				ws.add(w);
			}
			
			//计划时长
			long plant = w.getPlanTime()+cpp.getPlanFt().getTime()-cpp.getPlanSt().getTime();
		    w.setPlanTime(plant);
			
		    //实际时长
			long actT = w.getActTime() + cpp.getActFt().getTime()-cpp.getActSt().getTime();
			w.setActTime(actT);
			

            float oee = (float)plant/(float)actT;
			w.setOee(oee);
       
		
		}
		return ws;
	}
	
	
	
	
	@Transactional(readOnly = true)
	public WSPlannedMaterialSending findWSPlannedMaterialSending(Long fromDate,
			 Long toDate,
			 Long fromStkId,
			 Long toStkId)  {
	 //  logger.debug("fromDate: " + fromDate  +", toDate: " + toDate +", fromStkId: " + fromStkId +", toStkId: " + toStkId);
		WSPlannedMaterialSending ws = new WSPlannedMaterialSending();
		ws.setFromStkId(fromStkId);
		ws.setToStkId(toStkId);
		List<WSPlannedMaterialSendingItem> items = new ArrayList<WSPlannedMaterialSendingItem>();
		Long companyId =securityUtils.getCurrentDBUser().getCompany().getIdCompany();
		Date from = new Date(fromDate);
		Date to = new Date(toDate);
		List<PCPp> cpps = pCPpRepository.getByFromDateToDate(companyId, from, to);
		for(PCPp cpp:cpps)
		{
	//		 logger.debug("cppId: " + cpp.getIdCPp()  +", code: " + cpp.getCPpCode());
			 PWo pwo =cpp.getPWo();
//			 logger.debug("woNo: " + pwo.getWoNo());
			 SMaterial product =  pwo.getSSo().getSMaterial();	
//			 logger.debug("product: " + product);
			 Long idMachine = cpp.getMMachine().getIdMachine();
			 String machine = cpp.getMMachine().getCode();
//			 logger.debug("idMachine: " + idMachine +", machine: " + machine);
			 if(cpp.getMMachine().getSBin()==null)
			 {
				// logger.debug("此机台无位置设定，不能发料！" +"idMachine: " + idMachine +", machine: " + machine);
				 continue;
			 }
			 if(!cpp.getMMachine().getSBin().getSStk().getId().equals(toStkId))
			 {
				 //logger.debug("skip this machine, " +"idMachine: " + idMachine +", machine: " + machine);
				 continue;
			 }
			 PBom pBom = pBomRepository.findProductByMaterialId(product.getIdMaterial());
				if(pBom!=null)
				{
					for(PBom p: pBomRepository.findMaterialsByRoutineDId(cpp.getPRoutineD().getIdRoutineD()))
					{	
						SMaterial material =p.getSMaterial();
//						logger.debug("bomId: " + p.getIdBom() + ", material id: " +material.getIdMaterial() + ", material: " + material.getPno());
						for(SInventory inv:sInventoryRepository.findInventoryByMaterialAndStk(material.getIdMaterial(), companyId, fromStkId))
						{
							if(inv.getQty()!=null&&inv.getQty().intValue()<=0)
							{
								continue;
							}
							String lotNo = (inv.getLotNo()==null)?"":inv.getLotNo();
//							logger.debug("inv qty: " + inv.getQty() + ", lotNo: " + lotNo);
							WSPlannedMaterialSendingItem w = new WSPlannedMaterialSendingItem();
							w.setBomId(p.getIdBom());
							w.setBin(inv.getSBin().getBin());
							w.setCppId(cpp.getIdCPp());
							w.setFromBinId(inv.getSBin().getIdBin());
							w.setIdMachine(idMachine);
							w.setIdMaterial(material.getIdMaterial());
							w.setInvId(inv.getIdInv());
							w.setLotNo(lotNo);
							w.setMachine(machine);
							w.setMaterial(material.getPno()+"_"+material.getRev()+"_"+material.getDes());
							w.setPlannedQty(cpp.getQty());
							w.setPlannedSt(cpp.getPlanSt());
							w.setProduction(product.getPno()+"_"+product.getRev()+"_" + product.getDes());
							w.setQty(0l);
							Long qtyDelivered=0l;
							for(PMr pmr: pMrRepository.getByBomIdAndCppId(p.getIdBom(), cpp.getIdCPp()))
							{
								Long d = (pmr.getQtyDelivered()==null)?0l:pmr.getQtyDelivered();
								qtyDelivered =qtyDelivered+d;
							}
							w.setQtyDelivered(qtyDelivered);
							w.setQtyStored(inv.getQty());
							w.setShiftD(cpp.getPShiftPlanD().getShift());
							w.setToBinId(cpp.getMMachine().getSBin().getIdBin());
							Long shouldQty = 0l;
							if(p.getQpu()!=null)
							{
								shouldQty = p.getQpu()*cpp.getQty();
							}
							w.setShouldQty(shouldQty);
							w.setWip(cpp.getMMachine().getSBin().getSStk().getStkName());
							w.setWoId(pwo.getIdWo());
							w.setWoNo(pwo.getWoNo());
							items.add(w);
			
						}
					}
				}
		}
		
		
		ws.setItems(items);
		return ws;
		
		
	}
	
	

	@Transactional(readOnly=true)
	public List<WSPMr>  findWSPMrsByCppId(Long cppId)
	{
		 List<WSPMr> ws = new ArrayList<WSPMr>();
		 PCPp pCPp = pCPpRepository.findOne(cppId);
		 SMaterial material =  pCPp.getPWo().getSSo().getSMaterial();	 
		 PBom pBom = pBomRepository.findProductByMaterialId(material.getIdMaterial());

			if(pBom!=null)
			{
				for(PBom p: pBom.getPBoms())
				{
				//	PMr pmr = pMrRepository.getByBomIdAndCppId(p.getIdBom(), cppId);
					SMaterial s =p.getSMaterial();
					WSPMr w = new WSPMr();
					w.setDes(s.getDes());
					w.setIdMaterial(s.getIdMaterial());
					w.setPno(s.getPno());
					w.setQty(s.getMpq());
					w.setCppId(cppId);
					w.setRev(s.getRev());
					w.setBomId(p.getIdBom());
//					if(pmr!=null)
//					{
//						if(pmr.getQtyDelivered()!=null)
//						{
//							w.setQtyDelivered(pmr.getQtyDelivered());
//						}
//						
//					}
//	                w.setQtyDelivered(p.getq);
				    ws.add(w);
				   
				}
				
			}
		 return ws;
	}
}
package com.jms.service.production;


import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.jms.domain.EventTypeEnum;
import com.jms.domain.NotificationMethodEnum;
import com.jms.domain.db.EventReceiver;
import com.jms.domain.db.FCostCenter;
import com.jms.domain.db.Groups;
import com.jms.domain.db.MMachine;
import com.jms.domain.db.PBom;
import com.jms.domain.db.PMr;
import com.jms.domain.db.PWo;
import com.jms.domain.db.PWoRoute;
import com.jms.domain.db.PWorkCenter;
import com.jms.domain.db.SMaterial;
import com.jms.domain.db.SStk;
import com.jms.domain.db.Users;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.p.WSPMr;
import com.jms.domain.ws.p.WSPRoutineD;
import com.jms.domain.ws.p.WSPUnplannedStops;
import com.jms.domain.ws.p.WSPWo;
import com.jms.domain.ws.p.WSPWorkCenter;
import com.jms.domain.ws.p.WSPmrRequest;
import com.jms.domain.ws.s.WSMaterialQty;
import com.jms.domainadapter.BeanUtil;
import com.jms.email.EmailSenderService;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.f.FCostCenterRepository;
import com.jms.repositories.p.PBomRepository;
import com.jms.repositories.p.PCPpRepository;
import com.jms.repositories.p.PMrRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PWoRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SSoRepository;
import com.jms.repositories.system.EventReceiverRepository;
import com.jms.repositories.user.GroupRepository;
import com.jms.repositories.user.GroupTypeRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.system.INotificationService;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class PMrService {

	private static final Logger logger = LogManager.getLogger(PMrService.class
			.getCanonicalName());
	@Autowired
	private PWoRepository pWoRepository;
	@Autowired
	private SSoRepository sSoRepository;
	
	@Autowired
	private PBomRepository pBomRepository;
	@Autowired
	private PCPpRepository pCPpRepository;
	
	
	@Autowired 
	private PMrRepository pMrRepository;
	@Autowired 
	private PStatusDicRepository pStatusDicRepository;
	@Autowired
	private EmailSenderService emailSenderService;

	@Autowired
	private UsersRepository usersRepository;
	

	@Autowired
	private SecurityUtils securityUtils;
	
	@Autowired
	private INotificationService notificationService;
	@Autowired
	private EventReceiverRepository eventReceiverRepository;
	
	@Autowired
	private GroupRepository groupRepository;
	@Autowired
	private GroupTypeRepository groupTypeRepository;
	

	@Autowired
	private  PUnplannedStopsService pUnplannedStopsService;
	
	@Transactional(readOnly=false)
	public WSPMr saveWSPMr(WSPMr wsPMr) throws Exception {
		PMr pMr;
		if(wsPMr.getIdMr()!=null)
		{
			pMr = pMrRepository.findOne(wsPMr.getIdMr());
		}
		else
		{
			pMr = new PMr();
			pMr.setSt(new Date());
		}
		PMr dbPMr= toDBPMr(wsPMr,pMr);
		dbPMr = pMrRepository.save(dbPMr);
		wsPMr.setIdMr(dbPMr.getIdMr());
		return wsPMr;		
		
	}

	
	
	@Transactional(readOnly=true)
	public List<WSPMr> getWSPMrsByType(Long type) throws Exception {
		List<WSPMr> wsPMrs = new ArrayList<WSPMr>();
		
		for(PMr p: pMrRepository.getByTypeAndCompanyId(type, securityUtils.getCurrentDBUser().getCompany().getIdCompany()))
		{
			WSPMr w = new WSPMr();
			w.setBomId(p.getPBom().getIdBom());
			w.setCppId(p.getPCPp().getIdCPp());
			SMaterial s = p.getPBom().getSMaterial();
			w.setDes(s.getDes());
			w.setIdMaterial(s.getIdMaterial());
			w.setIdMr(p.getIdMr());
			w.setMachine(p.getPCPp().getMMachine().getCode());
			//System.out.println("machineX: " +p.getPCPp().getMMachine().getCode() );
			w.setOp(p.getPCPp().getUsers().getName());
			w.setPno(s.getPno());
			w.setQty(p.getQty());
			w.setRemark(p.getRemark());
			w.setRev(s.getRev());
			w.setStatus(p.getPStatusDic().getName());
			w.setStatusId(p.getPStatusDic().getIdPstatus());
			w.setType(p.getType());
			w.setBinId(p.getPCPp().getMMachine().getSBin().getIdBin());
			
			if(p.getQtyDelivered()!=null)
			{
				w.setQtyDelivered(p.getQtyDelivered());
			}
			else
			{
				w.setQtyDelivered(0l);
			}
			
			wsPMrs.add(w);
		}
		
		return wsPMrs;
		
	}
	
	
	@Transactional(readOnly=true)
	public WSPMr getWSPMrById(Long idMr) throws Exception {
		    PMr p=pMrRepository.getOne(idMr);
	
			WSPMr w = new WSPMr();
			w.setBomId(p.getPBom().getIdBom());
			w.setCppId(p.getPCPp().getIdCPp());
			SMaterial s = p.getPBom().getSMaterial();
			w.setDes(s.getDes());
			w.setIdMaterial(s.getIdMaterial());
			w.setIdMr(p.getIdMr());
			
			MMachine machine = p.getPCPp().getMMachine();
			
			w.setMachine(machine.getCode());
			w.setOp(p.getPCPp().getUsers().getName());
			w.setPno(s.getPno());
			w.setQty(p.getQty());
			w.setRemark(p.getRemark());
			w.setRev(s.getRev());
			w.setStatus(p.getPStatusDic().getName());
			w.setStatusId(p.getPStatusDic().getIdPstatus());
			w.setType(p.getType());
			if(p.getQtyDelivered()!=null)
			{
				w.setQtyDelivered(p.getQtyDelivered());
			}
			else
			{
				w.setQtyDelivered(0l);
			}
			
			
			if(machine.getSBin()!=null)
			{
				w.setBinId(machine.getSBin().getIdBin());
				w.setStkId(machine.getSBin().getSStk().getId());
				
			}
			
			
	      return w;
	}
	
	
	
	@Transactional(readOnly=false)
	public Valid saveWSPMrRequest(WSPmrRequest wsPmrRequest) throws Exception {
		Valid v = new Valid();
		v.setValid(true);
		
		WSPUnplannedStops wsPUnplannedStops =pUnplannedStopsService.saveWSPStopsPlan(wsPmrRequest.getWsPUnplannedStops());
	
		if(wsPUnplannedStops.getIdUnplannedStops()==null)
		{
			v.setValid(false);
			return v;
		}
		
		for(WSPMr w : wsPmrRequest.getWsPMrs())
		{
			w.setIdUnplannedStop(wsPUnplannedStops.getIdUnplannedStops());	
			w=saveWSPMr(w);
		
		}
	
		return v;
	}
	
	



	

	
	
	private PMr toDBPMr(WSPMr wsPMr,PMr pMr) throws Exception
	{
	
		PMr dbPMr = (PMr)BeanUtil.shallowCopy(wsPMr, PMr.class, pMr);

        if(wsPMr.getStatusId()!=null)
        	dbPMr.setPStatusDic(pStatusDicRepository.findOne(wsPMr.getStatusId()));
        dbPMr.setPCPp(pCPpRepository.findOne(wsPMr.getCppId()));
        dbPMr.setPBom(pBomRepository.findOne(wsPMr.getBomId()));
  
		return dbPMr;
	}
	
	private WSPMr toWSPMr(PMr pMr) throws Exception
	{
		WSPMr pc = (WSPMr)BeanUtil.shallowCopy(pMr, WSPMr.class, null);
	
		
		if(pMr.getPStatusDic()!=null)
		{
			pc.setStatus(pMr.getPStatusDic().getName());
			pc.setStatusId(pMr.getPStatusDic().getIdPstatus());
		}
		
		return pc;
	}
	
	


}
package com.jms.service.production;


import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.Config;
import com.jms.domain.db.PUTime;
import com.jms.domain.db.PWip;
import com.jms.domain.db.SMtfTypeDic;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.p.WSPWip;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.p.PCheckTimeRepository;
import com.jms.repositories.p.PPUTimeRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PWipRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class PPUTimeService {

	private static final Logger logger = LogManager.getLogger(PPUTimeService.class
			.getCanonicalName());
	@Autowired
	private PPUTimeRepository pPUTimeRepository;
	

	@Autowired
	private SecurityUtils securityUtils;
	
	@Transactional(readOnly=true)
	public List<WSSelectObj> findPutimess()
	{
		List<WSSelectObj> ws = new ArrayList<WSSelectObj>();
		for(PUTime w: pPUTimeRepository.findAll())
		{
			WSSelectObj o = new WSSelectObj(w.getIdUTime(),w.getUTime());
			ws.add(o);
		}
		
		return ws;
	}
	

	
	//导入
	public void loadPuTimes() {
		
		long i=1;
		for(String puTime: Config.puTimes)
		{
			PUTime s = new PUTime();
			s.setIdUTime(i);
			s.setUTime(puTime);
			pPUTimeRepository.save(s);
			i++;
		}
	}
	

}
package com.jms.service.production;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.acls.domain.BasePermission;
import org.springframework.security.acls.domain.GrantedAuthoritySid;
import org.springframework.security.acls.domain.PrincipalSid;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.csvreader.CsvReader;
import com.jms.domain.Config;
import com.jms.domain.GroupTypeEnum;
import com.jms.domain.db.Apps;
import com.jms.domain.db.Company;
import com.jms.domain.db.Groups;
import com.jms.domain.db.PStatusDic;
import com.jms.domain.db.SMaterialTypeDic;
import com.jms.domain.db.SStatusDic;
import com.jms.domain.db.SysDic;
import com.jms.domain.db.SysDicD;
import com.jms.domain.ws.s.WSSStatus;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.s.SMaterialTypeDicRepository;
import com.jms.repositories.s.SStatusDicRepository;
import com.jms.repositories.system.SysDicDRepository;
import com.jms.repositories.system.SysDicRepository;

@Service
@Transactional
public class PStatusDicService {

	private static final Logger logger = LogManager.getLogger(PStatusDicService.class
			.getCanonicalName());
	@Autowired
	private PStatusDicRepository pStatusDicRepository;
	
	
	@Transactional(readOnly=true)
	public List<WSSStatus> getSStatus(String source)
	{
		List<WSSStatus> wss = new ArrayList<WSSStatus>();
		for(PStatusDic s :pStatusDicRepository.getBySource(source))
		{
			WSSStatus ws = new WSSStatus();
			ws.setId(s.getIdPstatus());
			ws.setName(s.getName());
			wss.add(ws);
		}
		return wss;
	}
	
	
	public void loadStatus(InputStream inputStream)throws IOException {
		
		CsvReader reader = new CsvReader(inputStream,',', Charset.forName("UTF-8"));
		//reader.readHeaders();
	
		while(reader.readRecord())
		{
			
			PStatusDic s = new PStatusDic();
			s.setName(reader.get(0).trim());
			s.setDes(reader.get(1).trim());
			s.setSource(reader.get(2).trim());
			pStatusDicRepository.save(s);
	
		}
		
		
		
	}


}
package com.jms.service.production;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.NotificationMethodEnum;
import com.jms.domain.db.EventReceiver;
import com.jms.domain.db.MRepairHistory;
import com.jms.domain.db.PCPp;
import com.jms.domain.db.PUnplannedStops;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.p.WSPUnplannedStops;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.m.MMachineRepository;
import com.jms.repositories.m.MRepairHistoryRepository;
import com.jms.repositories.m.MStatusDicRepository;
import com.jms.repositories.p.PCPpRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PSubCodeRepository;
import com.jms.repositories.p.PUnplannedStopsRepository;
import com.jms.repositories.system.EventReceiverRepository;
import com.jms.system.INotificationService;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class PUnplannedStopsService {

	private static final Logger logger = LogManager.getLogger(PUnplannedStopsService.class
			.getCanonicalName());
	@Autowired
	private PUnplannedStopsRepository pUnplannedStopsRepository;
	@Autowired
	private  PSubCodeRepository pSubCodeRepository;
	@Autowired
	private PCPpRepository pCPpRepository;
	@Autowired 
	private  PStatusDicRepository pStatusDicRepository;
	@Autowired private SecurityUtils securityUtils;
	
	@Autowired
	private  MMachineRepository mMachineRepository;
	@Autowired
	private EventReceiverRepository eventReceiverRepository;
	@Autowired
	private  INotificationService notificationService;
	@Autowired
	private MRepairHistoryRepository mRepairHistoryRepository;
	@Autowired
	private MStatusDicRepository mStatusDicRepository;
	
	@Transactional(readOnly=false)
	public WSPUnplannedStops saveWSPStopsPlan(WSPUnplannedStops wsPUnplannedStops) throws Exception {
		PUnplannedStops pUnplannedStops;
		if(wsPUnplannedStops.getIdUnplannedStops()!=null)
		{
			pUnplannedStops = pUnplannedStopsRepository.findOne(wsPUnplannedStops.getIdUnplannedStops());
			//System.out.println(" id UnplannedStops: " + wsPUnplannedStops.getIdUnplannedStops());
		}
		else
		{
			//System.out.println(" id UnplannedStops: " + wsPUnplannedStops.getIdUnplannedStops() +",  sub code: " + wsPUnplannedStops.getpSubCodeId());
			pUnplannedStops = new PUnplannedStops();
			List<PUnplannedStops> ws = pUnplannedStopsRepository.getByMachineIdAndStatusIdAndHasSubCode(wsPUnplannedStops.getIdMachine(), 18l);
			if(wsPUnplannedStops.getpSubCodeId()!=null&&ws!=null&&!ws.isEmpty())
			{
				System.out.println(" 该设备已经有停机，不能再次停机，返回！ sub code: " + wsPUnplannedStops.getpSubCodeId() +", machine Id: " + wsPUnplannedStops.getIdMachine());
				wsPUnplannedStops.setSaved(false);
				return wsPUnplannedStops;
			}
				
			
			pUnplannedStops.setOpSt(new Date());
		}
		
		wsPUnplannedStops.setSaved(true);
		PUnplannedStops dbPUnplannedStops= toDBPUnplannedStops(wsPUnplannedStops,pUnplannedStops);
		
		dbPUnplannedStops.setIdCompany(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		dbPUnplannedStops = pUnplannedStopsRepository.save(dbPUnplannedStops);
		wsPUnplannedStops.setIdUnplannedStops(dbPUnplannedStops.getIdUnplannedStops());
		
		//设备质量停机，列入维修历史
		
		if(wsPUnplannedStops.getpSubCodeId()!=null&&(wsPUnplannedStops.getpSubCodeId().equals(1l)||wsPUnplannedStops.getpSubCodeId().equals(4l)))
		{
			MRepairHistory m = new MRepairHistory();
			m.setMStatusDic(mStatusDicRepository.findOne(7l)); //发起状态
			if(wsPUnplannedStops.getIdCpp()!=null)
			{
			    m.setMMachine(pCPpRepository.findOne(wsPUnplannedStops.getIdCpp()).getMMachine());
			}
			m.setUsersByOp(securityUtils.getCurrentDBUser());
			m.setRepairTime(new Date());
			m.setIssueDes(wsPUnplannedStops.getOpDes());
			m.setIdUnplannedStop(dbPUnplannedStops.getIdUnplannedStops());
			mRepairHistoryRepository.save(m);
		}
		//消息
		Long eventId = wsPUnplannedStops.getEventId();
		//logger.debug("idCpp: " + wsPUnplannedStops.getIdCpp() +", eventId: " + eventId);
		List<EventReceiver> eventReceivers = eventReceiverRepository.findByIdEventAndIdCompany(eventId,securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		if(eventReceivers!=null)
		{
			notificationService.createNotificationToReceivers(securityUtils.getCurrentDBUser().getCompany(), eventId, wsPUnplannedStops.getIdUnplannedStops(), NotificationMethodEnum.sys, eventReceivers,wsPUnplannedStops.getOpSt());
		}
		
		
		return wsPUnplannedStops;		
		
	}

	
	
	
	@Transactional(readOnly=false)
	public Valid updateWSPStopsPlan(Long machineId, Long type) {
		
		//logger.debug("更改 停机状态： "+machineId+", type: " +type);
		Valid v = new Valid();
		List<PUnplannedStops> pUnplannedStops =pUnplannedStopsRepository.getByMachineIdAndStatusId(machineId,18l);
		if(pUnplannedStops!=null&&!pUnplannedStops.isEmpty())
		{
			PUnplannedStops p = pUnplannedStops.get(0);
			
		//	logger.debug("更改 停机状态： "+ p.getIdUnplannedStops() +",  " + p.getIdMachine() +" type: " +type);
		    if(type.equals(0l))
		    {
		    	p.setEqSt(new Date());
		    	v.setValid(true);
		    	pUnplannedStopsRepository.save(p);
		    }
		    else if(type.equals(1l))
		    {
		    	p.setEqFt(new Date());
		    	v.setValid(true);
		    	pUnplannedStopsRepository.save(p);
		    }
		    else if(type.equals(2l))
		    {
		    	p.setOpFt(new Date());
		    	p.setPStatusDic(pStatusDicRepository.findOne(19l));
		    	pUnplannedStopsRepository.save(p);
		    	v.setValid(true);
		    }
		    else
		    {
		    	v.setValid(false);
				v.setMsg("更新类型错误，必须是0，1，2， 0处理开始，1处理结束，2确认结束");
		    }
		}
		else
		{
			v.setValid(false);
			v.setMsg("该设备没有停机！");
		}
		return v;
	}

	
	@Transactional(readOnly=true) 
	public WSPUnplannedStops findWSPUnplannedStopsById(Long idUnplannedStops) throws Exception
	{	
		
		PUnplannedStops pUnplannedStops =pUnplannedStopsRepository.findOne(idUnplannedStops);
	
	     return toWSPUnplannedStops(pUnplannedStops);
	
	}
	

	@Transactional(readOnly=true) 
	public List<WSPUnplannedStops> findWSPUnplannedStopsByCppId(Long cppId) throws Exception
	{	
		PCPp cpp =pCPpRepository.findOne(cppId);
		List<PUnplannedStops> pUnplannedStops =pUnplannedStopsRepository.getByMachineId(cpp.getMMachine().getIdMachine());
		List<WSPUnplannedStops>  ws = new ArrayList<WSPUnplannedStops>();
		for(PUnplannedStops p: pUnplannedStops)
		{
			ws.add(toWSPUnplannedStops(p));
		}
		return  ws;
		
	}
	
	@Transactional(readOnly=true) 
	public List<WSPUnplannedStops> findWSPUnplannedStopsBySubCodeId(Long pSubCodeId, Long companyId) throws Exception
	{	
	
		List<PUnplannedStops> pUnplannedStops =pUnplannedStopsRepository.getByPSubCodeId(pSubCodeId,companyId);
		List<WSPUnplannedStops>  ws = new ArrayList<WSPUnplannedStops>();
		for(PUnplannedStops p: pUnplannedStops)
		{
			ws.add(toWSPUnplannedStops(p));
		}
		return  ws;
		
	}
	
	
	
	private PUnplannedStops toDBPUnplannedStops(WSPUnplannedStops wsPUnplannedStops,PUnplannedStops pUnplannedStops) throws Exception
	{
	
		PUnplannedStops dbPUnplannedStops = (PUnplannedStops)BeanUtil.shallowCopy(wsPUnplannedStops, PUnplannedStops.class, pUnplannedStops);

		dbPUnplannedStops.setPStatusDic(pStatusDicRepository.findOne(wsPUnplannedStops.getStatusId()));
		if(wsPUnplannedStops.getpSubCodeId()!=null)
		{
			dbPUnplannedStops.setPSubCode(pSubCodeRepository.findOne(wsPUnplannedStops.getpSubCodeId()));
		}
		
		
		if(wsPUnplannedStops.getIdCpp()!=null)
		{
			dbPUnplannedStops.setIdMachine(pCPpRepository.findOne(wsPUnplannedStops.getIdCpp()).getMMachine().getIdMachine());
			
		}
		dbPUnplannedStops.setIdMachine(wsPUnplannedStops.getIdMachine());
		
		return dbPUnplannedStops;
	}
	
	private WSPUnplannedStops toWSPUnplannedStops(PUnplannedStops pUnplannedStops) throws Exception
	{
		WSPUnplannedStops pc = (WSPUnplannedStops)BeanUtil.shallowCopy(pUnplannedStops, WSPUnplannedStops.class, null);
	    pc.setpSubCode(pUnplannedStops.getPSubCode().getSubCode());
	    pc.setpSubCodeId(pUnplannedStops.getPSubCode().getIdSubCode());
	    pc.setStatus(pUnplannedStops.getPStatusDic().getName());
	    pc.setStatusId(pUnplannedStops.getPStatusDic().getIdPstatus());
	    pc.setMachine(mMachineRepository.findOne(pUnplannedStops.getIdMachine()).getCode());
		
		return pc;
	}

}
package com.jms.service.production;


import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.PWip;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.p.WSPWip;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PWipRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class PWipService {

	private static final Logger logger = LogManager.getLogger(PWipService.class
			.getCanonicalName());
	@Autowired
	private PWipRepository pWipRepository;
	
	
	@Autowired 
	private CompanyRepository companyRepository;
	
	@Autowired 
	private PStatusDicRepository pStatusDicRepository;
	

	@Autowired
	private SecurityUtils securityUtils;
	
	@Transactional(readOnly=true)
	public List<WSSelectObj> findWipObjs()
	{
		List<WSSelectObj> wsWorkCenterList = new ArrayList<WSSelectObj>();
		for(PWip w: pWipRepository.getByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany()))
		{
			WSSelectObj o = new WSSelectObj(w.getIdWip(),w.getWip());
			wsWorkCenterList.add(o);
		}
		
		return wsWorkCenterList;
	}
	


	
	@Transactional(readOnly=false)
	public WSPWip saveWSPWip(WSPWip wsPWip) throws Exception {
		 PWip pWip;
		if(wsPWip.getIdWip()!=null&&!wsPWip.getIdWip().equals(0l))
		{
			pWip = pWipRepository.findOne(wsPWip.getIdWip());
		}
		else
		{
			pWip = new PWip();
		}
		PWip dbPWip= toDBPWip(wsPWip,pWip);
		dbPWip = pWipRepository.save(dbPWip);
		wsPWip.setIdWip(dbPWip.getIdWip());
		return wsPWip;		
		
	}

	@Transactional(readOnly=false)
	public Valid deletePWip(Long wipId)
	{
		Valid valid = new Valid();
		
		pWipRepository.delete(wipId);
		valid.setValid(true);
		
		return valid;
	}

	
	@Transactional(readOnly=true) 
	public WSPWip findWSPWip(Long wipId) throws Exception
	{	
		PWip pWip = pWipRepository.findOne(wipId);
		return  toWSPWip(pWip);
		
	}

	
	private PWip toDBPWip(WSPWip wsPWip,PWip pWip) throws Exception
	{
	
		PWip dbPWip = (PWip)BeanUtil.shallowCopy(wsPWip, PWip.class, pWip);

		dbPWip.setCompany(securityUtils.getCurrentDBUser().getCompany());
		if(wsPWip.getStatusId()!=null)
		{
			dbPWip.setPStatusDic(pStatusDicRepository.findOne(wsPWip.getStatusId()));
		}
		
		return dbPWip;
	}
	
	private WSPWip  toWSPWip(PWip pWip) throws Exception
	{
		WSPWip pc = (WSPWip)BeanUtil.shallowCopy(pWip, WSPWip.class, null);
		if(pWip.getCompany()!=null)
		{
			pc.setCompanyId(pWip.getCompany().getIdCompany());
		}
		if(pWip.getPStatusDic()!=null)
		{
			pc.setStatus(pWip.getPStatusDic().getName());
			pc.setStatusId(pWip.getPStatusDic().getIdPstatus());
		}
		return pc;
	}

}

package com.jms.service.production;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.FCostCenter;
import com.jms.domain.db.PBom;
import com.jms.domain.db.PRoutineD;
import com.jms.domain.db.PShiftPlan;
import com.jms.domain.db.PShiftPlanD;
import com.jms.domain.db.PWo;
import com.jms.domain.db.PWorkCenter;
import com.jms.domain.db.SStk;
import com.jms.domain.db.Users;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.p.WSPBom;
import com.jms.domain.ws.p.WSPBomItem;
import com.jms.domain.ws.p.WSPRoutineD;
import com.jms.domain.ws.p.WSPWo;
import com.jms.domain.ws.p.WSPWorkCenter;
import com.jms.domain.ws.p.WSShiftPlan;
import com.jms.domain.ws.p.WSShiftPlanD;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.f.FCostCenterRepository;
import com.jms.repositories.p.PAttDrawRepository;
import com.jms.repositories.p.PBomLabelRepository;
import com.jms.repositories.p.PBomRepository;
import com.jms.repositories.p.PRoutineDRepository;
import com.jms.repositories.p.PRoutineRepository;
import com.jms.repositories.p.PShiftPlanDRepository;
import com.jms.repositories.p.PShiftPlanRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PWoRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.s.SSoRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class RoutineDService {

	private static final Logger logger = LogManager.getLogger(RoutineDService.class
			.getCanonicalName());
	@Autowired
	private PRoutineDRepository pRoutineDRepository;
	@Autowired
	private PRoutineRepository pRoutineRepository;
	
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	@Autowired
	private PAttDrawRepository pAttDrawRepository;
	@Autowired
	private UsersRepository usersRepository;
	
	
	@Autowired
	private SMaterialRepository sMaterialRepository;
	@Autowired 
	private CompanyRepository companyRepository;
	@Autowired 
	private PStatusDicRepository pStatusDicRepository;
	

	@Autowired
	private SecurityUtils securityUtils;
	
	
	@Transactional(readOnly=false)
	public WSPRoutineD saveWSPRoutineD(WSPRoutineD wsPRoutineD) throws Exception {
		PRoutineD pRoutineD;
		if(wsPRoutineD.getIdRoutineD()!=null&&!wsPRoutineD.getIdRoutineD().equals(0l))
		{
			pRoutineD = pRoutineDRepository.findOne(wsPRoutineD.getIdRoutineD());
		}
		else
		{
			pRoutineD = new PRoutineD();
	
		}
		PRoutineD dbPRoutineD= toDBPRoutineD(wsPRoutineD,pRoutineD);
		//logger.debug("db labor: " + dbPRoutineD.getStdWtLabor());
		dbPRoutineD = pRoutineDRepository.save(dbPRoutineD);
		wsPRoutineD.setIdRoutineD(dbPRoutineD.getIdRoutineD());
		return wsPRoutineD;		
		
	}

	@Transactional(readOnly=false)
	public Valid deletePRoutineD(Long idPRoutineD)
	{
		Valid valid = new Valid();
		pRoutineDRepository.delete(idPRoutineD);
		valid.setValid(true);
		
		return valid;
	}
	
	
	@Transactional(readOnly=true) 
	public WSPRoutineD findWSPRoutineD(Long idPRoutineD) throws Exception
	{	
		PRoutineD pRoutineD= pRoutineDRepository.findOne(idPRoutineD);
		return  toWSPRoutineD(pRoutineD);
		
	}
	
	protected PRoutineD toDBPRoutineD(WSPRoutineD wsPRoutineD,PRoutineD pRoutineD) throws Exception
	{
	
		PRoutineD dbPRoutineD = (PRoutineD)BeanUtil.shallowCopy(wsPRoutineD, PRoutineD.class, pRoutineD);
		
		dbPRoutineD.setStdWtLabor(wsPRoutineD.getStdWtLabor());
		dbPRoutineD.setStdWtMachine(wsPRoutineD.getStdWtMachine());
		dbPRoutineD.setStdWtSetup(wsPRoutineD.getStdWtSetup());

		
        if(wsPRoutineD.getRoutineId()!=null)
        {
        	dbPRoutineD.setPRoutine(pRoutineRepository.findOne(wsPRoutineD.getRoutineId()));
        }
        if(wsPRoutineD.getpAttDrawId()!=null)
        {
        	dbPRoutineD.setPAttDraw(pAttDrawRepository.findOne(wsPRoutineD.getpAttDrawId()));
        }
        if(wsPRoutineD.getUserId()!=null)
        {
        	dbPRoutineD.setUsers(usersRepository.findOne(wsPRoutineD.getUserId()));
        }
        if(wsPRoutineD.getWorkCenterId()!=null)
        {
        	dbPRoutineD.setPWorkCenter(pWorkCenterRepository.findOne(wsPRoutineD.getWorkCenterId()));
        }

		return dbPRoutineD;
	}
	
	protected WSPRoutineD toWSPRoutineD(PRoutineD pRoutineD) throws Exception
	{
		WSPRoutineD pc = (WSPRoutineD)BeanUtil.shallowCopy(pRoutineD, WSPRoutineD.class, null);
	    if(pRoutineD.getPRoutine()!=null)
	    {
	    	pc.setRoutineId(pRoutineD.getPRoutine().getIdRoutine());
	    
	    }
	    if(pRoutineD.getPAttDraw()!=null)
	    {
	    	pc.setpAttDraw(pRoutineD.getPAttDraw().getName());
	    	pc.setpAttDrawId(pRoutineD.getPAttDraw().getIdAttDraw());
	    
	    }
	    if(pRoutineD.getPWorkCenter()!=null)
	    {
	    	pc.setWorkCenter(pRoutineD.getPWorkCenter().getWorkCenter());
	    	pc.setWorkCenterId(pRoutineD.getPWorkCenter().getIdWc());
	    }
	    if(pRoutineD.getUsers()!=null)
	    {
	    	pc.setOrderBy(pRoutineD.getUsers().getName());
	    	pc.setUserId(pRoutineD.getUsers().getIdUser());
	    }
	  
		return pc;
	}

}

package com.jms.service.production;


import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.PDraw;
import com.jms.domain.db.PRoutine;
import com.jms.domain.db.PRoutineD;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.p.WSPRoutine;
import com.jms.domain.ws.p.WSPRoutineD;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.p.PAttDrawRepository;
import com.jms.repositories.p.PDrawRepository;
import com.jms.repositories.p.PLineRepository;
import com.jms.repositories.p.PRoutineDRepository;
import com.jms.repositories.p.PRoutineRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class RoutineService {

	private static final Logger logger = LogManager.getLogger(RoutineService.class
			.getCanonicalName());
	@Autowired
	private RoutineDService routineDService;
	@Autowired
	private PRoutineDRepository pRoutineDRepository;
	@Autowired
	private PRoutineRepository pRoutineRepository;
	@Autowired
	private PLineRepository pLineRepository;
	
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	@Autowired
	private PAttDrawRepository pAttDrawRepository;
	
	@Autowired
	private PDrawRepository pDrawRepository;
	@Autowired
	private UsersRepository usersRepository;
	
	
	@Autowired
	private SMaterialRepository sMaterialRepository;
	@Autowired 
	private CompanyRepository companyRepository;
	@Autowired 
	private PStatusDicRepository pStatusDicRepository;
	

	@Autowired
	private SecurityUtils securityUtils;
	
	
	@Transactional(readOnly=false)
	public WSPRoutine saveWSPRoutine(WSPRoutine wsPRoutine) throws Exception {
		PRoutine pRoutine;
		if(wsPRoutine.getLineId()==null||wsPRoutine.getLineId().equals(0l))
			return wsPRoutine;
	
		
		PRoutine dbRoutine0 = pRoutineRepository.getByMaterialId(wsPRoutine.getMaterialId());
		
		if(wsPRoutine.getIdRoutine()!=null&&!wsPRoutine.getIdRoutine().equals(0l))
		{
			pRoutine = pRoutineRepository.findOne(wsPRoutine.getIdRoutine());
			
			if(dbRoutine0!=null&&(!dbRoutine0.getIdRoutine().equals(pRoutine.getIdRoutine())))
			{
				wsPRoutine.setSaved(false);
				return wsPRoutine;
			}
			pRoutineDRepository.delete(pRoutine.getPRoutineDs());
			pRoutine.getPRoutineDs().clear();
		}
		else
		{
			if(dbRoutine0!=null)
			{
				wsPRoutine.setSaved(false);
				return wsPRoutine;
			}
			pRoutine = new PRoutine();
	
		}
		
		
		
		
		
		PRoutine dbPRoutine= toDBPRoutine(wsPRoutine,pRoutine);
		
		dbPRoutine = pRoutineRepository.save(dbPRoutine);
	
		
		PDraw draw;
		if(wsPRoutine.getDrawId()==null||wsPRoutine.getDrawId().equals(0l))
		{
			draw= new PDraw();
			draw.setDrawNo(wsPRoutine.getDrawNo());
			draw.setDrawVer(wsPRoutine.getDrawVer());
			draw.setDrawAtt(wsPRoutine.getDrawAtt());
			draw = pDrawRepository.save(draw);
		}
		else
		{
		    draw =pDrawRepository.findOne(wsPRoutine.getDrawId());
			draw.setDrawNo(wsPRoutine.getDrawNo());
			draw.setDrawVer(wsPRoutine.getDrawVer());
			draw.setDrawAtt(wsPRoutine.getDrawAtt());
			draw = pDrawRepository.save(draw);
		}
		dbPRoutine.setPDraw(draw);
		dbPRoutine = pRoutineRepository.save(dbPRoutine);
		
	
		for(String k:wsPRoutine.getWsRoutineDs().keySet())
		{
			WSPRoutineD wm =wsPRoutine.getWsRoutineDs().get(k);
			//logger.debug("" + wm.g);
			//logger.debug("std ma: " +wm.getStdWtMachine());
			wm.setRoutineId(dbPRoutine.getIdRoutine());
			routineDService.saveWSPRoutineD(wm);
		}

		wsPRoutine.setIdRoutine(dbPRoutine.getIdRoutine());
		return wsPRoutine;		
		
	}
	
	
	@Transactional(readOnly=false)
	public WSPRoutine updateWSPRoutineInfo(WSPRoutine wsPRoutine) throws Exception {
		PRoutine pRoutine = pRoutineRepository.findOne(wsPRoutine.getIdRoutine());
		
		PDraw draw = pRoutine.getPDraw();
		if(draw!=null)
		{
			draw.setDrawNo(wsPRoutine.getDrawNo());
			draw.setDrawVer(wsPRoutine.getDrawVer());
			draw.setDrawAtt(wsPRoutine.getDrawAtt());
			pDrawRepository.save(draw);
		}
		
		pRoutine.setPLine(pLineRepository.findOne(wsPRoutine.getLineId()));
		pRoutine.setPStatusDic(pStatusDicRepository.findOne(wsPRoutine.getStatusId()));
		
		pRoutineRepository.save(pRoutine);
		return wsPRoutine;
	}
	
	

	@Transactional(readOnly=false)
	public Valid deletePRoutine(Long idPRoutine)
	{
		Valid valid = new Valid();
		PRoutine r = pRoutineRepository.findOne(idPRoutine);
		if(r!=null)
		{
		    for(PRoutineD p: pRoutineDRepository.findByRoutineId(idPRoutine))
		    {
		    	
		    	if(p.getPCPps()!=null&&!p.getPCPps().isEmpty())
		    	{
		    		valid.setValid(false);
		    		return valid;
		    	}
		    
		    }
		}
		pRoutineRepository.delete(idPRoutine);
		valid.setValid(true);
		
		return valid;
	}
	
	
	@Transactional(readOnly=true) 
	public WSPRoutine findWSPRoutine(Long idPRoutine) throws Exception
	{	
		PRoutine pRoutine= pRoutineRepository.findOne(idPRoutine);
		return  toWSPRoutine(pRoutine);
		
	}
	
	protected PRoutine toDBPRoutine(WSPRoutine wsPRoutine,PRoutine pRoutine) throws Exception
	{
	
		PRoutine dbPRoutine = (PRoutine)BeanUtil.shallowCopy(wsPRoutine, PRoutine.class, pRoutine);

        if(wsPRoutine.getCompanyId()!=null)
        {
        	dbPRoutine.setCompany(companyRepository.findOne(wsPRoutine.getCompanyId()));
        }
        else
        {
        	dbPRoutine.setCompany(securityUtils.getCurrentDBUser().getCompany());
        }
        if(wsPRoutine.getDrawId()!=null)
        {
        	dbPRoutine.setPDraw(pDrawRepository.findOne(wsPRoutine.getDrawId()));
        }
        if(wsPRoutine.getLineId()!=null)
        {
        	dbPRoutine.setPLine(pLineRepository.findOne(wsPRoutine.getLineId()));
        }
        if(wsPRoutine.getMaterialId()!=null)
        {
        	dbPRoutine.setSMaterial(sMaterialRepository.findOne(wsPRoutine.getMaterialId()));
        }
        if(wsPRoutine.getStatusId()!=null)
        {
        	dbPRoutine.setPStatusDic(pStatusDicRepository.findOne(wsPRoutine.getStatusId()));
        }

		return dbPRoutine;
	}
	
	protected WSPRoutine toWSPRoutine(PRoutine pRoutine) throws Exception
	{
		WSPRoutine pc = (WSPRoutine)BeanUtil.shallowCopy(pRoutine, WSPRoutine.class, null);
	    if(pRoutine.getCompany()!=null)
	    {
	    	pc.setCompanyId(pRoutine.getCompany().getIdCompany());
	    	pc.setCompanyName(pRoutine.getCompany().getCompanyName());
	    
	    }
	    if(pRoutine.getPDraw()!=null)
	    {
	    	pc.setDrawId(pRoutine.getPDraw().getIdDraw());
	    	pc.setDrawNo(pRoutine.getPDraw().getDrawNo());
	    	pc.setDrawVer(pRoutine.getPDraw().getDrawVer());
	    	pc.setDrawAtt(pRoutine.getPDraw().getDrawAtt());

	    }
	    if(pRoutine.getPLine()!=null)
	    {
	    	pc.setLine(pRoutine.getPLine().getPline());
	    	pc.setLineId(pRoutine.getPLine().getIdPline());
	    }
	    if(pRoutine.getPStatusDic()!=null)
	    {
	    	pc.setStatus(pRoutine.getPStatusDic().getName());
	    	pc.setStatusId(pRoutine.getPStatusDic().getIdPstatus());
	    }
	    if(pRoutine.getSMaterial()!=null)
	    {
	    	pc.setMaterialDes(pRoutine.getSMaterial().getDes());
	    	pc.setMaterialId(pRoutine.getSMaterial().getIdMaterial());
	    	pc.setMaterialRev(pRoutine.getSMaterial().getRev());
	    	pc.setpNo(pRoutine.getSMaterial().getPno());
	    	
	    }
	    int i=0;
	    Boolean edit = true;
	    
	    for(PRoutineD p: pRoutineDRepository.findByRoutineId(pRoutine.getIdRoutine()))
	    {
	    	pc.getWsRoutineDs().put("item"+i, routineDService.toWSPRoutineD(p));
	    	if(edit&&p.getPCPps()!=null&&!p.getPCPps().isEmpty())
	    	{
	    		edit =false;
	    	}
	    	i++;
	    }
	  
	    pc.setEdit(edit);
		return pc;
	}

}
package com.jms.service.production;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.FCostCenter;
import com.jms.domain.db.PBom;
import com.jms.domain.db.PShiftPlan;
import com.jms.domain.db.PShiftPlanD;
import com.jms.domain.db.PWo;
import com.jms.domain.db.PWorkCenter;
import com.jms.domain.db.SStk;
import com.jms.domain.db.Users;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.p.WSPBom;
import com.jms.domain.ws.p.WSPBomItem;
import com.jms.domain.ws.p.WSPWo;
import com.jms.domain.ws.p.WSPWorkCenter;
import com.jms.domain.ws.p.WSShiftPlan;
import com.jms.domain.ws.p.WSShiftPlanD;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.f.FCostCenterRepository;
import com.jms.repositories.p.PBomLabelRepository;
import com.jms.repositories.p.PBomRepository;
import com.jms.repositories.p.PShiftPlanDRepository;
import com.jms.repositories.p.PShiftPlanRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PWoRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.s.SSoRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class ShiftPlanDService {

	private static final Logger logger = LogManager.getLogger(ShiftPlanDService.class
			.getCanonicalName());
	@Autowired
	private PShiftPlanDRepository pShiftPlanDRepository;
	@Autowired
	private PShiftPlanRepository pShiftPlanRepository;
	
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	
	
	@Autowired
	private SMaterialRepository sMaterialRepository;
	@Autowired 
	private CompanyRepository companyRepository;
	@Autowired 
	private PStatusDicRepository pStatusDicRepository;
	

	@Autowired
	private SecurityUtils securityUtils;
	

	
	@Transactional(readOnly=false)
	public WSShiftPlanD saveWSPShiftPlanD(WSShiftPlanD wsShiftPlanD) throws Exception {
		PShiftPlanD pShiftPlanD;
		if(wsShiftPlanD.getIdShiftD()!=null&&!wsShiftPlanD.getIdShiftD().equals(0l))
		{
			pShiftPlanD = pShiftPlanDRepository.findOne(wsShiftPlanD.getIdShiftD());
		}
		else
		{
			pShiftPlanD = new PShiftPlanD();
	
		}
		PShiftPlanD dbPShiftPlanD= toDBPShiftPlanD(wsShiftPlanD,pShiftPlanD);
		dbPShiftPlanD = pShiftPlanDRepository.save(dbPShiftPlanD);
		wsShiftPlanD.setIdShiftD(dbPShiftPlanD.getIdShiftD());
		return wsShiftPlanD;		
		
	}

	@Transactional(readOnly=false)
	public Valid deletePShiftPlanD(Long idShiftD)
	{
		Valid valid = new Valid();
		pShiftPlanDRepository.delete(idShiftD);
		valid.setValid(true);
		
		return valid;
	}
	
	
	@Transactional(readOnly=true) 
	public WSShiftPlanD findWSShiftPlanD(Long idShiftD) throws Exception
	{	
		PShiftPlanD pShiftPlanD= pShiftPlanDRepository.findOne(idShiftD);
		return  toWSShiftPlanD(pShiftPlanD);
		
	}
	
	protected PShiftPlanD toDBPShiftPlanD(WSShiftPlanD wsShiftPlanD,PShiftPlanD pShiftPlanD) throws Exception
	{
	

		PShiftPlanD dbPShiftPlanD = (PShiftPlanD)BeanUtil.shallowCopy(wsShiftPlanD, PShiftPlanD.class, pShiftPlanD);

        if(wsShiftPlanD.getShiftPlanId()!=null)
        {
        	dbPShiftPlanD.setPShiftPlan(pShiftPlanRepository.getOne(wsShiftPlanD.getShiftPlanId()));
        }

		return dbPShiftPlanD;
	}
	
	protected WSShiftPlanD toWSShiftPlanD(PShiftPlanD pShiftPlanD) throws Exception
	{
		WSShiftPlanD pc = (WSShiftPlanD)BeanUtil.shallowCopy(pShiftPlanD, WSShiftPlanD.class, null);
	    if(pShiftPlanD.getPShiftPlan()!=null)
	    {
	    	pc.setShiftPlanId(pShiftPlanD.getPShiftPlan().getIdShiftPlan());
	    }
	  
		return pc;
	}

	
	
	
	@Transactional(readOnly=true) 
	public List<WSSelectObj> findWSShiftPlanDObjs()
	{	
		List<WSSelectObj>  ws = new ArrayList<WSSelectObj>();
		List<PShiftPlanD> ps= pShiftPlanDRepository.getByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		for(PShiftPlanD p : ps)
		{
			WSSelectObj w = new WSSelectObj(p.getIdShiftD(),p.getShift());
			ws.add(w);
		}
		return  ws;
		
	}
}
package com.jms.service.production;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.FCostCenter;
import com.jms.domain.db.PBom;
import com.jms.domain.db.PShiftPlan;
import com.jms.domain.db.PShiftPlanD;
import com.jms.domain.db.PWo;
import com.jms.domain.db.PWorkCenter;
import com.jms.domain.db.SStk;
import com.jms.domain.db.Users;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.p.WSPBom;
import com.jms.domain.ws.p.WSPBomItem;
import com.jms.domain.ws.p.WSPWo;
import com.jms.domain.ws.p.WSPWorkCenter;
import com.jms.domain.ws.p.WSShiftPlan;
import com.jms.domain.ws.p.WSShiftPlanD;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.f.FCostCenterRepository;
import com.jms.repositories.p.PBomLabelRepository;
import com.jms.repositories.p.PBomRepository;
import com.jms.repositories.p.PShiftPlanDRepository;
import com.jms.repositories.p.PShiftPlanRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.p.PWoRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.s.SSoRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class ShiftPlanService {

	private static final Logger logger = LogManager.getLogger(ShiftPlanService.class
			.getCanonicalName());
	@Autowired
	private PShiftPlanDRepository pShiftPlanDRepository;
	@Autowired
	private ShiftPlanDService shiftPlanDService;
	@Autowired
	private PShiftPlanRepository pShiftPlanRepository;
	

	
	
	@Autowired
	private SMaterialRepository sMaterialRepository;
	@Autowired 
	private CompanyRepository companyRepository;
	@Autowired 
	private PStatusDicRepository pStatusDicRepository;
	

	@Autowired
	private SecurityUtils securityUtils;
	

	
	@Transactional(readOnly=false)
	public WSShiftPlan saveWSPShiftPlan(WSShiftPlan wsShiftPlan) throws Exception {
		PShiftPlan pShiftPlan;
		if(wsShiftPlan.getIdShiftPlan()!=null&&!wsShiftPlan.getIdShiftPlan().equals(0l))
		{
			pShiftPlan = pShiftPlanRepository.findOne(wsShiftPlan.getIdShiftPlan());
			//delete pshiftPlanD
			pShiftPlanDRepository.delete(pShiftPlan.getPShiftPlanDs());
			pShiftPlan.getPShiftPlanDs().clear();
		}
		else
		{
			pShiftPlan = new PShiftPlan();
	
		}
		PShiftPlan dbPShiftPlan= toDBPShiftPlan(wsShiftPlan,pShiftPlan);
		dbPShiftPlan = pShiftPlanRepository.save(dbPShiftPlan);
		wsShiftPlan.setIdShiftPlan(dbPShiftPlan.getIdShiftPlan());
		
		for(WSShiftPlanD w: wsShiftPlan.getShifPlanItems().values())
		{
			w.setShiftPlanId(wsShiftPlan.getIdShiftPlan());
			shiftPlanDService.saveWSPShiftPlanD(w);
		}
		return wsShiftPlan;		
		
	}

	@Transactional(readOnly=false)
	public Valid deletePShiftPlan(Long idShiftPlan)
	{
		Valid valid = new Valid();
		pShiftPlanRepository.delete(idShiftPlan);
		valid.setValid(true);
		
		return valid;
	}
	
	
	@Transactional(readOnly=true) 
	public WSShiftPlan findWSShiftPlan(Long idShiftPlan) throws Exception
	{	
		PShiftPlan pShiftPlan= pShiftPlanRepository.findOne(idShiftPlan);
		return  toWSShiftPlan(pShiftPlan);
		
	}
	
	protected PShiftPlan toDBPShiftPlan(WSShiftPlan wsShiftPlan,PShiftPlan pShiftPlan) throws Exception
	{
	

		PShiftPlan dbPShiftPlan = (PShiftPlan)BeanUtil.shallowCopy(wsShiftPlan, PShiftPlan.class, pShiftPlan);

		if(wsShiftPlan.getCompanyId()!=null)
		{
			dbPShiftPlan.setCompany(companyRepository.findOne(wsShiftPlan.getCompanyId()));
		}
		else
		{
			dbPShiftPlan.setCompany(securityUtils.getCurrentDBUser().getCompany());
		}
		if(wsShiftPlan.getStatusId()!=null)
		{
			dbPShiftPlan.setPStatusDic(pStatusDicRepository.findOne(wsShiftPlan.getStatusId()));
		}
		return dbPShiftPlan;
	}
	
	private WSShiftPlan toWSShiftPlan(PShiftPlan pShiftPlan) throws Exception
	{
		WSShiftPlan pc = (WSShiftPlan)BeanUtil.shallowCopy(pShiftPlan, WSShiftPlan.class, null);
	    if(pShiftPlan.getPStatusDic()!=null)
	    {
	    	pc.setStatus(pShiftPlan.getPStatusDic().getName());
	    	pc.setStatusId(pShiftPlan.getPStatusDic().getIdPstatus());
	    }
	    if(pShiftPlan.getCompany()!=null)
	    {
	    	pc.setCompanyId(pShiftPlan.getCompany().getIdCompany());
	    	pc.setCompanyName(pShiftPlan.getCompany().getCompanyName());
	    }
	    int i=0;
	    for(PShiftPlanD ps: pShiftPlanDRepository.getByShiftId(pShiftPlan.getIdShiftPlan()))
	    {
	    	pc.getShifPlanItems().put("item"+i, shiftPlanDService.toWSShiftPlanD(ps));
	    	i++;
	    	
	    }
	  
		return pc;
	}

}
package com.jms.service.production;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.FCostCenter;
import com.jms.domain.db.PWorkCenter;
import com.jms.domain.db.SStk;
import com.jms.domain.db.Users;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.p.WSPWorkCenter;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.company.CompanyRepository;
import com.jms.repositories.f.FCostCenterRepository;
import com.jms.repositories.p.PWorkCenterRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class WorkCenterService {

	private static final Logger logger = LogManager.getLogger(WorkCenterService.class
			.getCanonicalName());
	@Autowired
	private PWorkCenterRepository pWorkCenterRepository;
	
	
	@Autowired 
	private CompanyRepository companyRepository;
	

	@Autowired
	private SecurityUtils securityUtils;
	
	@Transactional(readOnly=true)
	public List<WSSelectObj> findWorkCenterSelectObjs()
	{
		List<WSSelectObj> wsWorkCenterList = new ArrayList<WSSelectObj>();
		for(PWorkCenter w: pWorkCenterRepository.getByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany()))
		{
			WSSelectObj o = new WSSelectObj(w.getIdWc(),w.getWorkCenter());
			wsWorkCenterList.add(o);
		}
		
		return wsWorkCenterList;
	}
	


	
	@Transactional(readOnly=false)
	public WSPWorkCenter saveWSPWorkCenter(WSPWorkCenter wsPWorkCenter) throws Exception {
	    PWorkCenter pWorkCenter;
		if(wsPWorkCenter.getIdWc()!=null&&!wsPWorkCenter.getIdWc().equals(0l))
		{
			pWorkCenter = pWorkCenterRepository.findOne(wsPWorkCenter.getIdWc());
		}
		else
		{
			pWorkCenter = new PWorkCenter();
		}
		PWorkCenter dbpWorkCenter= toDBPWorkCenter(wsPWorkCenter,pWorkCenter);
		dbpWorkCenter = pWorkCenterRepository.save(dbpWorkCenter);
		wsPWorkCenter.setIdWc(dbpWorkCenter.getIdWc());
		return wsPWorkCenter;		
		
	}

	@Transactional(readOnly=false)
	public Valid deletePWorkCenter(Long workCenterId)
	{
		Valid valid = new Valid();
		
		pWorkCenterRepository.delete(workCenterId);
		valid.setValid(true);
		
		return valid;
	}

	
	@Transactional(readOnly=true) 
	public WSPWorkCenter findWSPworkCenter(Long workCenterId) throws Exception
	{	
		PWorkCenter pWorkCenter = pWorkCenterRepository.findOne(workCenterId);
		return  toWSPWorkCenter(pWorkCenter);
		
	}

	
	private PWorkCenter toDBPWorkCenter(WSPWorkCenter wsPWorkCenter,PWorkCenter pWorkCenter) throws Exception
	{
	
		PWorkCenter dbPWorkCenter = (PWorkCenter)BeanUtil.shallowCopy(wsPWorkCenter, PWorkCenter.class, pWorkCenter);

		dbPWorkCenter.setCompany(securityUtils.getCurrentDBUser().getCompany());
		dbPWorkCenter.setUsers(securityUtils.getCurrentDBUser());
		dbPWorkCenter.setCreationTime(new Date());
		
		
		return dbPWorkCenter;
	}
	
	private WSPWorkCenter toWSPWorkCenter(PWorkCenter pWorkCenter) throws Exception
	{
		WSPWorkCenter pc = (WSPWorkCenter)BeanUtil.shallowCopy(pWorkCenter, WSPWorkCenter.class, null);
		if(pWorkCenter.getCompany()!=null)
		{
			pc.setCompanyId(pWorkCenter.getCompany().getIdCompany());
		}
		if(pWorkCenter.getUsers()!=null)
		{
			pc.setCreator(pWorkCenter.getUsers().getName());
		}
		return pc;
	}

}
package com.jms.controller.store;


import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import com.jms.domain.db.SBin;
import com.jms.domain.db.SMaterial;
import com.jms.domain.db.SMaterialCategory;
import com.jms.domain.db.SMaterialPic;
import com.jms.domain.db.SMaterialTypeDic;
import com.jms.domain.db.SPic;
import com.jms.domain.db.SPoMaterial;
import com.jms.domain.db.SUnitDic;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSPOMaterialObj;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.WSTableData;
import com.jms.domain.ws.f.WSFCostCenter;
import com.jms.domain.ws.s.WSLotNo;
import com.jms.domain.ws.s.WSMaterial;
import com.jms.domain.ws.s.WSSpoMaterial;
import com.jms.file.FileMeta;
import com.jms.file.FileUploadService;
import com.jms.repositories.s.SMaterialCategoryRepository;
import com.jms.repositories.s.SMaterialPicRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.s.SMaterialTypeDicRepository;
import com.jms.repositories.s.SMtfMaterialRepository;
import com.jms.repositories.s.SPicRepository;
import com.jms.repositories.s.SSpoMaterialRepository;
import com.jms.repositories.s.SUnitDicRepository;
import com.jms.service.store.CostCenterService;
import com.jms.service.store.MaterialService;
import com.jms.service.store.SpoMaterialService;
import com.jms.web.security.SecurityUtils;

@RestController
@Transactional(readOnly = true)
public class MaterialController {

	@Autowired
	private MaterialService materialService;
	@Autowired private SMaterialTypeDicRepository sMaterialTypeDicRepository;
	@Autowired private SMaterialCategoryRepository sMaterialCategoryRepository;
	@Autowired private SUnitDicRepository sUnitDicRepository;
	@Autowired private SecurityUtils securityUtils;
	@Autowired private CostCenterService costCenterService;
	@Autowired private SMaterialRepository sMaterialRepository;
	@Autowired private SSpoMaterialRepository sSpoMaterialRepository;
	@Autowired private SpoMaterialService spoMaterialService;
	@Autowired private SMtfMaterialRepository sMtfMaterialRepository;
    @Value("${filePath}") private String filePath;
	@Autowired private FileUploadService fileUploadService;
	@Autowired private SPicRepository sPicRepository;
	@Autowired private SMaterialPicRepository sMaterialPicRepository;

	
	@Transactional(readOnly = false)
	@RequestMapping(value = "/s/saveMaterial", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public WSMaterial saveWSMaterial(@RequestBody WSMaterial wsMaterial) throws Exception {
		return materialService.saveMaterial(wsMaterial);
	}

	
	@Transactional(readOnly = false)
	@RequestMapping(value = "/s/deleteMaterial", method = RequestMethod.GET)
	public Valid deleteMaterial(@RequestParam("materialId") Long materialId) {
		return materialService.deleteMaterial(materialId);

	}
	

	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/findMaterial", method = RequestMethod.GET)
	public WSMaterial findWSMaterial(@RequestParam("materialId") Long materialId) throws Exception {
		return materialService.findMaterial(materialId);

	}

	
	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/materialList", method = RequestMethod.POST)
	public WSTableData getMaterialList(@RequestParam(value = "materialTypeId", required = false) Long materialTypeId,
			@RequestParam(value = "q", required = false) String q, @RequestParam Integer draw,
			@RequestParam Integer start, @RequestParam Integer length) throws Exception {

		Long companyId = securityUtils.getCurrentDBUser().getCompany().getIdCompany();
		List<WSMaterial> wsMaterials = materialService.getMaterials(companyId, materialTypeId, q);
		List<String[]> lst = new ArrayList<String[]>();
		int end = 0;
		if (wsMaterials.size() < start + length)
			end = wsMaterials.size();
		else
			end = start + length;
		for (int i = start; i < end; i++) {
			WSMaterial w = wsMaterials.get(i);
			String[] d = { w.getPno(), w.getDes(), w.getRev(), w.getsMaterialTypeDic(), w.getMaterialCategory(),
					w.getsUnitDicByUnitInf(), w.getsStatusDic(), "" + w.getIdMaterial() };
			lst.add(d);

		}
		WSTableData t = new WSTableData();
		t.setDraw(draw);
		t.setRecordsTotal(wsMaterials.size());
		t.setRecordsFiltered(wsMaterials.size());
		t.setData(lst);
		return t;
	}
	

	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/getMaterialListObjs", method = RequestMethod.GET)
	public List<WSSelectObj> getMaterialListObjs(
			@RequestParam(value = "q", required = false) String q,@RequestParam(value = "types", required = false) List<Long> types) throws Exception {
		Long companyId = securityUtils.getCurrentDBUser().getCompany().getIdCompany();
		List<WSSelectObj> ws =new ArrayList<WSSelectObj>();
		List<WSMaterial> wsMaterials;
		if(types==null)
		{
			 wsMaterials = materialService.getMaterials(companyId, null, q);	
		}
		else
		{
			 wsMaterials = materialService.getMaterialsByTypesAndQ(companyId, types, q);
		
		}
		
		
		for (WSMaterial m:wsMaterials) {
		
			WSSelectObj w = new WSSelectObj(m.getIdMaterial(),m.getPno()+"_"+m.getRev()+"_"+m.getDes());
			ws.add(w);
		}

		return ws;
	}

	

	// 物料大类
	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/materialTypes", method = RequestMethod.GET)
	public List<WSSelectObj> findMaterialTypes() {
		List<WSSelectObj> wso = new ArrayList<WSSelectObj>();
		for (SMaterialTypeDic s : sMaterialTypeDicRepository.findAll()) {
			wso.add(new WSSelectObj(s.getId(), s.getName()));
		}
		return wso;
	}

	// 物料小类
	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/materialCategories", method = RequestMethod.GET)
	public List<WSSelectObj> findMateriaCategories() {
		List<WSSelectObj> wso = new ArrayList<WSSelectObj>();
		for (SMaterialCategory s : sMaterialCategoryRepository
				.findByIdCompany(securityUtils.getCurrentDBUser().getCompany().getIdCompany())) {
			wso.add(new WSSelectObj(s.getId(), s.getName()));
		}
		return wso;
	}

	
	// 物料Unit
	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/units", method = RequestMethod.GET)
	public List<WSSelectObj> findUnits() {
		List<WSSelectObj> wso = new ArrayList<WSSelectObj>();
		for (SUnitDic s : sUnitDicRepository.findAll()) {
			wso.add(new WSSelectObj(s.getId(), s.getName()));
		}
		return wso;
	}

	
	// costCenter
	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/costCenters", method = RequestMethod.GET)
	public List<WSSelectObj> findCostCenters() throws Exception {
		List<WSSelectObj> wso = new ArrayList<WSSelectObj>();
		for (WSFCostCenter s : costCenterService.getCostCenterList()) {
			wso.add(new WSSelectObj(s.getIdCostCenter(), s.getDes()));
		}
		return wso;
	}

	
	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/materials", method = RequestMethod.GET)
	public List<WSSelectObj> findMaterials(@RequestParam(required=false, value="typeId") Long typeId) {
		List<WSSelectObj> wso = new ArrayList<WSSelectObj>();
		List<SMaterial> sms;
		if(typeId!=null)
		{
			sms =sMaterialRepository
					.getByCompanyIdAndMaterialType(securityUtils.getCurrentDBUser().getCompany().getIdCompany(),typeId);
		}
		else
		{
			sms =sMaterialRepository
					.getByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		}
		for (SMaterial s : sms) {
			wso.add(new WSSelectObj(s.getIdMaterial(), s.getPno() + "-" + s.getDes() + "-" + s.getRev()));
		}
		return wso;
	}

	
	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/findPoMaterialsBySpoId", method = RequestMethod.GET)
	public List<WSPOMaterialObj> findPoMaterialsBySpoId(@RequestParam("spoId") Long spoId) {
		List<WSPOMaterialObj> wso = new ArrayList<WSPOMaterialObj>();
		for (SPoMaterial s : sSpoMaterialRepository.getBySpoId(spoId)) {
			Long qtyreceived = (s.getQtyReceived()==null)?0l:s.getQtyReceived();
			
			if(s.getQtyPo()>qtyreceived)
			{
				wso.add(new WSPOMaterialObj(s.getIdPoMaterial()+"_"+s.getSMaterial().getIdMaterial(),
						s.getSMaterial().getPno() + "-" + s.getSMaterial().getDes() + "-" + s.getSMaterial().getRev()));
			}
			
		}
		return wso;
	}

	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/findMaterialsBySpoMaterialId", method = RequestMethod.GET)
	public WSSpoMaterial findMaterialsBySpoMaterialId(@RequestParam("spoMaterialId") Long spoMaterialId)
			throws Exception {
		SPoMaterial spoMaterial = sSpoMaterialRepository.findOne(spoMaterialId);
		return spoMaterialService.toWSSpoMaterial(spoMaterial);

	}

	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/findLotNos", method = RequestMethod.GET)
	public List<WSLotNo> findLotNos(@RequestParam("spoId") Long spoId, @RequestParam("materialId") Long materialId) {
		List<WSLotNo> wso = new ArrayList<WSLotNo>();
		for (String s : sMtfMaterialRepository.getLotNosBySpoIdAndMaterialId(spoId, materialId)) {
			wso.add(new WSLotNo(s, s));
		}
		return wso;
	}

	@Transactional(readOnly = true)
	@RequestMapping(value = "/s/findToBinsBySpoIdAndMaterialID", method = RequestMethod.GET)
	public List<WSSelectObj> findToBinsBySpoIdAndMaterialID(@RequestParam("spoId") Long spoId,
			@RequestParam("materialId") Long materialId) {
		List<WSSelectObj> wso = new ArrayList<WSSelectObj>();
		for (SBin s : sMtfMaterialRepository.getToBinsBySpoIdAndMaterialId(spoId, materialId)) {
			wso.add(new WSSelectObj(s.getIdBin(), s.getBin()));
		}
		return wso;
	}

	@Transactional(readOnly = false)
	@RequestMapping(value = "/s/uploadMaterialImage", method = RequestMethod.POST)
	public FileMeta uploadFile(@RequestParam("materialId") Long materialId, MultipartHttpServletRequest request,
			HttpServletResponse response) {
		FileMeta fileMeta = new FileMeta();
		if (request.getFileNames().hasNext()) {
			fileMeta = fileUploadService.upload(request, response,false);
			SPic spic = new SPic();
			spic.setOrgFilename(fileMeta.getOrgName());
			spic.setFilename(fileMeta.getFileName());
			spic.setUsers(securityUtils.getCurrentDBUser());
			spic = sPicRepository.save(spic);
			fileMeta.setFileId(spic.getId());
			fileMeta.setBytes(null);
			if (materialId != null && !materialId.equals(0l)) {
				SMaterial sMaterial = sMaterialRepository.findOne(materialId);
				SMaterialPic sp;
				List<SMaterialPic> mps = sMaterialPicRepository.findBySMaterialId(sMaterial.getIdMaterial());
				if (mps != null && !mps.isEmpty()) {
					sp = mps.get(0);
				} else {
					sp = new SMaterialPic();
					sp.setSMaterial(sMaterial);
				}
				sp.setSPic(spic);
				sMaterialPicRepository.save(sp);
			}

		}
		return fileMeta;
	}

	@Transactional(readOnly = true)
	@RequestMapping(value="s/checkPno", method=RequestMethod.GET)
	public Valid checkPno(@RequestParam("pno") String pno,@RequestParam(required=false,value="idMaterial") Long idMaterial) throws Exception {
		Boolean returnVal= materialService.checkPno(pno,idMaterial);
		Valid valid = new Valid();
		valid.setValid(returnVal);
		return valid;
	}


}package com.jms.service.store;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.NotificationMethodEnum;
import com.jms.domain.db.EventReceiver;
import com.jms.domain.db.PMr;
import com.jms.domain.db.SBin;
import com.jms.domain.db.SInventory;
import com.jms.domain.db.SMaterialBins;
import com.jms.domain.db.SMaterialBinsId;
import com.jms.domain.db.SMtf;
import com.jms.domain.db.SMtfMaterial;
import com.jms.domain.db.SMtfNo;
import com.jms.domain.db.SPo;
import com.jms.domain.db.SPoMaterial;
import com.jms.domain.db.SSo;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.s.WSSMtf;
import com.jms.domain.ws.s.WSSMtfMaterial;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.p.PBomRepository;
import com.jms.repositories.p.PCPpRepository;
import com.jms.repositories.p.PMrRepository;
import com.jms.repositories.p.PStatusDicRepository;
import com.jms.repositories.s.SBinRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMaterialBinsRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.s.SMtfMaterialRepository;
import com.jms.repositories.s.SMtfNoRepository;
import com.jms.repositories.s.SMtfRepository;
import com.jms.repositories.s.SMtfTypeDicRepository;
import com.jms.repositories.s.SSoRepository;
import com.jms.repositories.s.SSpoMaterialRepository;
import com.jms.repositories.s.SSpoRepository;
import com.jms.repositories.s.SStatusDicRepository;
import com.jms.repositories.s.SStkRepository;
import com.jms.repositories.system.EventReceiverRepository;
import com.jms.repositories.user.UsersRepository;
import com.jms.system.INotificationService;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class MtfService {

	private static final Logger logger = LogManager.getLogger(MtfService.class.getCanonicalName());

	@Autowired
	private SStatusDicRepository sStatusDicRepository;
	@Autowired
	private SMtfMaterialRepository sMtfMaterialRepository;
	@Autowired
	private MtfMaterialService mtfMaterialService;

	@Autowired
	private SMtfRepository sMtfRepository;
	@Autowired
	private SecurityUtils securityUtils;

	@Autowired
	private UsersRepository usersRepository;
	@Autowired
	private SStkRepository sStkRepository;
	@Autowired
	private SMtfTypeDicRepository sMtfTypeDicRepository;
	@Autowired
	private SInventoryRepository sInventoryRepository;
	@Autowired
	private SBinRepository sBinRepository;
	@Autowired
	private SMaterialRepository sMaterialRepository;
	@Autowired
	private SSpoMaterialRepository sSpoMaterialRepository;
	@Autowired
	private SSoRepository sSoRepository;
	@Autowired
	private SMtfNoRepository sMtfNoRepository;
	@Autowired
	private SMtfNoService sMtfNoService;
	
	@Autowired
	private SMaterialBinsRepository sMaterialBinsRepository;
	
	@Autowired
	private PBomRepository pBomRepository;
	@Autowired
	private SSpoRepository sSpoRepository;
	
	@Autowired
	private INotificationService notificationService;
	@Autowired
	private EventReceiverRepository eventReceiverRepository;
	
	@Autowired
	private  PCPpRepository pCPpRepository;
	@Autowired
	private PStatusDicRepository pStatusDicRepository;
	
	@Autowired
	private PMrRepository pMrRepository;
	
	
	//校验
	public Valid updateMtfStatus(WSSMtf wsSMtf)
	{
		Valid valid = new Valid();
		if(wsSMtf.getTypeId().intValue()==1) 
		{
			for (String k : wsSMtf.getSmtfItems().keySet()) {
				WSSMtfMaterial wm = wsSMtf.getSmtfItems().get(k);
				SMtfMaterial sMtfMaterial =sMtfMaterialRepository.findOne(wm.getIdMtfMaterial());
				sMtfMaterial.setSStatusDic(sStatusDicRepository.findOne(wm.getStatusId()));
				sMtfMaterialRepository.save(sMtfMaterial);
			}
	
		}
		else
		{
			valid.setValid(false);
		}
	
		valid.setValid(true);
		return valid;
		
	}


	public Valid saveMtf(WSSMtf wsSMtf) throws Exception {
		Valid valid = new Valid();
	
			Long smtfType = wsSMtf.getTypeId();
			SMtf sMtf = new SMtf();
		//	if(wsSMtf.getTypeId())

			sMtf = toDBMtf(wsSMtf, sMtf);
			
			sMtf = sMtfRepository.save(sMtf);
			boolean toIQC = false;
			boolean finishIQC=true;
			boolean savePmr = wsSMtf.isSavePmr();
		
            int i=0;
            SMtf orgSmtf=null;
			for (String k : wsSMtf.getSmtfItems().keySet()) {
				i++;

				WSSMtfMaterial wm = wsSMtf.getSmtfItems().get(k);
				switch (smtfType.intValue()) {
				case 1: // 来料入检
				{
					SBin sbin =sBinRepository.findOne(wm.getToBinId());
					if(i==1)
					{
						if(sbin.getBin().equals("IQC"))
						{
							toIQC=true;
						}
						else
						{
							wm.setQtyChecked(wm.getQty());
						}
					}
			
					SPoMaterial spoMaterial = sSpoMaterialRepository.getOne(wm.getPoMaterialId());
					//logger.debug("toStkId: " + wsSMtf.getToStkId());
					updateMaterialBins(spoMaterial.getSMaterial().getIdMaterial(),wm.getToBinId(),wsSMtf.getToStkId());
					SInventory sToInventory=null;
					SInventory sFromInventory=null;
					if (wm.getLotNo() != null&&!wm.getLotNo().isEmpty()) {
						sToInventory = sInventoryRepository.findByMaterialIdAndBinIdAndLotNo(wm.getMaterialId(),
								wm.getToBinId(), wm.getLotNo());
						sFromInventory= sInventoryRepository.findByMaterialIdAndBinIdAndLotNo(wm.getMaterialId(),
								wm.getFromBinId(), wm.getLotNo());
						
					} else {
						List<SInventory> sToInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getToBinId());
				        if(sToInventorys!=null&&!sToInventorys.isEmpty())
				        {
				        	sToInventory = sToInventorys.get(0);
				        }
				        
						List<SInventory> sFromInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getFromBinId());
				        if(sFromInventorys!=null&&!sFromInventorys.isEmpty())
				        {
				        	sFromInventory = sFromInventorys.get(0);
				        }
					}
					if (sToInventory == null) {
					
						sToInventory = new SInventory();
						sToInventory.setCreationTime(new Date());
						sToInventory.setLotNo(wm.getLotNo());
						sToInventory.setQty(wm.getQty());
						sToInventory.setUQty(wm.getUqty());
						sToInventory.setSBin(sbin);
						sToInventory.setSMaterial(spoMaterial.getSMaterial());
    					logger.debug(" save to new bin: " +sbin.getBin() +", qty:" + wm.getQty());
						sInventoryRepository.save(sToInventory);
	
					} else {
						sToInventory.setQty(sToInventory.getQty() + wm.getQty());
						logger.debug(" save to  bin: " +sbin.getBin() +", qty:" + wm.getQty());
						sInventoryRepository.save(sToInventory);
					}
//					
					
					if (sFromInventory == null) {
						sFromInventory = new SInventory();
						sFromInventory.setCreationTime(new Date());
						sFromInventory.setLotNo(wm.getLotNo());
						sFromInventory.setQty(0-wm.getQty());
						sFromInventory.setUQty(wm.getUqty());
						sFromInventory.setSBin(sBinRepository.findOne(wm.getFromBinId()));
						sFromInventory.setSMaterial(spoMaterial.getSMaterial());
					} else {
						sFromInventory.setQty(sFromInventory.getQty() - wm.getQty());
					}
					sInventoryRepository.save(sFromInventory);
				
					

					SPoMaterial sPoMaterial = sSpoMaterialRepository.getOne(wm.getPoMaterialId());
					if (sPoMaterial.getQtyReceived() != null) {
						sPoMaterial.setQtyReceived(sPoMaterial.getQtyReceived() + wm.getQty());

					} else {
						sPoMaterial.setQtyReceived(wm.getQty());
					}
					sSpoMaterialRepository.save(sPoMaterial);
					// update SPo
					wm.setIdMt(sMtf.getIdMt());
					mtfMaterialService.saveMtfMaterial(wm);
					
					break;
				}

				case 2: // 采购退货
				{
					
					updateMaterialBins(wm.getMaterialId(),wm.getFromBinId(),wsSMtf.getFromStkId());
				//	logger.debug("采购退货。。。");
					SInventory sFromInventory=null;
					SInventory sToInventory=null;
				//	logger.debug("material Id: " + wm.getMaterialId() +", binId: " + wm.getFromBinId() +", " +wm.getLotNo());
					
					if(wm.getLotNo()!=null&&!wm.getLotNo().isEmpty())
					{
						
					//	logger.debug("mat no:" +wm.getMaterialId() +", lot no " + wm.getLotNo() + " wm qty: " + wm.getQty());
						sFromInventory = sInventoryRepository.findByMaterialIdAndBinIdAndLotNo(wm.getMaterialId(),
								wm.getFromBinId(),wm.getLotNo());
						sFromInventory.setQty(sFromInventory.getQty() - wm.getQty());
						sInventoryRepository.save(sFromInventory);
						
						sToInventory = sInventoryRepository.findByMaterialIdAndBinIdAndLotNo(wm.getMaterialId(),
								wm.getToBinId(),wm.getLotNo());
						if(sToInventory==null)
						{
							sToInventory = new SInventory();
							sToInventory.setCreationTime(new Date());
							sToInventory.setLotNo(wm.getLotNo());
							sToInventory.setQty(wm.getQty());
							sToInventory.setUQty(wm.getUqty());
							sToInventory.setSBin(sBinRepository.findOne(wm.getToBinId()));
							sToInventory.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));
							sToInventory.setQty( wm.getQty());
							sInventoryRepository.save(sToInventory);
						}
						else
						{	
							sToInventory.setQty(sToInventory.getQty() + wm.getQty());
					    	sInventoryRepository.save(sToInventory);
							
						}
					
						
						
					}
					else
					{
					//	sInventory = sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(),
					//			wm.getFromBinId());
						
						List<SInventory> sFromInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getFromBinId());
				        if(sFromInventorys!=null&&!sFromInventorys.isEmpty())
				        {
				        	
				        	for(SInventory s :sFromInventorys)
				        	{
				        	
				        		if(s.getQty()>= wm.getQty())
				        		{
				        			s.setQty(s.getQty() - wm.getQty());
									sInventoryRepository.save(s);
									break;
				        		}
				        		else
				        		{	
				        			wm.setQty(wm.getQty()-s.getQty());
				        			s.setQty(0l);
									sInventoryRepository.save(s);
				        		}
								
				        	}
				        }
				        
				        
				    	List<SInventory> sToInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getToBinId());
				    	   if(sToInventorys!=null&&!sToInventorys.isEmpty())
					        {
				    		   sToInventory = sToInventorys.get(0);
				    		   sToInventory.setQty(sToInventory.getQty() + wm.getQty());
						       sInventoryRepository.save(sToInventory);
					        }
				    	   else{

								sToInventory = new SInventory();
								sToInventory.setCreationTime(new Date());
								sToInventory.setLotNo(wm.getLotNo());
								sToInventory.setQty(wm.getQty());
								sToInventory.setUQty(wm.getUqty());
								sToInventory.setSBin(sBinRepository.findOne(wm.getToBinId()));
								sToInventory.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));
//								sToInventory.setQty(wm.getQty());
								sInventoryRepository.save(sToInventory);
				    		   
				    	   }
						
					}
				
					SPoMaterial sPoMaterial = sSpoMaterialRepository.getOne(wm.getPoMaterialId());
					if (sPoMaterial.getQtyReceived() != null) {
						sPoMaterial.setQtyReceived(sPoMaterial.getQtyReceived() - wm.getQty());

					}

					sSpoMaterialRepository.save(sPoMaterial);
					// update SPo
					
					wm.setIdMt(sMtf.getIdMt());
					mtfMaterialService.saveMtfMaterial(wm);
					break;
				}

			    case 3: // 手动流转
				case 4: // 工单流转
				{
					wm.setIdMt(sMtf.getIdMt());
					mtfMaterialService.saveMtfMaterial(wm);
					updateMaterialBins(wm.getMaterialId(),wm.getFromBinId(),wsSMtf.getFromStkId());
					updateMaterialBins(wm.getMaterialId(),wm.getToBinId(),wsSMtf.getToStkId());
                    logger.debug(" case 3 or 4:  to:  wm.getToBinId(): " +  wm.getToBinId() +", from :" + wm.getFromBinId() +", material id: " + wm.getMaterialId() +", qty: " +wm.getQty());
					SInventory to=null;
					List<SInventory> sInventorys=null;
					if(wm.getLotNo()!=null)
					{
						logger.debug("lotNo: " + wm.getLotNo());
						SInventory sInventory=sInventoryRepository.findByMaterialIdAndBinIdAndLotNo(wm.getMaterialId(), wm.getToBinId(), wm.getLotNo());
						if(sInventory!=null)
						{
							logger.debug("find from inv: " + sInventory.getIdInv());
							sInventorys = new ArrayList<SInventory>();
							sInventorys.add(sInventory);
						}
					}
					else
					{
						 sInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getToBinId());
					}
				
			        if(sInventorys!=null&&!sInventorys.isEmpty())
			        {
			        	to = sInventorys.get(0);
			        	logger.debug("set to: " +to.getQty() + wm.getQty() );
						to.setQty(to.getQty() + wm.getQty());
			        }

			        else{
						 logger.debug("can not find inventory, so create new one");
						to = new SInventory();
						to.setCreationTime(new Date());
						to.setLotNo(wm.getLotNo());
						to.setQty(wm.getQty());
						to.setUQty(wm.getUqty());
						to.setSBin(sBinRepository.findOne(wm.getToBinId()));
						to.setLotNo(wm.getLotNo());
						to.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));
					} 
			       // logger.debug("save to bin: " + to.getQty());
					sInventoryRepository.save(to);
					
					
					SInventory from=null;
					List<SInventory> fromInventorys= new ArrayList<SInventory>();;
					
					if(wm.getLotNo()!=null)
					{
						
						SInventory sInventory=sInventoryRepository.findByMaterialIdAndBinIdAndLotNo(wm.getMaterialId(), wm.getFromBinId(), wm.getLotNo());
						if(sInventory!=null)
						{
						    logger.debug("find from inv: "+ sInventory.getIdInv());	
							fromInventorys.add(sInventory);
						}
					}
					else
					{
						fromInventorys = sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getFromBinId());
					}
					
					
			        if(fromInventorys!=null&&!fromInventorys.isEmpty())
			        {
			       
						for(SInventory s:fromInventorys)
						{
                         if(s.getQty()>0)
                         {
                        	 logger.debug("sqty: " +s.getQty() +", wmqty: " +wm.getQty());
                        	 if(s.getQty()>= wm.getQty())
 			        		{
 			        			s.setQty(s.getQty() - wm.getQty());
 								sInventoryRepository.save(s);
 								wm.setQty(0l);
 								break;
 			        		}
 			        		else
 			        		{	
 			        			wm.setQty(wm.getQty()-s.getQty());
 			        			s.setQty(0l);
 								sInventoryRepository.save(s);
 			        		}
                         }
			        		
						}
						if(wm.getQty()>0)
						{
							SInventory first = fromInventorys.get(0);
							first.setQty(first.getQty()-wm.getQty());
							sInventoryRepository.save(first);
						}
					
			        }
			        else
					{
						logger.debug("找不到发料扣减仓位？？？？？");
						from = new SInventory();
						from.setCreationTime(new Date());
						from.setLotNo(wm.getLotNo());
						from.setQty(0-wm.getQty());
						from.setUQty(wm.getUqty());
						from.setSBin(sBinRepository.findOne(wm.getFromBinId()));
						// to.setSMaterial(spoMaterial.getSMaterial());
						from.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));
						sInventoryRepository.save(from);
					}
					
		
					break;
				}

				case 5: // 出货
				{
					SInventory fromInventory =sInventoryRepository.findOne(wm.getInventoryId());

					
			        if(fromInventory!=null)
			        {
			        	Long fromBinId = fromInventory.getSBin().getIdBin();
			        	wm.setFromBinId(fromBinId);

					//	logger.debug("matId: " +wm.getMaterialId() +", fromBinId: " +wm.getFromBinId() +", stkId:"+wsSMtf.getFromStkId());
						updateMaterialBins(wm.getMaterialId(),wm.getFromBinId(),wsSMtf.getFromStkId());
			        	fromInventory.setQty(fromInventory.getQty()-wm.getQty());
						sInventoryRepository.save(fromInventory);
		       
						SSo sSo = sSoRepository.getOne(wm.getSoId());
						long rvd=0l;
						if (sSo.getQtyDelivered() != null) {
							rvd = sSo.getQtyDelivered() + wm.getQty();

						} else {
							rvd =wm.getQty();
						}
						sSo.setQtyDelivered(rvd);
						if(rvd>=sSo.getQtySo()) //关闭销售单
						{
							sSo.setSStatusDic(sStatusDicRepository.findOne(15l)); //结束销售订单
						}

						sSoRepository.save(sSo);
	
						wm.setIdMt(sMtf.getIdMt());
						wm.setFromBinId(wm.getFromBinId());
						mtfMaterialService.saveMtfMaterial(wm);
						   SInventory to=null;
							
							List<SInventory> sInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getToBinId());
					        if(sInventorys!=null&&!sInventorys.isEmpty())
					        {
					        	to = sInventorys.get(0);
								to.setQty(to.getQty() + wm.getQty());
					        }

					        else{
							//	 logger.debug("can not find inventory by tobin, so create new one");
								to = new SInventory();
								to.setCreationTime(new Date());
								to.setLotNo(wm.getLotNo());
								to.setQty(wm.getQty());
								to.setUQty(wm.getUqty());
								to.setSBin(sBinRepository.findOne(wm.getToBinId()));
								// to.setSMaterial(spoMaterial.getSMaterial());
								to.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));
							} 
					       // logger.debug("save to bin: " + to.getQty());
							sInventoryRepository.save(to);
					
			        }
			        else
					{
			        	valid.setMsg("无库存，不能出货");
			        	//logger.debug("无库存，不能出货");
						break;
					}
					break;
				}

				
				case 6: // 销售退货
				{
					//logger.debug("material: " + wm.getMaterialId());
					updateMaterialBins(wm.getMaterialId(),wm.getToBinId(),wsSMtf.getToStkId());
					SInventory sToInventory=null;
					List<SInventory> sToInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getToBinId());
			        if(sToInventorys!=null&&!sToInventorys.isEmpty())
			        {
			        	sToInventory = sToInventorys.get(0);
			        	sToInventory.setQty(sToInventory.getQty() + wm.getQty());
			        }

			        else {
			        	sToInventory = new SInventory();
			        	sToInventory.setCreationTime(new Date());
			        	sToInventory.setQty(wm.getQty());
			        	sToInventory.setUQty(wm.getUqty());
			        	sToInventory.setSBin(sBinRepository.findOne(wm.getToBinId()));
			        	sToInventory.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));

					}
					sInventoryRepository.save(sToInventory);
					
					
					SInventory from=null;
					List<SInventory> fromInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getFromBinId());
			        if(fromInventorys!=null&&!fromInventorys.isEmpty())
			        {
			       
			        	from = fromInventorys.get(0);
			        	from.setQty(from.getQty()-wm.getQty());
			        }
			        else
					{
						from = new SInventory();
						from.setCreationTime(new Date());
						from.setLotNo(wm.getLotNo());
						from.setQty(0-wm.getQty());
						from.setUQty(wm.getUqty());
						from.setSBin(sBinRepository.findOne(wm.getFromBinId()));
						// to.setSMaterial(spoMaterial.getSMaterial());
						from.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));
					}
					sInventoryRepository.save(from);
					
					
					
					
					
					
					SSo sSo = sSoRepository.getOne(wm.getSoId());
					if (sSo.getQtyDelivered() != null) {
						sSo.setQtyDelivered(sSo.getQtyDelivered() - wm.getQty());

					}

					sSoRepository.save(sSo);
					// update SSo
					
					
					wm.setIdMt(sMtf.getIdMt());
					mtfMaterialService.saveMtfMaterial(wm);
					break;
				}
				
				
				
				case 7: // 发料
				{
//					if(wm.getQty()==null)
//					{
//						continue;
//					}
					if(wm.getQty().equals(0l))
					{
						continue;
					}
				//	logger.debug(msg);
					updateMaterialBins(wm.getMaterialId(),wm.getFromBinId(),wsSMtf.getFromStkId());
				//	updateMaterialBins(wm.getMaterialId(),wm.getFromBinId(),wsSMtf.getFromStkId());
					wm.setIdMt(sMtf.getIdMt());
					mtfMaterialService.saveMtfMaterial(wm);
                    logger.debug(" case 7:  to:  wm.getToBinId(): " +  wm.getToBinId() +", from :" + wm.getFromBinId() +", material id: " + wm.getMaterialId() +", qty: " +wm.getQty());
					SInventory to=null;
					if(savePmr)
					{
						PMr pmr = new PMr();
						pmr.setFt(new Date());
						pmr.setSt(new Date());
						pmr.setPBom(pBomRepository.findOne(wm.getPwoBomId()));
						pmr.setPCPp(pCPpRepository.findOne(wm.getCppId()));
						pmr.setPStatusDic(pStatusDicRepository.findOne(10l));
						pmr.setQty(wm.getQty());
						pmr.setQtyDelivered(wm.getQty());
						pmr.setType(2l);
						pmr.setUser(securityUtils.getCurrentDBUser());
						pMrRepository.save(pmr);
					}
					List<SInventory> sInventorys= sInventoryRepository.findByMaterialIdAndBinId(wm.getMaterialId(), wm.getToBinId());
			        if(sInventorys!=null&&!sInventorys.isEmpty())
			        {
			        	to = sInventorys.get(0);
						to.setQty(to.getQty() + wm.getQty());
			        }

			        else{
						 
						to = new SInventory();
						to.setCreationTime(new Date());
						to.setLotNo(wm.getLotNo());
						to.setQty(wm.getQty());
						to.setUQty(wm.getUqty());
						to.setSBin(sBinRepository.findOne(wm.getToBinId()));
						// to.setSMaterial(spoMaterial.getSMaterial());
						to.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));
					} 
			      //  logger.debug("save to bin: " + to.getQty());
					sInventoryRepository.save(to);
				
					SInventory fromInventory= sInventoryRepository.findOne(wm.getInventoryId());
			        if(fromInventory!=null)
			        {
						fromInventory.setQty(fromInventory.getQty() - wm.getQty());
						sInventoryRepository.save(fromInventory);
			        }
			        else
					{
					}
					
					break;
				}

				
				case 8: //检验入库
				{

					
					updateMaterialBins(wm.getMaterialId(),wm.getFromBinId(),wsSMtf.getFromStkId());
					updateMaterialBins(wm.getMaterialId(),wm.getToBinId(),wsSMtf.getToStkId());
					
				//	logger.debug(" case 8:  to:  wm.getToBinId(): " +  wm.getToBinId() +", from :" + wm.getFromBinId() +", material id: " + wm.getMaterialId() +", qty: " +wm.getQty());
					SMtfMaterial orgsMtfMaterial = sMtfMaterialRepository.findOne(wm.getIdMtfMaterial());
					//orgsMtfMaterial.gets
					orgSmtf = orgsMtfMaterial.getSMtf();
					Long qtyChecked=(orgsMtfMaterial.getQty3417()==null)?0:orgsMtfMaterial.getQty3417(); //已检数量
					Long qty = orgsMtfMaterial.getQty(); //总数
					Long current_qty= wm.getQty();//此次检查数量
					orgsMtfMaterial.setQty3417(current_qty+qtyChecked);
				    if(current_qty+qtyChecked==qty)
				    {
				    	orgsMtfMaterial.setSStatusDic(sStatusDicRepository.findOne(2l));//已经检查(3是未检)
				    }
				    else
				    {
				    	finishIQC=false;
				    }
				    sMtfMaterialRepository.save(orgsMtfMaterial);
					wm.setIdMt(sMtf.getIdMt());
				    wm.setIdMtfMaterial(null);//如果不设为空，就是修改原有记录了！
					mtfMaterialService.saveMtfMaterial(wm);
    
					SInventory to = sInventoryRepository.findByMaterialIdAndBinIdAndLotNo(wm.getMaterialId(),
							wm.getToBinId(), wm.getLotNo());

			        if(to!=null)
			        {
						to.setQty(to.getQty() + wm.getQty());
			        }

			        else{
						 
						to = new SInventory();
						to.setCreationTime(new Date());
						to.setLotNo(wm.getLotNo());
						to.setQty(wm.getQty());
						to.setUQty(wm.getUqty());
						to.setSBin(sBinRepository.findOne(wm.getToBinId()));
						// to.setSMaterial(spoMaterial.getSMaterial());
						to.setSMaterial(sMaterialRepository.findOne(wm.getMaterialId()));
					} 
			       // logger.debug("save to bin: " + to.getQty());
					sInventoryRepository.save(to);
				
					SInventory from = sInventoryRepository.findByMaterialIdAndBinIdAndLotNo(wm.getMaterialId(),
							wm.getFromBinId(), wm.getLotNo());
					
			        if(from!=null)
			        {
			    
						from.setQty(from.getQty() - wm.getQty());
					
			        }
			        else
					{
						logger.debug("can not find inventory by  from bin, so create new one");
						throw new Exception("can not find inventory by  from bin, so create new one");
						//valid.setValid(false);
						//return valid;
					}
					sInventoryRepository.save(from);
					
					break;
				}
				

				}
			}
			
			
			if(smtfType.equals(1l)) //来料入检，检查SPO
			{
				//System.out.println("来料入检:");
				SPo spo = sSpoRepository.findOne(wsSMtf.getPoId());
				boolean isFinished = true;
				for(SPoMaterial sm:spo.getSPoMaterials())
				{
					long qtyPo = (sm.getQtyPo()==null)?0l:sm.getQtyPo();
					long qtyR= (sm.getQtyReceived()==null)?0l:sm.getQtyReceived();
					if(qtyPo>qtyR)
					{
						isFinished=false;
						break;
					}
				}
				
				if(isFinished)
				{
					spo.setSStatusDic(sStatusDicRepository.findOne(8l));//结束
					sSpoRepository.save(spo);
				}
				
				if(!toIQC)
				{
					if(sMtf!=null)
					{
						sMtf.setSStatusDic(sStatusDicRepository.findOne(5l));//完成
						sMtfRepository.save(sMtf);
					}
			
				}
				else //发消息
				{
					List<EventReceiver> eventReceivers = eventReceiverRepository.findByIdEventAndIdCompany(11l,securityUtils.getCurrentDBUser().getCompany().getIdCompany());
					if(eventReceivers!=null)
					{
						notificationService.createNotificationToReceivers(securityUtils.getCurrentDBUser().getCompany(), 11l, sMtf.getIdMt(), NotificationMethodEnum.sys, eventReceivers,new Date());
					}
			
				}
				
			}
			
			
			if(smtfType.equals(8l))
			{
				for(SMtfMaterial s: sMtfMaterialRepository.getBySmtfId(orgSmtf.getIdMt()))
				{
					if(s.getQty3417()==null||s.getQty3417()<s.getQty())
					{
						finishIQC=false;
						
						break;
					}
				}
				if(finishIQC)
				{
					orgSmtf.setSStatusDic(sStatusDicRepository.findOne(5l));//完成
					sMtfRepository.save(orgSmtf);
				}
				
			
			}
			
			valid.setValid(true);
			return valid;


	}

	public WSSMtf findSMtf(Long smtfId) throws Exception {
		SMtf sMtf = sMtfRepository.findOne(smtfId);
		return toWSSMtf(sMtf);
	}

	private SMtf toDBMtf(WSSMtf wsSMtf, SMtf sMtf) throws Exception {

		SMtf dbSMtf = (SMtf) BeanUtil.shallowCopy(wsSMtf, SMtf.class, sMtf);
		//logger.debug("mtNo: " +wsSMtf.getMtNo());
		if(wsSMtf.getMtNo()==null||wsSMtf.getMtNo().trim().isEmpty())
		{
			SMtfNo smtfNo = sMtfNoRepository.getByCompanyIdAndType(securityUtils.getCurrentDBUser().getCompany().getIdCompany(), wsSMtf.getTypeId());
		    long currentVal =smtfNo.getCurrentVal()+1;
		    smtfNo.setCurrentVal(currentVal);
		    sMtfNoRepository.save(smtfNo);
		    String mtNo = smtfNo.getPrefix()+String.format("%08d", currentVal);
		    dbSMtf.setMtNo(mtNo);
		}
				

		// System.out.println("mtNo: " + wsSMtf.getMtNo());
		dbSMtf.setCompany(securityUtils.getCurrentDBUser().getCompany());
		if (wsSMtf.getEmpMtUserId() != null) {
			dbSMtf.setUsersByEmpMt(usersRepository.findOne(wsSMtf.getEmpMtUserId()));
		}
		else
		{
			dbSMtf.setUsersByEmpMt(securityUtils.getCurrentDBUser());
		}
		
		if (wsSMtf.getFromStkId() != null) {
			dbSMtf.setSStkByFromStk(sStkRepository.findOne(wsSMtf.getFromStkId()));
		}
		if (wsSMtf.getToStkId() != null) {
			dbSMtf.setSStkByToStk(sStkRepository.findOne(wsSMtf.getToStkId()));
		}
	
		dbSMtf.setUsersByRecMt(securityUtils.getCurrentDBUser());
		
		if (wsSMtf.getStatusId() != null) {
			dbSMtf.setSStatusDic(sStatusDicRepository.findOne(wsSMtf.getStatusId()));
		}
		if (wsSMtf.getTypeId() != null) {
			dbSMtf.setSMtfTypeDic(sMtfTypeDicRepository.findOne(wsSMtf.getTypeId()));
		}
		dbSMtf.setCreationTime(new Date());
		/*
		 * if(!wsSMtf.getSmtfItems().isEmpty()) { for(WSSMtfMaterial m:
		 * wsSMtf.getSmtfItems().values()) { m.setIdMt(wsSMtf.getIdMt());
		 * mtfMaterialService.saveMtfMaterial(m); } }
		 */

		return dbSMtf;
	}
	
	/***收货单列表 po是激活状态***/
	public List<WSSelectObj> getIncomeList(Long smtfType)
	{
		List<WSSelectObj> ws = new ArrayList<WSSelectObj>();
		List<SMtf> smtfs = sMtfRepository.getSMtfByType(smtfType, securityUtils.getCurrentDBUser().getCompany().getIdCompany());
		for(SMtf smtf : smtfs)
		{
			    boolean active=false;
			    if(smtfType.equals(1l)) //来料入监
			    {
			    	
					if(smtf.getSStatusDic()==null)
		    		{
		    	   		WSSelectObj w = new WSSelectObj(smtf.getIdMt(),smtf.getMtNo());
						ws.add(w);
		    		}
			    }
//			    	if(!smtf.getSMtfMaterials().isEmpty())
//			    	{
//			    		SMtfMaterial sm = smtf.getSMtfMaterials().iterator().next();
//			    		if(sm.getSPoMaterial()!=null)
//			    		{
//			    			SPo spo = sm.getSPoMaterial().getSPo();
//			    			if(spo.getSStatusDic()!=null&&spo.getSStatusDic().getId().equals(11l))
//			    			{
//			    				active=true;
//			    			}
//			    		}
//			    	}
//			    	if(active)
//			    	{
//			    		if(smtf.getSStatusDic()==null)
//			    		{
//			    	   		WSSelectObj w = new WSSelectObj(smtf.getIdMt(),smtf.getMtNo());
//							ws.add(w);
//			    		}
//			 
//			    	}
//			    		
//			    }
		    else{
		    	  // System.out.println(" type: " + smtfType +"., companyId: " +  securityUtils.getCurrentDBUser().getCompany().getIdCompany());
				WSSelectObj w = new WSSelectObj(smtf.getIdMt(),smtf.getMtNo());
				ws.add(w);
			    }
	      
		
		}
		
		
		return ws;
	}

	private WSSMtf toWSSMtf(SMtf sMtf) throws Exception {
		WSSMtf wsSMtf = (WSSMtf) BeanUtil.shallowCopy(sMtf, WSSMtf.class, null);

		if (sMtf.getSMtfTypeDic() != null) {
			wsSMtf.setType(sMtf.getSMtfTypeDic().getName());
			wsSMtf.setTypeId(sMtf.getSMtfTypeDic().getIdMtfType());

		}
		if (sMtf.getSStatusDic() != null) {
			wsSMtf.setStatus(sMtf.getSStatusDic().getName());
			wsSMtf.setStatusId(sMtf.getSStatusDic().getId());
		}
		if (sMtf.getSStkByFromStk() != null) {
			wsSMtf.setFromStk(sMtf.getSStkByFromStk().getStkName());
			wsSMtf.setFromStkId(sMtf.getSStkByFromStk().getId());
		}
		if (sMtf.getSStkByToStk() != null) {
			wsSMtf.setToStk(sMtf.getSStkByToStk().getStkName());
			wsSMtf.setToStkId(sMtf.getSStkByToStk().getId());
		}
		if (sMtf.getUsersByEmpMt() != null) {
			wsSMtf.setEmpMtUser(sMtf.getUsersByEmpMt().getName());
			wsSMtf.setEmpMtUserId(sMtf.getUsersByEmpMt().getIdUser());
		}
		if (sMtf.getUsersByRecMt() != null) {
			wsSMtf.setRecMtUser(sMtf.getUsersByRecMt().getName());
			wsSMtf.setRecMtUserId(sMtf.getUsersByRecMt().getIdUser());
		}
		for (SMtfMaterial s : sMtfMaterialRepository.getBySmtfId(sMtf.getIdMt())) {
			wsSMtf.getSmtfItems().put("item" + s.getIdMtfMaterial(), mtfMaterialService.toWSSMtfMaterial(s));
			if(s.getSPoMaterial()!=null)
			{
				
				wsSMtf.setCoCompanyId(s.getSPoMaterial().getSPo().getSCompanyCo().getId());
				wsSMtf.setPoId(s.getSPoMaterial().getSPo().getIdPo());
				//break;
			}
			if(s.getSSo()!=null)
			{
				wsSMtf.setCoCompanyId(s.getSSo().getSCompanyCo().getId());
				wsSMtf.setCoOrderNo(s.getSSo().getCoOrderNo());
				//wsSMtf.set
			}
		}
	   // wsSMtf.setCoCompanyId(coCompanyId);
		// wsSMtf.setma
		//System.out.println("mtNo: " + wsSMtf.getMtNo());

		return wsSMtf;
	}
	
	private void updateMaterialBins(Long idMaterial,Long idBin,Long idStk)
	{
		
		SMaterialBinsId id = new SMaterialBinsId();
		id.setIdBin(idBin);
		id.setIdMaterial(idMaterial);
		SMaterialBins sMaterialBins =sMaterialBinsRepository.findOne(id);
		if(sMaterialBins==null)
		{
			sMaterialBins = new SMaterialBins();
			sMaterialBins.setId(id);
			sMaterialBins.setIdStk(idStk);
			sMaterialBins.setIdCompany(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
			sMaterialBinsRepository.save(sMaterialBins);
			
		}
	}
	

}
package com.jms.service.store;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.Config;
import com.jms.domain.db.SBin;
import com.jms.domain.db.SInventory;
import com.jms.domain.db.SMaterialBins;
import com.jms.domain.db.SStk;
import com.jms.domain.db.SStkTypeDic;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.s.WSBin;
import com.jms.domain.ws.s.WSInventory;
import com.jms.domain.ws.s.WSStk;
import com.jms.domain.ws.s.WSStkType;
import com.jms.repositories.s.SBinRepository;
import com.jms.repositories.s.SInventoryRepository;
import com.jms.repositories.s.SMaterialBinsRepository;
import com.jms.repositories.s.SStatusDicRepository;
import com.jms.repositories.s.SStkRepository;
import com.jms.repositories.s.SStkTypeDicRepository;
import com.jms.repositories.s.SYesOrNoDicRepository;
import com.jms.web.security.SecurityUtils;

@Service
@Transactional
public class SBinService {

	private static final Logger logger = LogManager.getLogger(SBinService.class.getCanonicalName());
	@Autowired
	private SStkRepository sStkRepository;
	@Autowired
	private SStatusDicRepository sStatusDicRepository;
	@Autowired
	private SStkTypeDicRepository sStkTypeDicRepository;

	@Autowired
	private SecurityUtils securityUtils;

	@Autowired
	private SYesOrNoDicRepository sYesOrNoDicRepository;

	@Autowired
	private SBinRepository sBinRepository;
	@Autowired
	private  SMaterialBinsRepository sMaterialBinsRepository;
	@Autowired
	private  SInventoryRepository sInventoryRepository;

	public Valid saveBin(WSBin wsBin) {

		SBin bin;
		// create
		if (wsBin.getIdBin() == null || wsBin.getIdBin().equals(0l)) {
			bin = new SBin();
		}
		// update
		else {
			bin = sBinRepository.findOne(wsBin.getIdBin());
		}
		bin.setBin(wsBin.getBin());
		bin.setDes(wsBin.getDes());
		bin.setSStk(sStkRepository.findOne(wsBin.getIdStk()));
		bin.setSYesOrNoDic(sYesOrNoDicRepository.findOne(wsBin.getIsReturnShelf()));
		bin.setSStatusDic(sStatusDicRepository.findOne(wsBin.getStatus()));

		sBinRepository.save(bin);
		Valid valid = new Valid();
		valid.setValid(true);
		return valid;
	}

	@Transactional(readOnly = true)
	public List<WSBin> findBins(Long idStk) {
		List<WSBin> wsBinList = new ArrayList<WSBin>();
		for (SBin bin : sBinRepository.getByIdStk(idStk)) {
			WSBin wsBin = new WSBin();
			wsBin.setBin(bin.getBin());
			wsBin.setDes(bin.getDes());
			wsBin.setIdBin(bin.getIdBin());
			wsBin.setIsReturnShelf(bin.getSYesOrNoDic().getId());
			wsBin.setIsReturnShelfName(bin.getSYesOrNoDic().getName());
			wsBin.setStatusName(bin.getSStatusDic().getName());
			wsBin.setStatus(bin.getSStatusDic().getId());
			wsBinList.add(wsBin);
		}

		return wsBinList;
	}

	@Transactional(readOnly = true)
	public List<WSSelectObj> findBinsObjs(Long idStk) {
		List<WSSelectObj> wsBinList = new ArrayList<WSSelectObj>();
		for (SBin bin : sBinRepository.getByIdStk(idStk)) {
			WSSelectObj o = new WSSelectObj(bin.getIdBin(), bin.getBin());
			wsBinList.add(o);
		}

		return wsBinList;
	}
	
	@Transactional(readOnly = true)
	public List<WSSelectObj> getBinsByStkIdAndMaterialIdAMethod(Long idStk,Long idMaterial) {
		List<WSSelectObj> wsBinList = new ArrayList<WSSelectObj>();
		List<SMaterialBins> sms =sMaterialBinsRepository.getByMaterialIdAndStkId(idMaterial, idStk);
		if(sms==null||sms.isEmpty())
		{
			for (SBin bin : sBinRepository.getByIdStk(idStk)) {
				WSSelectObj o = new WSSelectObj(bin.getIdBin(), bin.getBin());
				wsBinList.add(o);
			}
		}
		else
		{
			for(SMaterialBins s:sms)
			{
				Long binId = s.getId().getIdBin();
				SBin sbin=sBinRepository.findOne(binId);
				WSSelectObj o = new WSSelectObj(sbin.getIdBin(), sbin.getBin());
				wsBinList.add(o);
	
			}
			
		}
	
		return wsBinList;
	}
	
	
	
	
	@Transactional(readOnly = true)
	public List<WSSelectObj> getBinsByStkIdAndMaterialIdBMethod(Long idStk,Long idMaterial) {
		
		   // System.out.println("idStk: " + idStk +", idMat: " +idMaterial );
	    List<WSSelectObj> wsBinList = new ArrayList<WSSelectObj>();
		    SStk stk=sStkRepository.findOne(idStk);
		    if(stk.getSStkTypeDic().getIdStkType().equals(8l)) //CCA帐号
		    {
		    	for(SBin sbin:sBinRepository.getByIdStk(idStk))
		    	{
		    		WSSelectObj w = new WSSelectObj(sbin.getIdBin(),sbin.getBin());
		    		//System.out.println("idSBin: " + s.getSBin().getIdBin());
			    	wsBinList.add(w);
		    	}
		    	return wsBinList;
		    }
	
			Long companyId = securityUtils.getCurrentDBUser().getCompany().getIdCompany();
			List<SInventory> ls = sInventoryRepository.findInventoryByMaterialAndStk(idMaterial, companyId, idStk);
			Map<Long,Long> binMap = new HashMap<Long,Long>();
		    for(SInventory s: ls)
		    {
		    	if(!binMap.containsKey(s.getSBin().getIdBin()))
		    	{
		    		WSSelectObj w = new WSSelectObj(s.getSBin().getIdBin(),s.getSBin().getBin());
		    		//System.out.println("idSBin: " + s.getSBin().getIdBin());
			    	wsBinList.add(w);
			    	binMap.put(s.getSBin().getIdBin(), s.getSBin().getIdBin());
		    	}
		    
	
		    }
		return wsBinList;
	}
	
	
	@Transactional(readOnly = true)
	public List<WSSelectObj> getBinsByStkIdAndMaterialIdCMethod(Long idStk,Long idMaterial) {
		List<WSSelectObj> wsBinList = new ArrayList<WSSelectObj>();
		List<SMaterialBins> sms =sMaterialBinsRepository.getByMaterialIdAndStkId(idMaterial, idStk);
		if(sms==null||sms.isEmpty())
		{
//			logger.debug("get bins by stkId: " + idStk);
			for (SBin bin : sBinRepository.getByIdStk(idStk)) {
//				if(bin.getSYesOrNoDic().getId().equals(1l))
//				{
//			    	logger.debug("add bin: " + bin.getIdBin());
					WSSelectObj o = new WSSelectObj(bin.getIdBin(), bin.getBin());
					wsBinList.add(o);
//				}
			
			}
		}
		else
		{
			for(SMaterialBins s:sms)
			{
				Long binId = s.getId().getIdBin();
				SBin sbin=sBinRepository.findOne(binId);
//				if(sbin.getSYesOrNoDic().getId().equals(1l))
//				{
					WSSelectObj o = new WSSelectObj(sbin.getIdBin(), sbin.getBin());
					wsBinList.add(o);
//				}
	
			}
			
		}
	
		return wsBinList;
	}
	

	@Transactional(readOnly = true)
	public WSBin findBin(Long binId) {
		SBin bin = sBinRepository.findOne(binId);
		WSBin wsBin = new WSBin();
		if (bin == null)
			return wsBin;
		wsBin.setBin(bin.getBin());
		wsBin.setIdBin(bin.getIdBin());
		wsBin.setIsReturnShelf(bin.getSYesOrNoDic().getId());
		wsBin.setIsReturnShelfName(bin.getSYesOrNoDic().getName());
		wsBin.setStatusName(bin.getSYesOrNoDic().getName());
		wsBin.setStatus(bin.getSStatusDic().getId());
		wsBin.setDes(bin.getDes());
		return wsBin;
	}
	
	
//	@Transactional(readOnly = true)
//	public SBin findSystemBinByStkTypeId(Long stkTypeId) {
//		Long companyId = securityUtils.getCurrentDBUser().getCompany().getIdCompany();
//		return sBinRepository.getByCompanyIdAndStkType(companyId, stkTypeId);
//	}

	
	@Transactional(readOnly=true)
	public Boolean checkBinName(String binName, Long idBin) {

		//System.out.println("idBin: " + idBin);
		String dbBinName = "";
		// 已有修改
		Long companyId = securityUtils.getCurrentDBUser().getCompany().getIdCompany();
		if (idBin != null) {

			SBin bin =sBinRepository.findOne(idBin);
			dbBinName= bin.getBin();
			//System.out.println("dbBinName: " + dbBinName);
			if (binName != null && !binName.isEmpty()) {
				if (sBinRepository.getByCompanyIdAndBinName(companyId, binName) == null
						|| binName.equals(dbBinName)) {
					return true;
				} else {
					return false;
				}
			} else
				return true;
		} else {
			if (binName == null || binName.isEmpty())
				return false;
			else {
				if (sBinRepository.getByCompanyIdAndBinName(companyId, binName) == null) {
					return true;
				} else {
					return false;
				}
			}
		}
	}
	
	
	
	@Transactional(readOnly = true)
	public WSBin getSystemBinByStkTypeIdAndBinName(Long stkTypeId,String binName) {
		Long companyId = securityUtils.getCurrentDBUser().getCompany().getIdCompany();
		SBin bin = sBinRepository.getByCompanyIdAndStkTypeAndBinName(companyId, stkTypeId,binName);
		WSBin wsBin = new WSBin();
		if (bin == null)
			return wsBin;
		wsBin.setBin(bin.getBin());
		wsBin.setIdBin(bin.getIdBin());
		wsBin.setIsReturnShelf(bin.getSYesOrNoDic().getId());
		wsBin.setIsReturnShelfName(bin.getSYesOrNoDic().getName());
		wsBin.setStatusName(bin.getSYesOrNoDic().getName());
		wsBin.setStatus(bin.getSStatusDic().getId());
		return wsBin;
	}
	
	/*
	 * @Transactional(readOnly=false) public Valid invalidateBin(Long stkId) {
	 * 
	 * SStk stk = sStkRepository.findOne(stkId);
	 * stk.setSStatusDic(sStatusDicRepository.getBySourceAndName("s_stk","无效"));
	 * sStkRepository.save(stk); Valid valid = new Valid();
	 * valid.setValid(true); return valid; }
	 */
	
	@Transactional(readOnly = false)
	public Valid deleteBin(Long binId) {
		Valid valid = new Valid();
		SBin bin = sBinRepository.findOne(binId);
		if (!bin.getSInventories().isEmpty()) {
			valid.setValid(false);
		} else {
			sBinRepository.delete(binId);
			valid.setValid(true);
		}

		return valid;
	}

}
package com.jms.service.store;


import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.jms.domain.Config;
import com.jms.domain.db.SLevelDic;
import com.jms.domain.db.SMtfTypeDic;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.s.WSStkType;
import com.jms.repositories.s.SLevelDicRepository;
import com.jms.repositories.s.SMtfTypeDicRepository;


@Service
@Transactional
public class SMtfTypeDicService {

	private static final Logger logger = LogManager.getLogger(SMtfTypeDicService.class
			.getCanonicalName());
	@Autowired
	private SMtfTypeDicRepository sMtfTypeDicRepository;
	

	//导入物料流转类型
	public void loadMtfTypes() {
		
		for(String lvl: Config.sMtfTypes)
		{
			SMtfTypeDic s = new SMtfTypeDic();
			s.setName(lvl);
			sMtfTypeDicRepository.save(s);
		}
	}
	
	@Transactional(readOnly=true)
	public List<WSSelectObj> getMtfTypes()
	{
		List<WSSelectObj> ls = new ArrayList<WSSelectObj>();
		for(SMtfTypeDic s :sMtfTypeDicRepository.findAll())
		{
			WSSelectObj ws = new WSSelectObj();
			ws.setId(s.getIdMtfType());
			ws.setName(s.getName());
			ls.add(ws);
		}
		return ls;
	}


}
package com.jms.service.store;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.SMtfNo;
import com.jms.domain.db.SPo;
import com.jms.domain.db.SPoMaterial;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.s.WSSpo;
import com.jms.domain.ws.s.WSSpoMaterial;
import com.jms.domain.ws.s.WSSpoRemark;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.s.SAttachmentRepository;
import com.jms.repositories.s.SCompanyCoRepository;
import com.jms.repositories.s.SCurrencyTypeRepository;
import com.jms.repositories.s.SMtfNoRepository;
import com.jms.repositories.s.SSpoMaterialRepository;
import com.jms.repositories.s.SSpoRepository;
import com.jms.repositories.s.SStatusDicRepository;
import com.jms.repositories.s.SStermDicRepository;
import com.jms.repositories.s.SStkTypeDicRepository;
import com.jms.web.security.SecurityUtils;


@Service
@Transactional
public class SpoService {

	private static final Logger logger = LogManager.getLogger(SpoService.class
			.getCanonicalName());
	@Autowired
	private SSpoRepository sSpoRepository;
	@Autowired
	private SStatusDicRepository  sStatusDicRepository;
	@Autowired
	private SStkTypeDicRepository sStkTypeDicRepository;

	@Autowired 
	private  SecurityUtils securityUtils;
	@Autowired 
	private SStermDicRepository sStermDicRepository;
	@Autowired
	private SCompanyCoRepository sCompanyCoRepository;
	@Autowired
	private SCurrencyTypeRepository sCurrencyTypeRepository;
	@Autowired
	private MaterialService materialService;
	@Autowired
	private SpoMaterialService spoMaterialService;
	@Autowired
	private  SSpoMaterialRepository sSpoMaterialRepository;
	@Autowired private SAttachmentRepository sAttachmentRepository;
	@Autowired private SMtfNoRepository sMtfNoRepository;
	@Autowired private SMtfNoService sMtfNoService;
	

	public WSSpo saveSpo(WSSpo wsSpo) throws Exception {
		
		SPo spo;
		//create
		if(wsSpo.getIdPo()==null||wsSpo.getIdPo().equals(0l))
		{
			spo=new SPo();
			spo.setDateOrder(new Date());
		}
		//update
		else
		{
			spo = sSpoRepository.findOne(wsSpo.getIdPo());	
			if(!spo.getSPoMaterials().isEmpty())
			{
				
				//logger.debug("delete po material: " + spo.getSPoMaterials().size());
				for(SPoMaterial spoMaterial: spo.getSPoMaterials())
				{
					sSpoMaterialRepository.delete(spoMaterial);
				}
				//spo.getSPoMaterials().clear();
				
			}
			
		}
		spo.getSPoMaterials().clear();
		spo=toDBSpo(wsSpo,spo);
		SPo sp =sSpoRepository.save(spo);
		wsSpo.setIdPo(sp.getIdPo());
		for(String k: wsSpo.getPoItems().keySet())
		{
		//	logger.debug("save po material: " + k);
			WSSpoMaterial wm =wsSpo.getPoItems().get(k);
			wm.setLine(Long.parseLong(k.substring(4)));
		
			wm.setsPoId(sp.getIdPo());
			spoMaterialService.saveSpoMaterial(wm);
		}
		
		return wsSpo;
	}
	

	

	public Valid saveSpoRemark(WSSpoRemark wsSpoRemark) {
		
		SPo spo = sSpoRepository.findOne(wsSpoRemark.getIdPo());	
		spo.setRemark(wsSpoRemark.getRemark());
		if(wsSpoRemark.getStatusId()!=null)
		{
			spo.setSStatusDic(sStatusDicRepository.findOne(wsSpoRemark.getStatusId()));
		}

		sSpoRepository.save(spo);
		
		Valid valid = new Valid();
		valid.setValid(true);
		return valid;
	}
	
	
	public Valid deleteSpo(Long spoId) 
	{
		sSpoRepository.delete(spoId);
		Valid valid = new Valid();
		valid.setValid(true);
		return valid;
	}
	
	public WSSpo findSpo(Long spoId) throws Exception 
	{
		SPo spo = sSpoRepository.findOne(spoId);
		return toWSSpo(spo);
	}
	
	
	public List<WSSpo> findSpoList(Long companyId) throws Exception 
	{
		List<WSSpo> ws = new ArrayList<WSSpo>();
		for(SPo s : sSpoRepository.findByCompanyId(companyId))
		{
			ws.add(toWSSpo(s));
		}
		
		return ws;
	}
	public List<WSSelectObj> findSpoListByCodeCo(Long companyId,Long codeCo) throws Exception 
	{
		List<WSSelectObj> ws = new ArrayList<WSSelectObj>();
		for(SPo s : sSpoRepository.findByCompanyIdAndCodeCo(companyId,codeCo))
		{
			if(s.getSStatusDic()!=null&&s.getSStatusDic().getId().equals(11l)){ //激活状态
				WSSelectObj w = new WSSelectObj(s.getIdPo(),s.getCodePo());
				ws.add(w);
			}
		
		}
		
		return ws;
	}
	
	
	
	private SPo toDBSpo(WSSpo wsSpo,SPo spo) throws Exception
	{
	
		SPo dbSpo = (SPo)BeanUtil.shallowCopy(wsSpo, SPo.class, spo);
		if(wsSpo.getIdPo()==null||wsSpo.getIdPo().equals(0l))
		{
			if(wsSpo.getCodePo()==null)
			{
				SMtfNo smtfNo = sMtfNoRepository.getByCompanyIdAndType(securityUtils.getCurrentDBUser().getCompany().getIdCompany(), 10l);
			    long currentVal =smtfNo.getCurrentVal()+1;
			    smtfNo.setCurrentVal(currentVal);
			    sMtfNoRepository.save(smtfNo);
			    String codePo = smtfNo.getPrefix()+String.format("%08d", currentVal);
				dbSpo.setCodePo(codePo);
			}

		}
		
		
		
		if(wsSpo.getFreightTermId()!=null)
		{
			dbSpo.setSTermDicByFreightTerm(sStermDicRepository.findOne(wsSpo.getFreightTermId()));
		}
		if(wsSpo.getPaymentTermId()!=null)
		{
			dbSpo.setSTermDicByPaymentTerm(sStermDicRepository.findOne(wsSpo.getPaymentTermId()));
		}
		if(wsSpo.getsCompanyCoId()!=null)
		{
			dbSpo.setSCompanyCo(sCompanyCoRepository.findOne(wsSpo.getsCompanyCoId()));
		}
		if(wsSpo.getsCurrencyTypeId()!=null)
		{
			dbSpo.setSCurrencyType(sCurrencyTypeRepository.findOne(wsSpo.getsCurrencyTypeId()));
		}
		if(wsSpo.getsStatusId()!=null)
		{
			dbSpo.setSStatusDic(sStatusDicRepository.findOne(wsSpo.getsStatusId()));
		}
		if(wsSpo.getFileId()!=null)
		{
			dbSpo.setSAttachment(sAttachmentRepository.findOne(wsSpo.getFileId()));
		}
		dbSpo.setUsers(securityUtils.getCurrentDBUser());
		dbSpo.setCompany(securityUtils.getCurrentDBUser().getCompany());

		return dbSpo;
	}
	
	protected WSSpo toWSSpo(SPo spo) throws Exception
	{
		WSSpo wsSpo = (WSSpo)BeanUtil.shallowCopy(spo, WSSpo.class, null);
		if(spo.getSCompanyCo()!=null)
		{
			wsSpo.setsCompanyCoId(spo.getSCompanyCo().getId());
			wsSpo.setCodeCo(spo.getSCompanyCo().getCode());
		}
		if(spo.getSCurrencyType()!=null)
		{
			wsSpo.setsCurrencyType(spo.getSCurrencyType().getCurrency());
			wsSpo.setsCurrencyTypeId(spo.getSCurrencyType().getIdCurrencyType());
		}
		if(spo.getSTermDicByFreightTerm()!=null)
		{
			wsSpo.setFreightTerm(spo.getSTermDicByFreightTerm().getName());
			wsSpo.setFreightTermId(spo.getSTermDicByFreightTerm().getId());
		}
		if(spo.getSTermDicByPaymentTerm()!=null)
		{
			wsSpo.setPaymentTerm(spo.getSTermDicByPaymentTerm().getName());
			wsSpo.setPaymentTermId(spo.getSTermDicByPaymentTerm().getId());
		}
		if(spo.getSStatusDic()!=null)
		{
			wsSpo.setsStatus(spo.getSStatusDic().getName());
			wsSpo.setsStatusId(spo.getSStatusDic().getId());
		}
		if(spo.getSAttachment()!=null)
		{
			wsSpo.setFileId(spo.getSAttachment().getId());
			wsSpo.setFileName(spo.getSAttachment().getFilename());
		}
		for(SPoMaterial s: spo.getSPoMaterials())
		{
			wsSpo.getPoItems().put("item"+s.getLine(), spoMaterialService.toWSSpoMaterial(s));
		}
		wsSpo.setUserName(spo.getUsers().getName());
		return wsSpo;
	}


}
package com.jms.service.store;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jms.domain.db.SMaterial;
import com.jms.domain.db.SMtfNo;
import com.jms.domain.db.SPic;
import com.jms.domain.db.SPo;
import com.jms.domain.db.SPoMaterial;
import com.jms.domain.db.SSo;
import com.jms.domain.ws.Valid;
import com.jms.domain.ws.WSSelectObj;
import com.jms.domain.ws.s.WSMaterial;
import com.jms.domain.ws.s.WSSSoRemark;
import com.jms.domain.ws.s.WSSpo;
import com.jms.domain.ws.s.WSSpoMaterial;
import com.jms.domain.ws.s.WSSpoRemark;
import com.jms.domain.ws.s.WSSso;
import com.jms.domainadapter.BeanUtil;
import com.jms.repositories.s.SCompanyCoRepository;
import com.jms.repositories.s.SCurrencyTypeRepository;
import com.jms.repositories.s.SMaterialRepository;
import com.jms.repositories.s.SMtfNoRepository;
import com.jms.repositories.s.SSoRepository;
import com.jms.repositories.s.SSpoMaterialRepository;
import com.jms.repositories.s.SSpoRepository;
import com.jms.repositories.s.SStatusDicRepository;
import com.jms.repositories.s.SStermDicRepository;
import com.jms.repositories.s.SStkTypeDicRepository;
import com.jms.web.security.SecurityUtils;


@Service
@Transactional
public class SsoService {

	private static final Logger logger = LogManager.getLogger(SsoService.class
			.getCanonicalName());
	@Autowired
	private SSoRepository sSoRepository;
	@Autowired
	private SStatusDicRepository  sStatusDicRepository;
	@Autowired
	private SStkTypeDicRepository sStkTypeDicRepository;

	@Autowired 
	private  SecurityUtils securityUtils;
	@Autowired 
	private SStermDicRepository sStermDicRepository;
	@Autowired
	private SCompanyCoRepository sCompanyCoRepository;
	@Autowired
	private SCurrencyTypeRepository sCurrencyTypeRepository;
	@Autowired
	private MaterialService materialService;
	@Autowired
	private SpoMaterialService spoMaterialService;
	@Autowired
	private  SSpoMaterialRepository sSpoMaterialRepository;

	@Autowired
	private  SMaterialRepository sMaterialRepository;
	
	@Autowired private SMtfNoRepository sMtfNoRepository;
	@Autowired private SMtfNoService sMtfNoService;

	public Valid saveSSo(WSSso wsSso) throws Exception {
		
		SSo sso;
		//create
		if(wsSso.getIdSo()==null||wsSso.getIdSo().equals(0l))
		{
			sso=new SSo();
			sso.setDateOrder(new Date());
		}
		//update
		else
		{
			sso = sSoRepository.findOne(wsSso.getIdSo());	
		}
		
		sso=toDBSso(wsSso,sso);
		SSo sp =sSoRepository.save(sso);
		
		Valid valid = new Valid();
		valid.setValid(true);
		return valid;
	}
	

	
	
	public WSSso findSso(Long ssoId) throws Exception 
	{
		SSo sso = sSoRepository.findOne(ssoId);
		return toWSSso(sso);
	}
	
	


	
	private SSo toDBSso(WSSso wsSso,SSo sso) throws Exception
	{
	
		SSo dbSso = (SSo)BeanUtil.shallowCopy(wsSso, SSo.class, sso);
		
		if(wsSso.getIdSo()==null||wsSso.getIdSo().equals(0l))
	
		{
			if(wsSso.getCodeSo()==null)
			{
				SMtfNo smtfNo = sMtfNoRepository.getByCompanyIdAndType(securityUtils.getCurrentDBUser().getCompany().getIdCompany(), 11l);
			    long currentVal =smtfNo.getCurrentVal()+1;
			    smtfNo.setCurrentVal(currentVal);
			    sMtfNoRepository.save(smtfNo);
			    String codeSo = smtfNo.getPrefix()+String.format("%08d", currentVal);
			    dbSso.setCodeSo(codeSo);
			}

		}
		
		if(wsSso.getFreightTermId()!=null)
		{
			dbSso.setSTermDicByFreightTerm(sStermDicRepository.findOne(wsSso.getFreightTermId()));
		}
		if(wsSso.getPaymentTermId()!=null)
		{
			dbSso.setSTermDicByPaymentTerm(sStermDicRepository.findOne(wsSso.getPaymentTermId()));
		}
		if(wsSso.getsCompanyCoId()!=null)
		{
			dbSso.setSCompanyCo(sCompanyCoRepository.findOne(wsSso.getsCompanyCoId()));
		}
		
		if(wsSso.getsStatusId()!=null)
		{
			dbSso.setSStatusDic(sStatusDicRepository.findOne(wsSso.getsStatusId()));
		}
		if(wsSso.getMaterialId()!=null)
		{
			dbSso.setSMaterial(sMaterialRepository.findOne(wsSso.getMaterialId()));
		}
		dbSso.setUsers(securityUtils.getCurrentDBUser());
		dbSso.setCompany(securityUtils.getCurrentDBUser().getCompany());
		dbSso.setUPrice(wsSso.getUprice());
		

		return dbSso;
	}
	
	

	public Valid saveSoAutoRemark(WSSSoRemark wsSSoRemark) {
		
		SSo sso = sSoRepository.findOne(wsSSoRemark.getIdSo());	
		sso.setAutoRemark(wsSSoRemark.getAutoRemark());
		if(wsSSoRemark.getStatusId()!=null)
		{
			sso.setSStatusDic(sStatusDicRepository.findOne(wsSSoRemark.getStatusId()));
		}
	
		
		sSoRepository.save(sso);
		
		Valid valid = new Valid();
		valid.setValid(true);
		return valid;
	}
	
	protected WSSso toWSSso(SSo sso) throws Exception
	{
		WSSso wsSso = (WSSso)BeanUtil.shallowCopy(sso, WSSso.class, null);
		if(sso.getSCompanyCo()!=null)
		{
			wsSso.setsCompanyCoId(sso.getSCompanyCo().getId());
			wsSso.setCodeCo(sso.getSCompanyCo().getCode());
		}
	
		if(sso.getSTermDicByFreightTerm()!=null)
		{
			wsSso.setFreightTerm(sso.getSTermDicByFreightTerm().getName());
			wsSso.setFreightTermId(sso.getSTermDicByFreightTerm().getId());
		}
		if(sso.getSTermDicByPaymentTerm()!=null)
		{
			wsSso.setPaymentTerm(sso.getSTermDicByPaymentTerm().getName());
			wsSso.setPaymentTermId(sso.getSTermDicByPaymentTerm().getId());
		}
		if(sso.getSStatusDic()!=null)
		{
			wsSso.setsStatus(sso.getSStatusDic().getName());
			wsSso.setsStatusId(sso.getSStatusDic().getId());
		}
		if(sso.getSMaterial()!=null)
		{
			wsSso.setMaterialId(sso.getSMaterial().getIdMaterial());
		
		}
	
		wsSso.setUserName(sso.getUsers().getName());
		wsSso.setUprice(sso.getUPrice());
		return wsSso;
	}

	
	
	@Transactional(readOnly=true)
	public WSMaterial getMaterialBySoId(Long soId) throws Exception
	{	
		WSMaterial wsMc = new WSMaterial();
		SMaterial m = sSoRepository.findOne(soId).getSMaterial();
			if(m==null)
				return wsMc;
			wsMc = materialService.toWSMaterial(m); 
			if(!m.getSMaterialPics().isEmpty())
			{
				SPic spic = m.getSMaterialPics().iterator().next().getSPic();
				if(spic!=null)
				{
					wsMc.setFileName(spic.getFilename());
					wsMc.setFileId(spic.getId());
				}
				
			}
			return wsMc;

	}

	
	

}

	}


	
}