
public class WSSso {

    private Long idSo;
    private String codeCo;
    private String codeSo;
    private String coOrderNo;
    private Long sCompanyCoId;
    private Date dateOrder;
    private Long totalAmount;
    private Long taxRate;
    private Long exchange;
    private Long materialId;
    private String remark;
    private String freightTerm;
    private String paymentTerm;
    private Long freightTermId;
    private Long paymentTermId;
    private String sStatus;
    private Long sStatusId;
    private String userName;
    private Long userId;
    private Long qtySo;
    private Long uprice;
    private Date deliveryDate;
    private Long qtyDelivered;
}

@Transactional(readOnly = false)
@RequestMapping(value="/s/saveSo", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
public Valid saveSo(@RequestBody WSSso wsSso) throws Exception {
	return ssoService.saveSSo(wsSso);
}


@Transactional(readOnly = true)
@RequestMapping(value="/s/findSo", method=RequestMethod.GET)
public WSSso findWSSso(@RequestParam("soId") Long soId) throws Exception {
	return ssoService.findSso(soId);
}



@Transactional(readOnly = true)
@RequestMapping(value="/s/getSoList", method=RequestMethod.GET)
public WSTableData  getSoList( @RequestParam Integer draw,@RequestParam Integer start,@RequestParam Integer length) throws Exception {	   
	
	Long companyId = securityUtils.getCurrentDBUser().getCompany().getIdCompany();
	List<SSo> ssos = sSoRepository.findByCompanyId(companyId);
	List<String[]> lst = new ArrayList<String[]>();
	int end=0;
	if(ssos.size()<start + length)
		end =ssos.size();
	else
		end =start + length;
	for (int i = start; i < end; i++) {
		SSo w = ssos.get(i);
		String status=(w.getSStatusDic()==null)?"":w.getSStatusDic().getName();
		String unit =(w.getSMaterial().getSUnitDicByUnitInf()==null)?"":w.getSMaterial().getSUnitDicByUnitInf().getName();
		String[] d = {w.getCodeSo(),""+w.getDateOrder(),w.getUsers().getName(),w.getSCompanyCo().getCode(),status,w.getSMaterial().getPno(),w.getSMaterial().getRev(),w.getSMaterial().getDes(),unit,""+w.getQtySo(),""+w.getTotalAmount(),w.getDeliveryDate().toString(),""+w.getQtyDelivered(),""+w.getIdSo()};
		lst.add(d);

	}
	WSTableData t = new WSTableData();
	t.setDraw(draw);
	t.setRecordsTotal(ssos.size());
	t.setRecordsFiltered(ssos.size());
    t.setData(lst);
    return t;
}


public class WSPWorkCenter {
	
    private Long idWc;
    private Long companyId;
    private String workCenter;
    private Date creationTime;
    private String creator;
}



@Transactional(readOnly = false)
@RequestMapping(value="/p/saveWorkCenter", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
public WSPWorkCenter saveWSFCostCenter(@RequestBody WSPWorkCenter wsPWorkCenter) throws Exception {
	return workCenterService.saveWSPWorkCenter(wsPWorkCenter);
}


@Transactional(readOnly = false)
@RequestMapping(value="/p/deleteWorkCenter", method=RequestMethod.GET)
public Valid deleteWorkCenter(@RequestParam("workCenterId") Long workCenterId) {
	return workCenterService.deletePWorkCenter(workCenterId);
	
}


@Transactional(readOnly = true)
@RequestMapping(value="/p/findWorkCenter", method=RequestMethod.GET)
public WSPWorkCenter findCostCenter(@RequestParam("workCenterId") Long workCenterId) throws Exception {
	return workCenterService.findWSPworkCenter(workCenterId);
	
}



@Transactional(readOnly = true)
@RequestMapping(value="/p/workCenterList", method=RequestMethod.GET)
public WSTableData  getWorkCenterList(@RequestParam Integer draw,@RequestParam Integer start,@RequestParam Integer length) throws Exception {	   
	List<PWorkCenter> pWorkCenters =pWorkCenterRepository.getByCompanyId(securityUtils.getCurrentDBUser().getCompany().getIdCompany());
	List<String[]> lst = new ArrayList<String[]>();
	int end=0;
	if(pWorkCenters.size()<start + length)
		end =pWorkCenters.size();
	else
		end =start + length;
	for (int i = start; i < end; i++) {
		PWorkCenter w = pWorkCenters.get(i);
		String[] d = {w.getWorkCenter(),w.getCreationTime().toString(),""+w.getUsers().getName(),""+w.getIdWc()};
		lst.add(d);

	}
	WSTableData t = new WSTableData();
	t.setDraw(draw);
	t.setRecordsTotal(pWorkCenters.size());
	t.setRecordsFiltered(pWorkCenters.size());
    t.setData(lst);
    return t;
}



public class WSPWo {
	
    private Long idWo;
    private Long soId;
    private String so;
    private Long statusId;
    private String status;
    private String woNo;
    private Date creationTime;
    private String creator;
    private Long qty;
}



@Transactional(readOnly = false)
@RequestMapping(value="/p/saveWo", method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE)
public WSPWo saveWSWo(@RequestBody WSPWo wsPWo) throws Exception {
	return woService.saveWSPWo(wsPWo);
}


@Transactional(readOnly = false)
@RequestMapping(value="/p/deleteWo", method=RequestMethod.GET)
public Valid deleteWorkCenter(@RequestParam("woId") Long woId) {
	return woService.deletePWo(woId);
	
}


@Transactional(readOnly = true)
@RequestMapping(value="/p/findWo", method=RequestMethod.GET)
public WSPWo findWo(@RequestParam("woId") Long woId) throws Exception {
	return woService.findWSPwo(woId);
	
}



@Transactional(readOnly = true)
@RequestMapping(value="/p/getWoList", method=RequestMethod.GET)
public WSTableData  getWorkCenterList(@RequestParam Integer draw,@RequestParam Integer start,@RequestParam Integer length) throws Exception {	   
	//todo: how to get Wos????
	List<PWo> pWos =pWoRepository.findAll();
	
	List<String[]> lst = new ArrayList<String[]>();
	int end=0;
	if(pWos.size()<start + length)
		end =pWos.size();
	else
		end =start + length;
	for (int i = start; i < end; i++) {
		PWo w = pWos.get(i);
		String idSo=(w.getSSo()==null)?"":""+w.getSSo().getIdSo();
		String codeSo=(w.getSSo()==null)?"":w.getSSo().getCodeSo();
		String status=(w.getPStatusDic()==null)?"":w.getPStatusDic().getName();
		String[] d = {w.getWoNo(),idSo,codeSo,""+w.getQty(),w.getCreationTime().toString(),""+w.getUsers().getName(),status,""+w.getIdWo()};
		lst.add(d);

	}
	WSTableData t = new WSTableData();
	t.setDraw(draw);
	t.setRecordsTotal(pWos.size());
	t.setRecordsFiltered(pWos.size());
    t.setData(lst);
    return t;
}
