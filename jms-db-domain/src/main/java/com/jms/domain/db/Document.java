package com.jms.domain.db;
// Generated 2015-12-31 19:48:00 by Hibernate Tools 3.2.2.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Document generated by hbm2java
 */
@Entity
@Table(name="document"
    ,catalog="jms3"
)
public class Document  implements java.io.Serializable {


     private Long idDocument;
     private Users usersByModifyBy;
     private Users usersByCreator;
     private Document document;
     private Date creationTime;
     private Date modifyTime;
     private String relativePath;
     private String name;
     private String fileName;
     private String description;
     private Long size;
     private Set<Company> companiesForLicence = new HashSet<Company>(0);
     private Set<Document> documents = new HashSet<Document>(0);
     private Set<PPollItems> PPollItemses = new HashSet<PPollItems>(0);
     private Set<WTaskDoc> WTaskDocs = new HashSet<WTaskDoc>(0);
     private Set<Users> usersesForPic = new HashSet<Users>(0);
     private Set<WProjectDoc> WProjectDocs = new HashSet<WProjectDoc>(0);
     private Set<AApprovalProcess> AApprovalProcesses = new HashSet<AApprovalProcess>(0);
     private Set<Company> companiesForLogo = new HashSet<Company>(0);
     private Set<CScheduleDoc> CScheduleDocs = new HashSet<CScheduleDoc>(0);
     private Set<WIssueDoc> WIssueDocs = new HashSet<WIssueDoc>(0);
     private Set<Users> usersesForCv = new HashSet<Users>(0);

    public Document() {
    }

    public Document(Users usersByModifyBy, Users usersByCreator, Document document, Date creationTime, Date modifyTime, String relativePath, String name, String fileName, String description, Long size, Set<Company> companiesForLicence, Set<Document> documents, Set<PPollItems> PPollItemses, Set<WTaskDoc> WTaskDocs, Set<Users> usersesForPic, Set<WProjectDoc> WProjectDocs, Set<AApprovalProcess> AApprovalProcesses, Set<Company> companiesForLogo, Set<CScheduleDoc> CScheduleDocs, Set<WIssueDoc> WIssueDocs, Set<Users> usersesForCv) {
       this.usersByModifyBy = usersByModifyBy;
       this.usersByCreator = usersByCreator;
       this.document = document;
       this.creationTime = creationTime;
       this.modifyTime = modifyTime;
       this.relativePath = relativePath;
       this.name = name;
       this.fileName = fileName;
       this.description = description;
       this.size = size;
       this.companiesForLicence = companiesForLicence;
       this.documents = documents;
       this.PPollItemses = PPollItemses;
       this.WTaskDocs = WTaskDocs;
       this.usersesForPic = usersesForPic;
       this.WProjectDocs = WProjectDocs;
       this.AApprovalProcesses = AApprovalProcesses;
       this.companiesForLogo = companiesForLogo;
       this.CScheduleDocs = CScheduleDocs;
       this.WIssueDocs = WIssueDocs;
       this.usersesForCv = usersesForCv;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id_document", unique=true, nullable=false)
    public Long getIdDocument() {
        return this.idDocument;
    }
    
    public void setIdDocument(Long idDocument) {
        this.idDocument = idDocument;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="modify_by")
    public Users getUsersByModifyBy() {
        return this.usersByModifyBy;
    }
    
    public void setUsersByModifyBy(Users usersByModifyBy) {
        this.usersByModifyBy = usersByModifyBy;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="creator")
    public Users getUsersByCreator() {
        return this.usersByCreator;
    }
    
    public void setUsersByCreator(Users usersByCreator) {
        this.usersByCreator = usersByCreator;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="parent")
    public Document getDocument() {
        return this.document;
    }
    
    public void setDocument(Document document) {
        this.document = document;
    }
    @Temporal(TemporalType.DATE)
    @Column(name="creation_time", length=10)
    public Date getCreationTime() {
        return this.creationTime;
    }
    
    public void setCreationTime(Date creationTime) {
        this.creationTime = creationTime;
    }
    @Temporal(TemporalType.DATE)
    @Column(name="modify_time", length=10)
    public Date getModifyTime() {
        return this.modifyTime;
    }
    
    public void setModifyTime(Date modifyTime) {
        this.modifyTime = modifyTime;
    }
    
    @Column(name="relative_path", length=256)
    public String getRelativePath() {
        return this.relativePath;
    }
    
    public void setRelativePath(String relativePath) {
        this.relativePath = relativePath;
    }
    
    @Column(name="name", length=64)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="file_name", length=256)
    public String getFileName() {
        return this.fileName;
    }
    
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }
    
    @Column(name="description", length=256)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    @Column(name="size")
    public Long getSize() {
        return this.size;
    }
    
    public void setSize(Long size) {
        this.size = size;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="documentByLicence")
    public Set<Company> getCompaniesForLicence() {
        return this.companiesForLicence;
    }
    
    public void setCompaniesForLicence(Set<Company> companiesForLicence) {
        this.companiesForLicence = companiesForLicence;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="document")
    public Set<Document> getDocuments() {
        return this.documents;
    }
    
    public void setDocuments(Set<Document> documents) {
        this.documents = documents;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="document")
    public Set<PPollItems> getPPollItemses() {
        return this.PPollItemses;
    }
    
    public void setPPollItemses(Set<PPollItems> PPollItemses) {
        this.PPollItemses = PPollItemses;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="document")
    public Set<WTaskDoc> getWTaskDocs() {
        return this.WTaskDocs;
    }
    
    public void setWTaskDocs(Set<WTaskDoc> WTaskDocs) {
        this.WTaskDocs = WTaskDocs;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="documentByPic")
    public Set<Users> getUsersesForPic() {
        return this.usersesForPic;
    }
    
    public void setUsersesForPic(Set<Users> usersesForPic) {
        this.usersesForPic = usersesForPic;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="document")
    public Set<WProjectDoc> getWProjectDocs() {
        return this.WProjectDocs;
    }
    
    public void setWProjectDocs(Set<WProjectDoc> WProjectDocs) {
        this.WProjectDocs = WProjectDocs;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="document")
    public Set<AApprovalProcess> getAApprovalProcesses() {
        return this.AApprovalProcesses;
    }
    
    public void setAApprovalProcesses(Set<AApprovalProcess> AApprovalProcesses) {
        this.AApprovalProcesses = AApprovalProcesses;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="documentByLogo")
    public Set<Company> getCompaniesForLogo() {
        return this.companiesForLogo;
    }
    
    public void setCompaniesForLogo(Set<Company> companiesForLogo) {
        this.companiesForLogo = companiesForLogo;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="document")
    public Set<CScheduleDoc> getCScheduleDocs() {
        return this.CScheduleDocs;
    }
    
    public void setCScheduleDocs(Set<CScheduleDoc> CScheduleDocs) {
        this.CScheduleDocs = CScheduleDocs;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="document")
    public Set<WIssueDoc> getWIssueDocs() {
        return this.WIssueDocs;
    }
    
    public void setWIssueDocs(Set<WIssueDoc> WIssueDocs) {
        this.WIssueDocs = WIssueDocs;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="documentByCv")
    public Set<Users> getUsersesForCv() {
        return this.usersesForCv;
    }
    
    public void setUsersesForCv(Set<Users> usersesForCv) {
        this.usersesForCv = usersesForCv;
    }




}


