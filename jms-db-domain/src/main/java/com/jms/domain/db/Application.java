package com.jms.domain.db;
// Generated 2015-7-5 10:54:07 by Hibernate Tools 3.2.2.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Application generated by hbm2java
 */
@Entity
@Table(name="application"
    ,catalog="jms"
)
public class Application  implements java.io.Serializable {


     private Long idApplication;
     private SysDicD sysDicD;
     private Application application;
     private ApprovalProcess approvalProcess;
     private Users users;
     private Date startTime;
     private Date endTime;
     private String content;
     private Set<ApplicationPhase> applicationPhases = new HashSet<ApplicationPhase>(0);
     private Set<Application> applications = new HashSet<Application>(0);

    public Application() {
    }

    public Application(SysDicD sysDicD, Application application, ApprovalProcess approvalProcess, Users users, Date startTime, Date endTime, String content, Set<ApplicationPhase> applicationPhases, Set<Application> applications) {
       this.sysDicD = sysDicD;
       this.application = application;
       this.approvalProcess = approvalProcess;
       this.users = users;
       this.startTime = startTime;
       this.endTime = endTime;
       this.content = content;
       this.applicationPhases = applicationPhases;
       this.applications = applications;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="ID_APPLICATION", unique=true, nullable=false)
    public Long getIdApplication() {
        return this.idApplication;
    }
    
    public void setIdApplication(Long idApplication) {
        this.idApplication = idApplication;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="STATUS")
    public SysDicD getSysDicD() {
        return this.sysDicD;
    }
    
    public void setSysDicD(SysDicD sysDicD) {
        this.sysDicD = sysDicD;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="PRIVOUS_APPLICATION")
    public Application getApplication() {
        return this.application;
    }
    
    public void setApplication(Application application) {
        this.application = application;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ID_APPROVAL_PROCESS")
    public ApprovalProcess getApprovalProcess() {
        return this.approvalProcess;
    }
    
    public void setApprovalProcess(ApprovalProcess approvalProcess) {
        this.approvalProcess = approvalProcess;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="APPLICANT")
    public Users getUsers() {
        return this.users;
    }
    
    public void setUsers(Users users) {
        this.users = users;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="START_TIME", length=19)
    public Date getStartTime() {
        return this.startTime;
    }
    
    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="END_TIME", length=19)
    public Date getEndTime() {
        return this.endTime;
    }
    
    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }
    
    @Column(name="CONTENT", length=1024)
    public String getContent() {
        return this.content;
    }
    
    public void setContent(String content) {
        this.content = content;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="application")
    public Set<ApplicationPhase> getApplicationPhases() {
        return this.applicationPhases;
    }
    
    public void setApplicationPhases(Set<ApplicationPhase> applicationPhases) {
        this.applicationPhases = applicationPhases;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="application")
    public Set<Application> getApplications() {
        return this.applications;
    }
    
    public void setApplications(Set<Application> applications) {
        this.applications = applications;
    }




}


